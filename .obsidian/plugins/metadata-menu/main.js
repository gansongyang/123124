/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetadataMenu
});
module.exports = __toCommonJS(main_exports);
var import_obsidian43 = require("obsidian");

// src/fields/fieldManagers/InputField.ts
var import_obsidian9 = require("obsidian");

// src/optionModals/fields/InputModal.ts
var import_obsidian3 = require("obsidian");

// src/commands/insertValues.ts
var import_obsidian = require("obsidian");
function insertValues(app2, fileOrFilePath, fieldName, value, lineNumber, inFrontmatter, after = true) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrFilePath instanceof import_obsidian.TFile) {
      file = fileOrFilePath;
    } else {
      const _file = app2.vault.getAbstractFileByPath(fileOrFilePath);
      if (_file instanceof import_obsidian.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const result = yield app2.vault.read(file);
    let newContent = [];
    result.split("\n").forEach((line, _lineNumber) => {
      if (_lineNumber == lineNumber) {
        if (after)
          newContent.push(line);
        newContent.push(`${fieldName}${inFrontmatter ? ":" : "::"} ${value}`);
        if (!after)
          newContent.push(line);
      } else {
        newContent.push(line);
      }
    });
    yield app2.vault.modify(file, newContent.join("\n"));
    const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
    if (editor) {
      const lineNumber2 = editor.getCursor().line;
      editor.setCursor({ line: editor.getCursor().line, ch: editor.getLine(lineNumber2).length });
    }
  });
}

// src/commands/replaceValues.ts
var import_obsidian2 = require("obsidian");

// src/utils/parser.ts
var fieldComponents = ["inQuote", "inList", "startStyle", "attribute", "endStyle", "beforeSeparatorSpacer", "afterSeparatorSpacer", "values"];
var genericFieldRegex = "(?<inQuote>>(\\s+)?)?(?<inList>- )?(?<startStyle>[_\\*~`]*)(?<attribute>[0-9\\w\\p{Letter}\\p{Emoji_Presentation}][-0-9\\w\\p{Letter}\\p{Emoji_Presentation}\\s]*)(?<endStyle>[_\\*~`]*)(?<beforeSeparatorSpacer>\\s*)";
var inlineFieldRegex = (attribute) => `(?<inQuote>>(\\s+)?)?(?<inList>- )?(?<startStyle>[_\\*~\`]*)(?<attribute>${attribute})(?<endStyle>[_\\*~\`]*)(?<beforeSeparatorSpacer>\\s*)::(?<afterSeparatorSpacer>\\s*)(?<values>[^\\]]*)`;
var fullLineRegex = new RegExp(`^${genericFieldRegex}::s*(?<values>.*)?`, "u");
var inSentenceRegexBrackets = new RegExp(`\\[${genericFieldRegex}::s*(?<values>[^\\]]+)?\\]`, "gu");
var inSentenceRegexPar = new RegExp(`\\(${genericFieldRegex}::s*(?<values>[^\\]]+)?\\)`, "gu");
var encodeLink = (value) => {
  return value ? value.replace(/\[\[/g, "\u{1F527}\u{1F400}").replace(/\]\]/g, "\u{1F413}\u{1F54C}") : value;
};
var decodeLink = (value) => {
  return value ? value.replace(/🔧🐀/gu, "[[").replace(/🐓🕌/gu, "]]") : value;
};
var frontMatterLineField = (line) => {
  const frontMatterRegex = new RegExp(new RegExp("(?<attribute>[0-9\\w\\p{Letter}\\p{Emoji_Presentation}][-0-9\\w\\p{Letter}\\p{Emoji_Presentation}\\s]*)(?<beforeSeparatorSpacer>\\s*):(?<afterSeparatorSpacer>\\s*)(?<values>.*)", "u"));
  const fR = line.match(frontMatterRegex);
  if (fR == null ? void 0 : fR.groups) {
    const { attribute, values } = fR == null ? void 0 : fR.groups;
    return attribute;
  }
};
var getLineFields = (line) => {
  const fields = [];
  const fR = line.match(fullLineRegex);
  if (fR == null ? void 0 : fR.groups) {
    const { attribute, values } = fR == null ? void 0 : fR.groups;
    fields.push({ attribute, values, index: 0, length: line.length });
  } else {
    const sRBk = encodeLink(line).matchAll(inSentenceRegexBrackets);
    let next = sRBk.next();
    while (!next.done) {
      if (next.value.groups) {
        const { attribute, values } = next.value.groups;
        fields.push({ attribute, values: decodeLink(values), index: next.value.index || 0, length: next.value[0].length });
      }
      next = sRBk.next();
    }
    const sRBc = encodeLink(line).matchAll(inSentenceRegexPar);
    next = sRBc.next();
    while (!next.done) {
      if (next.value.groups) {
        const { attribute, values } = next.value.groups;
        fields.push({ attribute, values: decodeLink(values), index: next.value.index || 0, length: next.value[0].length });
      }
      next = sRBc.next();
    }
  }
  fields.sort((a, b) => {
    if (a.index < b.index)
      return -1;
    if (a.index > b.index)
      return 1;
    return 0;
  });
  return fields;
};

// src/commands/replaceValues.ts
var LocationWrapper = {
  "fullLine": { start: "", end: "" },
  "brackets": { start: "[", end: "]" },
  "parenthesis": { start: "(", end: ")" }
};
var matchInlineFields = (regex, line, attribute, input, location = "fullLine") => {
  const sR = line.matchAll(regex);
  let next = sR.next();
  const newFields = [];
  while (!next.done) {
    const match = next.value;
    if (match.groups && Object.keys(match.groups).every((j) => fieldComponents.includes(j))) {
      const { inList, inQuote, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = match.groups;
      const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
      const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
      const start2 = LocationWrapper[location].start;
      const end2 = LocationWrapper[location].end;
      newFields.push({
        oldField: match[0],
        newField: `${inQuote || ""}${start2}${inList || ""}${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}${end2}`
      });
    }
    next = sR.next();
  }
  return newFields;
};
function replaceValues(app2, fileOrFilePath, attribute, input) {
  return __async(this, null, function* () {
    var _a, _b;
    let file;
    if (fileOrFilePath instanceof import_obsidian2.TFile) {
      file = fileOrFilePath;
    } else {
      const _file = app2.vault.getAbstractFileByPath(fileOrFilePath);
      if (_file instanceof import_obsidian2.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const content = (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start: start2, end: end2 } } = frontmatter ? frontmatter : { position: { start: void 0, end: void 0 } };
    const newContent = content.map((line, i) => {
      if (frontmatter && i >= start2.line && i <= end2.line) {
        const regex = new RegExp(`${attribute}:`, "u");
        const r = line.match(regex);
        if (r && r.length > 0) {
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `[${inputArray.join(", ")}]`;
          return `${attribute}: ${newValue}`;
        } else {
          return line;
        }
      } else {
        const encodedInput = encodeLink(input);
        let encodedLine = encodeLink(line);
        const fullLineRegex2 = new RegExp(`^${inlineFieldRegex(attribute)}`, "u");
        const fR = encodedLine.match(fullLineRegex2);
        if ((fR == null ? void 0 : fR.groups) && Object.keys(fR.groups).every((j) => fieldComponents.includes(j))) {
          const { inList, inQuote, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = fR.groups;
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
          return `${inQuote || ""}${inList || ""}${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}`;
        } else {
          const newFields = [];
          const inSentenceRegexBrackets2 = new RegExp(`\\[${inlineFieldRegex(attribute)}\\]`, "gu");
          const inSentenceRegexPar2 = new RegExp(`\\(${inlineFieldRegex(attribute)}\\)`, "gu");
          newFields.push(...matchInlineFields(inSentenceRegexBrackets2, encodedLine, attribute, encodedInput, "brackets" /* brackets */));
          newFields.push(...matchInlineFields(inSentenceRegexPar2, encodedLine, attribute, encodedInput, "parenthesis" /* parenthesis */));
          newFields.forEach((field) => {
            const fieldRegex = new RegExp(field.oldField.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "u");
            encodedLine = encodedLine.replace(fieldRegex, field.newField);
          });
          return decodeLink(encodedLine);
        }
      }
    });
    yield app2.vault.modify(file, newContent.join("\n"));
    const editor = (_b = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView)) == null ? void 0 : _b.editor;
    if (editor) {
      const lineNumber = editor.getCursor().line;
      editor.setCursor({ line: editor.getCursor().line, ch: editor.getLine(lineNumber).length });
    }
  });
}

// src/optionModals/fields/InputModal.ts
var InputModal = class extends import_obsidian3.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, after = false) {
    super(app2);
    this.templateValues = {};
    this.app = app2;
    this.file = file;
    this.field = field;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.after = after;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv();
    if (this.field.options.template) {
      const templateFieldRegex = new RegExp(`\\{\\{(?<field>[^\\}]+?)\\}\\}`, "gu");
      const tF = this.field.options.template.matchAll(templateFieldRegex);
      let next = tF.next();
      while (!next.done) {
        if (next.value.groups) {
          const value = next.value.groups.field;
          const [name, optionsString] = value.split(":").map((v) => v.trim());
          this.templateValues[name] = "";
          if (optionsString) {
            const options = JSON.parse(optionsString);
            this.buildTemplateSelectItem(inputDiv, name, options);
          } else {
            this.buildTemplateInputItem(inputDiv, name);
          }
        }
        next = tF.next();
      }
      this.buildResultPreview(inputDiv);
      this.buildSaveBtn(inputDiv);
    } else {
      this.buildInputEl(inputDiv);
    }
  }
  renderValue() {
    let renderedString = this.field.options.template.slice();
    Object.keys(this.templateValues).forEach((k) => {
      const fieldRegex = new RegExp(`\\{\\{${k.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}(:[^\\}]*)?\\}\\}`, "u");
      renderedString = renderedString.replace(fieldRegex, this.templateValues[k]);
    });
    this.renderedValue.setValue(renderedString);
  }
  buildTemplateInputItem(inputDiv, name) {
    inputDiv.createDiv({ text: name, cls: "metadata-menu-input-label" });
    const inputEl = new import_obsidian3.TextComponent(inputDiv);
    inputEl.setPlaceholder(`Enter a value for ${name}`);
    inputEl.inputEl.addClass("metadata-menu-prompt-input");
    inputEl.onChange((value) => {
      this.templateValues[name] = value;
      this.renderValue();
    });
  }
  buildTemplateSelectItem(inputDiv, name, options) {
    inputDiv.createDiv({ text: name, cls: "metadata-menu-input-label" });
    const selectEl = new import_obsidian3.DropdownComponent(inputDiv);
    selectEl.addOption("", "--select--");
    options.forEach((o) => selectEl.addOption(o, o));
    selectEl.onChange((value) => {
      this.templateValues[name] = value;
      this.renderValue();
    });
  }
  buildResultPreview(inputDiv) {
    inputDiv.createEl("hr");
    inputDiv.createDiv({ text: "Result preview", cls: "metadata-menu-input-label" });
    const renderedValueContainer = inputDiv.createDiv();
    this.renderedValue = new import_obsidian3.TextAreaComponent(renderedValueContainer);
    this.renderedValue.inputEl.addClass("metadata-menu-prompt-input");
    this.renderedValue.inputEl.rows = 3;
    this.renderedValue.setValue(this.value);
  }
  buildSaveBtn(inputDiv) {
    inputDiv.createEl("hr");
    const saveBtnContainer = inputDiv.createDiv({ cls: "metadata-menu-textarea-buttons" });
    const saveBtn = saveBtnContainer.createEl("button");
    (0, import_obsidian3.setIcon)(saveBtn, "checkmark");
    saveBtn.onclick = () => __async(this, null, function* () {
      let inputValue = this.renderedValue.getValue();
      if (this.lineNumber == -1) {
        yield replaceValues(this.app, this.file, this.field.name, inputValue);
      } else {
        yield insertValues(this.app, this.file, this.field.name, inputValue, this.lineNumber, this.inFrontmatter, this.after);
      }
      ;
      this.close();
    });
  }
  buildInputEl(inputDiv) {
    const form = inputDiv.createEl("form");
    form.type = "submit";
    const inputEl = new import_obsidian3.TextComponent(form);
    inputEl.inputEl.focus();
    inputEl.setValue(`${this.value}`);
    inputEl.inputEl.addClass("metadata-menu-prompt-input");
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let inputValue = inputEl.getValue();
      if (this.lineNumber == -1) {
        yield replaceValues(this.app, this.file, this.field.name, inputValue);
      } else {
        yield insertValues(this.app, this.file, this.field.name, inputValue, this.lineNumber, this.inFrontmatter, this.after);
      }
      ;
      this.close();
    });
  }
};

// src/fields/FieldManager.ts
var import_obsidian8 = require("obsidian");

// src/optionModals/insertFieldSuggestModal.ts
var import_obsidian5 = require("obsidian");

// src/optionModals/addNewFieldModal.ts
var import_obsidian4 = require("obsidian");
var addNewFieldModal = class extends import_obsidian4.Modal {
  constructor(plugin, lineNumber, file, inFrontmatter, after) {
    super(plugin.app);
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontmatter;
    this.file = file;
    this.after = after;
  }
  onOpen() {
    this.titleEl.setText("Insert new field");
    const addNewFieldContainer = this.contentEl.createDiv();
    const nameInputContainer = addNewFieldContainer.createDiv({ cls: "metadata-menu-prompt-container" });
    nameInputContainer.setText("Field Name: ");
    const nameInputEl = new import_obsidian4.TextComponent(nameInputContainer);
    nameInputEl.inputEl.addClass("metadata-menu-prompt-input");
    nameInputEl.setPlaceholder("Field name");
    const valueInputContainer = addNewFieldContainer.createDiv({ cls: "metadata-menu-prompt-container" });
    valueInputContainer.setText("Field value: ");
    const valueInputEl = new import_obsidian4.TextComponent(valueInputContainer);
    valueInputEl.inputEl.addClass("metadata-menu-prompt-input");
    valueInputEl.setPlaceholder("Field value");
    const footerButtons = this.contentEl.createDiv({
      cls: "metadata-menu-textarea-buttons"
    });
    const saveButton = new import_obsidian4.ButtonComponent(footerButtons);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      yield insertValues(this.app, this.file, nameInputEl.getValue(), valueInputEl.getValue(), this.lineNumber, this.inFrontmatter, this.after);
      this.close();
    }));
    const cancelButton = new import_obsidian4.ExtraButtonComponent(footerButtons);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => {
      this.close();
    });
  }
};

// src/optionModals/insertFieldSuggestModal.ts
var InsertFieldSuggestModal = class extends import_obsidian5.FuzzySuggestModal {
  constructor(plugin, file, lineNumber, inFrontmatter, after, fileClass) {
    super(plugin.app);
    this.lineNumber = lineNumber;
    this.plugin = plugin;
    this.file = file;
    this.inFrontmatter = inFrontmatter;
    this.after = after;
    this.fileClass = fileClass;
  }
  getItems() {
    if (this.fileClass) {
      return [{ actionLabel: "++New++" }].concat(this.fileClass.attributes.map((attr) => {
        return { actionLabel: attr.name, type: attr.type };
      }));
    } else {
      return [{ actionLabel: "++New++" }].concat(this.plugin.settings.presetFields.map((setting) => {
        return { actionLabel: setting.name, type: setting.type };
      }));
    }
    ;
  }
  getItemText(item) {
    return item.actionLabel;
  }
  renderSuggestion(item, el) {
    el.addClass("metadata-menu-command-suggest-item");
    const iconContainer = el.createDiv({ cls: "metadata-menu-command-suggest-icon" });
    item.item.type ? (0, import_obsidian5.setIcon)(iconContainer, FieldIcon[item.item.type]) : (0, import_obsidian5.setIcon)(iconContainer, "plus-with-circle");
    el.createDiv({ text: item.item.actionLabel, cls: "metadata-menu-command-suggest-action-label" });
    el.createDiv({ cls: "metadata-menu-command-suggest-spacer" });
    if (item.item.type) {
      const typeContainer = el.createEl("div");
      typeContainer.setAttr("class", `metadata-menu-setting-item-info-type ${FieldTypeTagClass[item.item.type]}`);
      typeContainer.setText(item.item.type);
    }
  }
  onChooseItem(item, evt) {
    if (item.actionLabel === "++New++") {
      const newFieldModal = new addNewFieldModal(this.plugin, this.lineNumber, this.file, this.inFrontmatter, this.after);
      newFieldModal.open();
      this.close();
    } else if (this.fileClass) {
      const fileClassAttributesWithName = this.fileClass.attributes.filter((attr) => attr.name == item.actionLabel);
      let field;
      let type;
      if (fileClassAttributesWithName.length > 0) {
        const fileClassAttribute = fileClassAttributesWithName[0];
        field = fileClassAttribute.getField();
        type = fileClassAttribute.type;
      }
      if (field) {
        const fieldManager = new FieldManager[field.type](field);
        fieldManager.createAndOpenFieldModal(this.app, this.file, item.actionLabel, "", this.lineNumber, this.inFrontmatter, this.after);
      }
      this.close();
    } else {
      const field = this.plugin.settings.presetFields.filter((_field) => _field.name == item.actionLabel)[0];
      const fieldManager = new FieldManager[field.type](field);
      fieldManager.createAndOpenFieldModal(this.app, this.file, item.actionLabel, "", this.lineNumber, this.inFrontmatter, this.after);
      this.close();
    }
    ;
  }
};

// src/settings/FieldSettingsModal.ts
var import_obsidian7 = require("obsidian");

// src/settings/FieldSetting.ts
var import_obsidian6 = require("obsidian");
var FieldSetting = class extends import_obsidian6.Setting {
  constructor(containerEl, property, app2, plugin) {
    super(containerEl);
    this.containerEl = containerEl;
    this.field = property;
    this.app = app2;
    this.plugin = plugin;
    this.setTextContentWithname();
    this.addEditButton();
    this.addDeleteButton();
  }
  setTextContentWithname() {
    const manager = new FieldManager[this.field.type](this.field);
    this.infoEl.textContent = "";
    this.infoEl.addClass("metadata-menu-setting-item");
    this.fieldNameContainer = this.infoEl.createEl("div", "metadata-menu-setting-item-name");
    this.fieldNameContainer.setText(this.field.name);
    this.typeContainer = this.infoEl.createEl("div");
    this.typeContainer.setAttr("class", `metadata-menu-setting-item-info-type ${FieldTypeTagClass[this.field.type]}`);
    this.typeContainer.setText(this.field.type);
    this.fieldOptionsContainer = this.infoEl.createEl("div");
    this.fieldOptionsContainer.setText(`${manager.getOptionsStr()}`);
  }
  addEditButton() {
    this.addButton((b) => {
      b.setIcon("pencil").setTooltip("Edit").onClick(() => {
        let modal = new FieldSettingsModal(this.app, this.plugin, this.containerEl, this, this.field);
        modal.open();
      });
    });
  }
  addDeleteButton() {
    this.addButton((b) => {
      b.setIcon("trash").setTooltip("Delete").onClick(() => {
        var _a;
        const currentExistingProperty = this.plugin.initialProperties.filter((p) => p.id == this.field.id)[0];
        if (currentExistingProperty) {
          this.plugin.initialProperties.remove(currentExistingProperty);
        }
        ;
        (_a = this.settingEl.parentElement) == null ? void 0 : _a.removeChild(this.settingEl);
        this.plugin.saveSettings();
      });
    });
  }
  static getValuesListFromNote(notePath, app2) {
    return __async(this, null, function* () {
      let values = [];
      const file = app2.vault.getAbstractFileByPath(notePath);
      if (file instanceof import_obsidian6.TFile && file.extension == "md") {
        const result = yield app2.vault.read(file);
        result.split("\n").forEach((line) => {
          if (/^(.*)$/.test(line)) {
            values.push(line.trim());
          }
          ;
        });
        return values;
      } else {
        return [];
      }
      ;
    });
  }
};

// src/settings/FieldSettingsModal.ts
var FieldSettingsModal = class extends import_obsidian7.Modal {
  constructor(app2, plugin, parentSettingContainer, parentSetting, field) {
    super(app2);
    this.saved = false;
    this.new = true;
    this.plugin = plugin;
    this.parentSetting = parentSetting;
    this.initialField = new Field_default();
    this.parentSettingContainer = parentSettingContainer;
    if (field) {
      this.new = false;
      this.field = field;
      Field_default.copyProperty(this.initialField, this.field);
    } else {
      let newId = 1;
      this.plugin.initialProperties.forEach((prop) => {
        if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
          newId = parseInt(prop.id) + 1;
        }
        ;
      });
      this.field = new Field_default();
      this.field.id = newId.toString();
      this.initialField.id = newId.toString();
    }
    ;
    this.fieldManager = new FieldManager[this.field.type](this.field);
  }
  onOpen() {
    return __async(this, null, function* () {
      if (this.field.name == "") {
        this.titleEl.setText(`Add a field and define options`);
      } else {
        this.titleEl.setText(`Manage settings options for ${this.field.name}`);
      }
      ;
      yield this.createForm();
    });
  }
  onClose() {
    Object.assign(this.field, this.initialField);
    if (!this.new && this.parentSetting) {
      this.parentSetting.setTextContentWithname();
    } else if (this.saved) {
      new FieldSetting(this.parentSettingContainer, this.field, this.app, this.plugin);
    }
    ;
  }
  createnameInputContainer(parentNode) {
    const fieldNameContainerLabel = parentNode.createDiv();
    fieldNameContainerLabel.setText(`Field Name:`);
    const input = new import_obsidian7.TextComponent(parentNode);
    const name = this.field.name;
    input.setValue(name);
    input.setPlaceholder("Name of the field");
    input.onChange((value) => {
      this.field.name = value;
      this.titleEl.setText(`Manage predefined options for ${this.field.name}`);
      FieldSettingsModal.removeValidationError(input);
    });
    return input;
  }
  createTypeSelectorContainer(parentNode) {
    const typeSelectorContainerLabel = parentNode.createDiv();
    typeSelectorContainerLabel.setText(`Field type:`);
    const select = new import_obsidian7.DropdownComponent(parentNode);
    Object.keys(FieldTypeLabelMapping).forEach((f) => select.addOption(f, FieldTypeTooltip[f]));
    if (this.field.type) {
      select.setValue(this.field.type);
    }
    select.onChange((typeLabel) => {
      this.field = new Field_default();
      Field_default.copyProperty(this.field, this.initialField);
      this.field.name = this.namePromptComponent.getValue();
      this.field.type = FieldTypeLabelMapping[typeLabel];
      if (this.field.type !== this.initialField.type && ![this.field.type, this.initialField.type].every((fieldType) => ["Multi" /* Multi */, "Select" /* Select */, "Cycle" /* Cycle */].includes(fieldType))) {
        this.field.options = {};
      }
      while (this.fieldOptionsContainer.firstChild) {
        this.fieldOptionsContainer.removeChild(this.fieldOptionsContainer.firstChild);
      }
      this.fieldManager = new FieldManager[this.field.type](this.field);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 0 /* PluginSettings */);
    });
  }
  createForm() {
    return __async(this, null, function* () {
      const div = this.contentEl.createDiv({ cls: "metadata-menu-prompt-div" });
      const mainDiv = div.createDiv({ cls: "metadata-menu-prompt-form" });
      const nameContainer = mainDiv.createDiv();
      this.namePromptComponent = this.createnameInputContainer(nameContainer);
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const typeSelectContainer = mainDiv.createDiv();
      this.fieldOptionsContainer = mainDiv.createDiv();
      const footerEl = this.contentEl.createDiv();
      const footerButtons = new import_obsidian7.Setting(footerEl);
      footerButtons.addButton((b) => this.createSaveButton(b));
      footerButtons.addExtraButton((b) => this.createCancelButton(b));
      this.createTypeSelectorContainer(typeSelectContainer);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 0 /* PluginSettings */);
    });
  }
  validateFields() {
    return this.fieldManager.validateName(this.namePromptComponent, this.namePromptComponent.inputEl) && this.fieldManager.validateOptions();
  }
  createSaveButton(b) {
    b.setTooltip("Save");
    b.setIcon("checkmark");
    b.onClick(() => __async(this, null, function* () {
      var _a;
      let error = !this.validateFields();
      if (error) {
        new import_obsidian7.Notice("Fix errors before saving.");
        return;
      }
      ;
      this.saved = true;
      const currentExistingField = this.plugin.initialProperties.filter((p) => p.id == this.field.id)[0];
      if (currentExistingField) {
        Field_default.copyProperty(currentExistingField, this.field);
      } else {
        this.plugin.initialProperties.push(this.field);
      }
      ;
      Field_default.copyProperty(this.initialField, this.field);
      if (this.parentSetting)
        Field_default.copyProperty(this.parentSetting.field, this.field);
      (_a = this.parentSetting) == null ? void 0 : _a.setTextContentWithname();
      this.plugin.saveSettings();
      this.close();
    }));
    return b;
  }
  createCancelButton(b) {
    b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.saved = false;
      if (this.initialField.name != "") {
        Object.assign(this.field, this.initialField);
      }
      ;
      this.close();
    });
    return b;
  }
  static setValidationError(textInput, insertAfter, message) {
    var _a;
    textInput.inputEl.addClass("is-invalid");
    if (message && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      let mDiv = textInput.inputEl.parentElement.querySelector(".invalid-feedback");
      if (!mDiv) {
        mDiv = createDiv({ cls: "invalid-feedback" });
      }
      mDiv.innerText = message;
      mDiv.insertAfter(insertAfter);
    }
  }
  static removeValidationError(textInput) {
    var _a;
    if (textInput.inputEl.hasClass("is-invalid") && ((_a = textInput.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
      textInput.inputEl.removeClass("is-invalid");
      textInput.inputEl.parentElement.removeChild(textInput.inputEl.parentElement.lastElementChild);
    }
    ;
  }
};

// src/fields/FieldManager.ts
var FieldManager2 = class {
  constructor(field, type) {
    if (field.type !== type)
      throw Error(`This field is not of type ${type}`);
    this.field = field;
  }
  static buildMarkDownLink(app2, file, path) {
    const destFile = app2.metadataCache.getFirstLinkpathDest(path, file.path);
    if (destFile) {
      return app2.fileManager.generateMarkdownLink(destFile, file.path, void 0, destFile.basename);
    }
    return "";
  }
  validateName(textInput, insertAfter) {
    let error = false;
    if (/^[#>-]/.test(this.field.name)) {
      FieldSettingsModal.setValidationError(textInput, insertAfter, "Field name cannot start with #, >, -");
      error = true;
    }
    ;
    if (this.field.name == "") {
      FieldSettingsModal.setValidationError(textInput, insertAfter, "Field name can not be Empty");
      error = true;
    }
    ;
    return !error;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      return true;
    });
  }
  static replaceValues(app2, path, fieldName, value) {
    const file = app2.vault.getAbstractFileByPath(path);
    if (file instanceof import_obsidian8.TFile && file.extension == "md") {
      replaceValues(app2, file, fieldName, value);
    }
  }
  static isMenu(location) {
    return location.addItem !== void 0;
  }
  static isSuggest(location) {
    return location.getItems !== void 0;
  }
  static isInsertFieldCommand(location) {
    return location === "InsertFieldCommand";
  }
  static createAndOpenModal(plugin, file, fieldName, field, value, lineNumber, inFrontmatter, after) {
    if (field) {
      const fieldManager = new FieldManager[field.type](field);
      fieldManager.createAndOpenFieldModal(plugin.app, file, fieldName, value, lineNumber, inFrontmatter, after);
    } else {
      const fieldManager = FieldManager2.createDefault(fieldName);
      fieldManager.createAndOpenFieldModal(plugin.app, file, fieldName, value, lineNumber, inFrontmatter, after);
    }
  }
  static openFieldModal(plugin, file, fieldName, value, lineNumber, inFrontmatter, after, fileClass) {
    if (!fieldName) {
      const modal = new InsertFieldSuggestModal(plugin, file, lineNumber, inFrontmatter, after, fileClass);
      modal.open();
    } else {
      if (fileClass) {
        const fileClassAttributesWithName = fileClass.attributes.filter((attr) => attr.name == fieldName);
        let field;
        if (fileClassAttributesWithName.length > 0) {
          const fileClassAttribute = fileClassAttributesWithName[0];
          field = fileClassAttribute.getField();
        }
        this.createAndOpenModal(plugin, file, fieldName, field, value, lineNumber, inFrontmatter, after);
      } else {
        const field = plugin.settings.presetFields.filter((_field) => _field.name == fieldName)[0];
        this.createAndOpenModal(plugin, file, fieldName, field, value, lineNumber, inFrontmatter, after);
      }
      ;
    }
  }
  static createDefault(name) {
    const field = Field_default.createDefault(name);
    return new FieldManager[field.type](field);
  }
  static stringToBoolean(value) {
    let toBooleanValue = false;
    if (isBoolean(value)) {
      toBooleanValue = value;
    } else if (/true/i.test(value)) {
      toBooleanValue = true;
    } else if (/false/i.test(value)) {
      toBooleanValue = false;
    } else {
      throw Error("this value is not a boolean");
    }
    ;
    return toBooleanValue;
  }
};

// src/fields/fieldManagers/InputField.ts
var InputField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Input" /* Input */);
  }
  getOptionsStr() {
    return this.field.options.template;
  }
  addFieldOption(name, value, app2, file, location) {
    const modal = new InputModal(app2, file, this.field, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    if (InputField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon(FieldIcon["Input" /* Input */]);
        item.onClick(() => modal.open());
        item.setSection("metadata-menu.fields");
      });
    } else if (InputField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action: () => modal.open(),
        icon: FieldIcon["Input" /* Input */]
      });
    }
    ;
  }
  createSettingContainer(parentContainer, plugin) {
    const templateContainer = parentContainer.createDiv();
    templateContainer.createEl("span", { text: "Template", cls: "metadata-menu-field-option" });
    const templateValue = new import_obsidian9.TextAreaComponent(templateContainer);
    templateValue.inputEl.cols = 50;
    templateValue.inputEl.rows = 4;
    templateValue.setValue(this.field.options.template || "");
    templateValue.onChange((value) => {
      this.field.options.template = value;
    });
  }
  validateOptions() {
    return true;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, value, lineNumber, inFrontmatter, after) {
    const fieldModal = new InputModal(app2, file, this.field, value || "", lineNumber, inFrontmatter, after);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const inputContainer = document.createElement("div");
      const input = document.createElement("input");
      input.setAttr("class", "metadata-menu-dv-input");
      inputContainer.appendChild(input);
      input.value = p[this.field.name];
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const button = document.createElement("button");
      (0, import_obsidian9.setIcon)(button, FieldIcon["Input" /* Input */]);
      button.setAttr("class", "metadata-menu-dv-field-button");
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        button.hide();
        spacer.show();
        fieldContainer.onmouseover = () => {
          button.show();
          spacer.hide();
        };
        fieldContainer.onmouseout = () => {
          button.hide();
          spacer.show();
        };
      }
      const validateIcon = document.createElement("button");
      (0, import_obsidian9.setIcon)(validateIcon, "checkmark");
      validateIcon.setAttr("class", "metadata-menu-dv-field-button");
      validateIcon.onclick = (e) => {
        InputField.replaceValues(plugin.app, p["file"]["path"], this.field.name, input.value);
        fieldContainer.removeChild(inputContainer);
      };
      inputContainer == null ? void 0 : inputContainer.appendChild(validateIcon);
      const cancelIcon = document.createElement("button");
      cancelIcon.setAttr("class", "metadata-menu-dv-field-button");
      (0, import_obsidian9.setIcon)(cancelIcon, "cross");
      cancelIcon.onclick = (e) => {
        fieldContainer.removeChild(inputContainer);
        fieldContainer.appendChild(button);
        fieldContainer.appendChild(fieldValue);
        fieldContainer.appendChild(spacer);
      };
      inputContainer.appendChild(cancelIcon);
      input.focus();
      input.onkeydown = (e) => {
        if (e.key === "Enter") {
          InputField.replaceValues(plugin.app, p["file"]["path"], this.field.name, input.value);
          fieldContainer.removeChild(inputContainer);
        }
        if (e.key === "Escape") {
          fieldContainer.removeChild(inputContainer);
          fieldContainer.appendChild(button);
          fieldContainer.appendChild(fieldValue);
          fieldContainer.appendChild(spacer);
        }
      };
      button.onclick = (e) => {
        if (this.field.options.template) {
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian9.TFile && file.extension === "md") {
            const inputModal = new InputModal(plugin.app, file, this.field, p[this.field.name]);
            inputModal.open();
          }
        } else {
          fieldContainer.removeChild(fieldValue);
          fieldContainer.removeChild(button);
          fieldContainer.removeChild(spacer);
          fieldContainer.appendChild(inputContainer);
          input.focus();
        }
      };
      fieldContainer.appendChild(button);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(spacer);
    });
  }
};

// src/optionModals/fields/BooleanModal.ts
var import_obsidian10 = require("obsidian");
var BooleanModal = class extends import_obsidian10.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, after = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.after = after;
    this.field = field;
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv({
      cls: "metadata-menu-toggler"
    });
    this.buildToggleEl(inputDiv);
  }
  buildToggleEl(inputDiv) {
    const toggleEl = new import_obsidian10.ToggleComponent(inputDiv);
    const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
    const saveButton = new import_obsidian10.ButtonComponent(footer);
    toggleEl.setValue(this.value);
    toggleEl.onChange((value) => {
      this.value = value;
      saveButton.buttonEl.focus();
    });
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      const value = this.value.toString();
      if (this.lineNumber == -1) {
        yield replaceValues(this.app, this.file, this.field.name, value);
      } else {
        yield insertValues(this.app, this.file, this.field.name, value, this.lineNumber, this.inFrontmatter, this.after);
      }
      ;
      this.close();
    }));
  }
};

// src/fields/fieldManagers/BooleanField.ts
var BooleanField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Boolean" /* Boolean */);
  }
  addFieldOption(name, value, app2, file, location) {
    const bValue = BooleanField.stringToBoolean(value);
    if (BooleanField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`<${name}> ${bValue ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}`);
        item.setIcon(FieldIcon["Boolean" /* Boolean */]);
        item.onClick(() => replaceValues(app2, file, name, (!bValue).toString()));
        item.setSection("metadata-menu.fields");
      });
    } else if (BooleanField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span><b>${name}</b> ${bValue ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}</span>`,
        action: () => replaceValues(app2, file, name, (!bValue).toString()),
        icon: FieldIcon["Boolean" /* Boolean */]
      });
    }
    ;
  }
  getOptionsStr() {
    return "";
  }
  createSettingContainer(parentContainer, plugin) {
  }
  validateValue(value) {
    return __async(this, null, function* () {
      try {
        const bValue = BooleanField.stringToBoolean(value);
        return isBoolean(bValue);
      } catch (error) {
        return false;
      }
    });
  }
  validateOptions() {
    return true;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, value, lineNumber, inFrontmatter, after) {
    const bValue = BooleanField.stringToBoolean(value || "false");
    const fieldModal = new BooleanModal(app2, file, this.field, bValue, lineNumber, inFrontmatter, after);
    fieldModal.titleEl.setText(`Set value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const checkbox = dv.el("input", "", __spreadProps(__spreadValues({}, attrs), { "type": "checkbox" }));
      checkbox.checked = p[this.field.name];
      fieldContainer.appendChild(checkbox);
      checkbox.onchange = (value) => {
        BooleanField.replaceValues(plugin.app, p["file"]["path"], this.field.name, checkbox.checked.toString());
      };
    });
  }
};

// src/fields/fieldManagers/NumberField.ts
var import_obsidian12 = require("obsidian");

// src/optionModals/fields/NumberModal.ts
var import_obsidian11 = require("obsidian");
var NumbertModal = class extends import_obsidian11.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, after = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    this.value = value;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.after = after;
    this.fieldManager = new FieldManager[this.field.type](this.field);
  }
  onOpen() {
    const inputDiv = this.contentEl.createDiv();
    this.buildInputEl(inputDiv);
  }
  decrement(inputEl) {
    const { step } = this.field.options;
    const fStep = parseFloat(step);
    if (!isNaN(fStep)) {
      inputEl.setValue((parseFloat(inputEl.getValue()) - fStep).toString());
    } else {
      inputEl.setValue((parseFloat(inputEl.getValue()) - 1).toString());
    }
  }
  increment(inputEl) {
    const { step } = this.field.options;
    const fStep = parseFloat(step);
    if (!isNaN(fStep)) {
      inputEl.setValue((parseFloat(inputEl.getValue()) + fStep).toString());
    } else {
      inputEl.setValue((parseFloat(inputEl.getValue()) + 1).toString());
    }
  }
  toggleButtonsState(minusBtn, plusBtn, inputEl) {
    minusBtn.setDisabled(!this.fieldManager.canDecrement(inputEl.getValue()));
    plusBtn.setDisabled(!this.fieldManager.canIncrement(inputEl.getValue()));
    if (this.fieldManager.canDecrement(inputEl.getValue())) {
      minusBtn.setCta();
    } else {
      minusBtn.removeCta();
    }
    if (this.fieldManager.canIncrement(inputEl.getValue())) {
      plusBtn.setCta();
    } else {
      plusBtn.removeCta();
    }
  }
  buildInputEl(inputDiv) {
    const { step } = this.field.options;
    const form = inputDiv.createEl("form");
    form.type = "submit";
    const fieldContainer = form.createEl("div", { cls: "metadata-menu-modal-value-with-btn" });
    const inputEl = new import_obsidian11.TextComponent(fieldContainer);
    inputEl.inputEl.focus();
    inputEl.setValue(`${this.value}`);
    const minusBtn = new import_obsidian11.ButtonComponent(fieldContainer);
    minusBtn.setButtonText(`- ${!!step ? step : 1}`);
    minusBtn.setDisabled(!this.fieldManager.canDecrement(inputEl.getValue()));
    const plusBtn = new import_obsidian11.ButtonComponent(fieldContainer);
    plusBtn.setButtonText(`+ ${!!step ? step : 1}`);
    plusBtn.setDisabled(!this.fieldManager.canIncrement(inputEl.getValue()));
    const errorField = form.createEl("div", { cls: "metadata-menu-modal-value-with-btn-error-field" });
    errorField.hide();
    const footer = form.createEl("div", { cls: "metadata-menu-value-grid-footer" });
    const validateBtn = new import_obsidian11.ButtonComponent(footer);
    validateBtn.setIcon("checkmark");
    const cancelBtn = new import_obsidian11.ButtonComponent(footer);
    cancelBtn.setIcon("cross");
    this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    inputEl.onChange(() => {
      inputEl.inputEl.removeClass("is-invalid");
      errorField.hide();
      errorField.setText("");
      this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    });
    plusBtn.onClick((e) => {
      e.preventDefault();
      this.increment(inputEl);
      this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    });
    minusBtn.onClick((e) => {
      e.preventDefault();
      this.decrement(inputEl);
      this.toggleButtonsState(minusBtn, plusBtn, inputEl);
    });
    cancelBtn.onClick((e) => {
      e.preventDefault();
      this.close();
    });
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let inputValue = inputEl.getValue();
      if (!this.fieldManager.validateValue(inputValue)) {
        const { min: min2, max: max2 } = this.field.options;
        errorField.show();
        errorField.setText(`value must be numeric${min2 ? " and >= " + min2 : ""} ${max2 ? " and <= " + max2 : ""}`);
        inputEl.inputEl.setAttr("class", "is-invalid");
        return;
      }
      if (this.lineNumber == -1) {
        yield replaceValues(this.app, this.file, this.field.name, inputValue);
      } else {
        yield insertValues(this.app, this.file, this.field.name, inputValue, this.lineNumber, this.inFrontmatter, this.after);
      }
      ;
      this.close();
    });
  }
};

// src/fields/fieldManagers/NumberField.ts
var NumberField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Number" /* Number */);
  }
  getOptionsStr() {
    const options = [];
    Object.keys(this.field.options).forEach((k) => {
      if (this.field.options[k])
        options.push(`${k}: ${this.field.options[k]}`);
    });
    return options.join(" | ");
  }
  canDecrement(value) {
    const { step, min: min2 } = this.field.options;
    const fStep = parseFloat(step);
    const fMin = parseFloat(min2);
    return !(isNaN(parseFloat(value)) || !isNaN(fMin) && (!isNaN(fStep) && (parseFloat(value) - fStep < fMin || parseFloat(value) - 1 < fMin)));
  }
  canIncrement(value) {
    const { step, max: max2 } = this.field.options;
    const fStep = parseFloat(step);
    const fMax = parseFloat(max2);
    return !(isNaN(parseFloat(value)) || !isNaN(fMax) && (!isNaN(fStep) && (parseFloat(value) + fStep > fMax || parseFloat(value) + 1 > fMax)));
  }
  validateValue(value) {
    return __async(this, null, function* () {
      const { min: min2, max: max2 } = this.field.options;
      const fMin = parseFloat(min2);
      const fMax = parseFloat(max2);
      const fValue = parseFloat(value);
      return !isNaN(fValue) && (isNaN(fMin) || fValue >= fMin) && (isNaN(fMax) || fValue <= fMax);
    });
  }
  addFieldOption(name, value, app2, file, location) {
    const modal = new NumbertModal(app2, file, this.field, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    if (NumberField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon(FieldIcon["Number" /* Number */]);
        item.onClick(() => modal.open());
        item.setSection("metadata-menu.fields");
      });
      const { min: min2, max: max2, step } = this.field.options;
      const fMin = parseFloat(min2);
      const fMax = parseFloat(max2);
      const fStep = parseFloat(step);
      const fValue = parseFloat(value);
      if (fStep) {
        if (!isNaN(fMin) && fValue - fStep > fMin)
          location.addItem((item) => {
            item.setIcon(FieldIcon["Number" /* Number */]);
            item.setTitle(`<${name}> \u2198\uFE0F ${fValue - fStep}`);
            item.onClick(() => replaceValues(app2, file, name, (fValue - fStep).toString()));
            item.setSection("metadata-menu.fields");
          });
        if (!isNaN(fMax) && fValue + fStep < fMax)
          location.addItem((item) => {
            item.setIcon(FieldIcon["Number" /* Number */]);
            item.setTitle(`<${name}> \u2197\uFE0F ${fValue + fStep}`);
            item.onClick(() => replaceValues(app2, file, name, (fValue + fStep).toString()));
            item.setSection("metadata-menu.fields");
          });
      }
    } else if (NumberField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action: () => modal.open(),
        icon: FieldIcon["Number" /* Number */]
      });
    }
    ;
  }
  createNumberContainer(parentContainer) {
    const numberStepValueContainer = parentContainer.createDiv();
    numberStepValueContainer.createEl("span", { text: "Step (optional)", cls: "metadata-menu-field-option" });
    this.numberStepValue = new import_obsidian12.TextComponent(numberStepValueContainer);
    this.numberStepValue.setValue(this.field.options.step || "");
    const numberMinValueContainer = parentContainer.createDiv();
    numberMinValueContainer.createEl("span", { text: "Min value (optional)", cls: "metadata-menu-field-option" });
    this.numberMinValue = new import_obsidian12.TextComponent(numberMinValueContainer);
    this.numberMinValue.setValue(this.field.options.min || "");
    const numberMaxValueContainer = parentContainer.createDiv();
    numberMaxValueContainer.createEl("span", { text: "Max value (optional)", cls: "metadata-menu-field-option" });
    this.numberMaxValue = new import_obsidian12.TextComponent(numberMaxValueContainer);
    this.numberMaxValue.setValue(this.field.options.max || "");
    this.numberStepValue.onChange((value) => {
      this.field.options.step = value;
      FieldSettingsModal.removeValidationError(this.numberStepValue);
    });
    this.numberMinValue.onChange((value) => {
      this.field.options.min = value;
      FieldSettingsModal.removeValidationError(this.numberMinValue);
    });
    this.numberMaxValue.onChange((value) => {
      this.field.options.max = value;
      FieldSettingsModal.removeValidationError(this.numberMaxValue);
    });
  }
  createSettingContainer(parentContainer, plugin) {
    this.numberValidatorField = parentContainer.createDiv({ cls: "metadata-menu-number-options" });
    this.createNumberContainer(this.numberValidatorField);
    this.numberValidatorField.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  validateOptions() {
    let error = false;
    if (this.field.options.step && isNaN(parseFloat(this.field.options.step))) {
      FieldSettingsModal.setValidationError(this.numberStepValue, this.numberStepValue.inputEl, "Values must be numeric.");
      error = true;
    }
    if (this.field.options.min && isNaN(parseFloat(this.field.options.min))) {
      FieldSettingsModal.setValidationError(this.numberMinValue, this.numberMinValue.inputEl, "Values must be numeric.");
      error = true;
    }
    if (this.field.options.max && isNaN(parseFloat(this.field.options.max))) {
      FieldSettingsModal.setValidationError(this.numberMaxValue, this.numberMaxValue.inputEl, "Values must be numeric.");
      error = true;
    }
    return !error;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, value, lineNumber, inFrontmatter, after) {
    const fieldModal = new NumbertModal(app2, file, this.field, value || "", lineNumber, inFrontmatter, after);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  toggleDvButtons(decrementBtn, incrementBtn, value) {
    if (this.canDecrement(value)) {
      decrementBtn.removeClass("disabled");
    } else {
      decrementBtn.addClass("disabled");
    }
    if (this.canIncrement(value)) {
      incrementBtn.removeClass("disabled");
    } else {
      incrementBtn.addClass("disabled");
      ;
    }
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const inputContainer = document.createElement("div");
      const input = document.createElement("input");
      input.setAttr("class", "metadata-menu-dv-input");
      inputContainer.appendChild(input);
      input.value = p[this.field.name];
      const tripleSpacer = document.createElement("div");
      tripleSpacer.setAttr("class", "metadata-menu-dv-field-triple-spacer");
      const editButton = document.createElement("button");
      (0, import_obsidian12.setIcon)(editButton, FieldIcon["Number" /* Number */]);
      editButton.setAttr("class", "metadata-menu-dv-field-button");
      const decrementButton = document.createElement("button");
      (0, import_obsidian12.setIcon)(decrementButton, "left-arrow");
      decrementButton.setAttr("class", "metadata-menu-dv-field-button");
      const incrementButton = document.createElement("button");
      (0, import_obsidian12.setIcon)(incrementButton, "right-arrow");
      incrementButton.setAttr("class", "metadata-menu-dv-field-button");
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        editButton.hide();
        decrementButton.hide();
        incrementButton.hide();
        tripleSpacer.show();
        fieldContainer.onmouseover = () => {
          editButton.show();
          decrementButton.show();
          incrementButton.show();
          tripleSpacer.hide();
        };
        fieldContainer.onmouseout = () => {
          editButton.hide();
          decrementButton.hide();
          incrementButton.hide();
          tripleSpacer.show();
        };
      }
      const validateIcon = document.createElement("a");
      (0, import_obsidian12.setIcon)(validateIcon, "checkmark");
      validateIcon.setAttr("class", "metadata-menu-dv-field-button");
      validateIcon.onclick = () => __async(this, null, function* () {
        if (yield this.validateValue(input.value)) {
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian12.TFile && file.extension == "md") {
            yield replaceValues(plugin.app, file, this.field.name, input.value);
            this.toggleDvButtons(decrementButton, incrementButton, input.value);
          }
          fieldContainer.removeChild(inputContainer);
        }
      });
      inputContainer == null ? void 0 : inputContainer.appendChild(validateIcon);
      const cancelIcon = document.createElement("a");
      cancelIcon.setAttr("class", "metadata-menu-dv-field-button");
      (0, import_obsidian12.setIcon)(cancelIcon, "cross");
      cancelIcon.onclick = (e) => {
        fieldContainer.removeChild(inputContainer);
        fieldContainer.appendChild(decrementButton);
        fieldContainer.appendChild(fieldValue);
        fieldContainer.appendChild(editButton);
        fieldContainer.appendChild(incrementButton);
        fieldContainer.appendChild(tripleSpacer);
      };
      inputContainer.appendChild(cancelIcon);
      input.focus();
      input.onkeyup = (e) => {
        if (!this.validateValue(input.value)) {
          input.addClass("is-invalid");
          validateIcon.addClass("disabled");
        } else {
          input.removeClass("is-invalid");
          validateIcon.removeClass("disabled");
        }
      };
      input.onkeydown = (e) => __async(this, null, function* () {
        if (e.key === "Enter") {
          if (yield this.validateValue(input.value)) {
            const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
            if (file instanceof import_obsidian12.TFile && file.extension == "md") {
              yield replaceValues(plugin.app, file, this.field.name, input.value);
              this.toggleDvButtons(decrementButton, incrementButton, input.value);
            }
            fieldContainer.removeChild(inputContainer);
          }
        }
        if (e.key === "Escape") {
          fieldContainer.removeChild(inputContainer);
          fieldContainer.appendChild(decrementButton);
          fieldContainer.appendChild(fieldValue);
          fieldContainer.appendChild(editButton);
          fieldContainer.appendChild(incrementButton);
          fieldContainer.appendChild(tripleSpacer);
        }
      });
      editButton.onclick = () => {
        fieldContainer.removeChild(fieldValue);
        fieldContainer.removeChild(editButton);
        fieldContainer.removeChild(decrementButton);
        fieldContainer.removeChild(incrementButton);
        fieldContainer.removeChild(tripleSpacer);
        fieldContainer.appendChild(inputContainer);
        input.focus();
      };
      decrementButton.onclick = () => __async(this, null, function* () {
        if (this.canDecrement(p[this.field.name])) {
          const { step } = this.field.options;
          const fStep = parseFloat(step);
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian12.TFile && file.extension == "md") {
            const newValue = (!!fStep ? p[this.field.name] - fStep : p[this.field.name] - 1).toString();
            yield replaceValues(plugin.app, file, this.field.name, newValue);
            this.toggleDvButtons(decrementButton, incrementButton, newValue);
          }
        }
      });
      incrementButton.onclick = () => {
        if (this.canIncrement(p[this.field.name])) {
          const { step } = this.field.options;
          const fStep = parseFloat(step);
          const file = plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
          if (file instanceof import_obsidian12.TFile && file.extension == "md") {
            const newValue = (!!fStep ? p[this.field.name] + fStep : p[this.field.name] + 1).toString();
            replaceValues(plugin.app, file, this.field.name, newValue);
            this.toggleDvButtons(decrementButton, incrementButton, newValue);
          }
        }
      };
      fieldContainer.appendChild(decrementButton);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(editButton);
      fieldContainer.appendChild(incrementButton);
      fieldContainer.appendChild(tripleSpacer);
      this.toggleDvButtons(decrementButton, incrementButton, p[this.field.name]);
    });
  }
};

// src/fields/fieldManagers/SelectField.ts
var import_obsidian18 = require("obsidian");

// src/optionModals/fields/SelectModal.ts
var import_obsidian13 = require("obsidian");
var ValueSuggestModal = class extends import_obsidian13.SuggestModal {
  constructor(app2, file, value, field, lineNumber = -1, inFrontMatter = false, after = false) {
    super(app2);
    this.file = file;
    this.field = field;
    this.value = value;
    this.newValue = null;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.after = after;
  }
  getSuggestions(query) {
    return __async(this, null, function* () {
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.field.valuesListNotePath, this.app);
      let options = [];
      if (listNoteValues.length === 0) {
        options = Object.values(this.field.options).filter((o) => o.toLowerCase().includes(query.toLowerCase()));
      } else {
        options = listNoteValues.filter((o) => o.toLowerCase().includes(query.toLowerCase()));
      }
      return query ? [...options, "--empty--"] : ["--empty--", ...options];
    });
  }
  renderSuggestion(value, el) {
    el.setText(value);
    if (value === this.value)
      el.addClass("metadata-menu-value-selected");
  }
  onChooseSuggestion(item, evt) {
    return __async(this, null, function* () {
      this.newValue = item === "--empty--" ? "" : item;
      if (this.lineNumber == -1) {
        yield replaceValues(this.app, this.file, this.field.name, this.newValue);
      } else {
        yield insertValues(this.app, this.file, this.field.name, this.newValue, this.lineNumber, this.inFrontmatter, this.after);
      }
      ;
    });
  }
};

// src/fields/fieldManagers/AbstractListBasedField.ts
var import_obsidian17 = require("obsidian");

// src/suggester/FileSuggester.ts
var import_obsidian16 = require("obsidian");

// src/suggester/suggest.ts
var import_obsidian14 = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (isHTMLElement(element) && includeScale) {
    var offsetHeight = element.offsetHeight;
    var offsetWidth = element.offsetWidth;
    if (offsetWidth > 0) {
      scaleX = round(rect.width) / offsetWidth || 1;
    }
    if (offsetHeight > 0) {
      scaleY = round(rect.height) / offsetHeight || 1;
    }
  }
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/suggester/suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion == null ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
    selectedSuggestion == null ? void 0 : selectedSuggestion.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(app2, inputEl) {
    this.app = app2;
    this.inputEl = inputEl;
    this.scope = new import_obsidian14.Scope();
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(this.app.dom.appContainerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    this.app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
};

// src/utils/fileUtils.ts
var import_obsidian15 = require("obsidian");
function resolve_tfolder(app2, folder_str) {
  folder_str = (0, import_obsidian15.normalizePath)(folder_str);
  const folder = app2.vault.getAbstractFileByPath(folder_str);
  if (!folder) {
    throw new Error(`Folder "${folder_str}" doesn't exist`);
  }
  if (!(folder instanceof import_obsidian15.TFolder)) {
    throw new Error(`${folder_str} is a file, not a folder`);
  }
  return folder;
}
function get_tfiles_from_folder(app2, folder_str) {
  const folder = resolve_tfolder(app2, folder_str);
  const files = [];
  import_obsidian15.Vault.recurseChildren(folder, (file) => {
    if (file instanceof import_obsidian15.TFile) {
      files.push(file);
    }
  });
  files.sort((a, b) => {
    return a.basename.localeCompare(b.basename);
  });
  return files;
}

// src/suggester/FileSuggester.ts
var FileSuggest = class extends TextInputSuggest {
  constructor(app2, inputEl, plugin, folder) {
    super(app2, inputEl);
    this.app = app2;
    this.inputEl = inputEl;
    this.plugin = plugin;
    this.folder = folder;
  }
  getSuggestions(input_str) {
    const all_files = [];
    try {
      all_files.push(...get_tfiles_from_folder(this.app, this.folder));
    } catch (error) {
    }
    const files = [];
    const lower_input_str = input_str.toLowerCase();
    all_files.forEach((file) => {
      if (file instanceof import_obsidian16.TFile && file.extension === "md" && file.path.toLowerCase().contains(lower_input_str)) {
        files.push(file);
      }
    });
    return files;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/fields/fieldManagers/AbstractListBasedField.ts
var AbstractListBasedField = class extends FieldManager2 {
  constructor(field, type) {
    super(field, type);
  }
  setValueListText(header) {
    header.setText(`Preset options: ${Object.values(this.field.options).join(", ")}`);
  }
  createListNoteContainer(parentNode, plugin) {
    parentNode.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
    const listNoteContainerLabel = parentNode.createDiv({ cls: "metadata-menu-setting-fileClass-search" });
    listNoteContainerLabel.setText(`Path of the note containing the values:`);
    const input = new import_obsidian17.TextComponent(listNoteContainerLabel);
    new FileSuggest(plugin.app, input.inputEl, plugin, "/");
    const listNotePath = this.field.valuesListNotePath;
    input.setValue(listNotePath);
    input.setPlaceholder("Path/of/the/note.md");
    input.onChange((value) => this.field.valuesListNotePath = value);
  }
  removePresetValue(key) {
    let newValues = {};
    for (let _key in this.field.options) {
      if (key !== _key) {
        newValues[_key] = this.field.options[_key];
      }
      ;
    }
    ;
    this.field.options = newValues;
  }
  createValueContainer(parentNode, header, key) {
    const options = this.field.options;
    const presetValue = options[key];
    const valueContainer = parentNode.createDiv({
      cls: "metadata-menu-prompt-container"
    });
    const input = new import_obsidian17.TextComponent(valueContainer);
    this.valuesPromptComponents.push(input);
    input.setValue(presetValue);
    input.onChange((value) => {
      this.field.options[key] = value;
      this.setValueListText(header);
      FieldSettingsModal.removeValidationError(input);
    });
    const valueRemoveButton = new import_obsidian17.ButtonComponent(valueContainer);
    valueRemoveButton.setIcon("trash").onClick((evt) => {
      evt.preventDefault;
      this.removePresetValue(key);
      this.setValueListText(header);
      parentNode.removeChild(valueContainer);
      this.valuesPromptComponents.remove(input);
    });
    if (key != Object.keys(this.field.options)[0]) {
      const valueUpgradeButton = new import_obsidian17.ButtonComponent(valueContainer);
      (0, import_obsidian17.setIcon)(valueUpgradeButton.buttonEl, "up-chevron-glyph");
      valueUpgradeButton.onClick((evt) => {
        const thisValue = options[key];
        const inputIndex = this.valuesPromptComponents.indexOf(input);
        const upperComponent = inputIndex !== -1 ? this.valuesPromptComponents[inputIndex - 1] : this.valuesPromptComponents.last();
        if (upperComponent) {
          const upperValue = upperComponent.inputEl.value;
          const upperKey = Object.keys(options).filter((k) => options[k] == upperValue)[0];
          if (upperKey) {
            upperComponent.setValue(thisValue);
            options[upperKey] = thisValue;
            input.setValue(upperValue);
            options[key] = upperValue;
          }
          ;
        }
        ;
      });
    }
    ;
    return input;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      if (this.field.options && Object.values(this.field.options).length > 0) {
        if (value) {
          return Object.values(this.field.options).includes(value.trim());
        } else {
          return true;
        }
      } else if (this.field.valuesListNotePath) {
        const listNoteValues = yield FieldSetting.getValuesListFromNote(this.field.valuesListNotePath, app);
        return listNoteValues.contains(value.trim());
      } else {
        return false;
      }
    });
  }
  getOptionsStr() {
    if (this.field.valuesListNotePath)
      return this.field.valuesListNotePath;
    else if (Object.values(this.field.options).length)
      return Object.values(this.field.options).join(", ");
    else
      return "";
  }
  validateOptions() {
    let error = false;
    this.valuesPromptComponents.forEach((input) => {
      var _a, _b;
      if (/[,]/gu.test(input.inputEl.value) && ((_a = input.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot contain a comma");
        error = true;
      }
      ;
      if (input.inputEl.value == "" && ((_b = input.inputEl.parentElement) == null ? void 0 : _b.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values can't be null.");
        error = true;
      }
      ;
    });
    return !error;
  }
  createAddButton(valuesList, valuesListBody, valuesListHeader) {
    const valuesListFooter = valuesList.createDiv();
    const addValue = valuesListFooter.createEl("button");
    addValue.type = "button";
    addValue.textContent = "Add";
    addValue.onClickEvent((evt) => __async(this, null, function* () {
      evt.preventDefault;
      const newKey = yield this.field.insertNewValue("");
      this.createValueContainer(valuesListBody, valuesListHeader, newKey);
    }));
    valuesList.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  createSettingContainer(parentContainer, plugin, location) {
    if (location === 0 /* PluginSettings */)
      this.createListNoteContainer(parentContainer, plugin);
    this.presetValuesFields = parentContainer.createDiv();
    this.presetValuesFields.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
    const valuesList = this.presetValuesFields.createDiv();
    const valuesListHeader = valuesList.createDiv();
    valuesListHeader.createEl("h2");
    valuesListHeader.setText(`Preset options: ${Object.values(this.field.options).join(", ")}`);
    const valuesListBody = valuesList.createDiv();
    Object.keys(this.field.options).forEach((key) => {
      this.valuesPromptComponents.push(this.createValueContainer(valuesListBody, valuesListHeader, key));
    });
    this.createAddButton(valuesList, valuesListBody, valuesListHeader);
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      const fieldValue = dv.el("span", p[this.field.name]);
      fieldContainer.appendChild(fieldValue);
    });
  }
};

// src/fields/fieldManagers/SelectField.ts
var SelectField = class extends AbstractListBasedField {
  constructor(field) {
    super(field, "Select" /* Select */);
    this.valuesPromptComponents = [];
  }
  addFieldOption(name, value, app2, file, location) {
    const modal = new ValueSuggestModal(app2, file, value, this.field);
    modal.titleEl.setText("Select value");
    if (SelectField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon(FieldIcon["Select" /* Select */]);
        item.onClick(() => modal.open());
        item.setSection("metadata-menu.fields");
      });
    } else if (SelectField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action: () => modal.open(),
        icon: FieldIcon["Select" /* Select */]
      });
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, value, lineNumber, inFrontmatter, after) {
    const fieldModal = new ValueSuggestModal(app2, file, value || "", this.field, lineNumber, inFrontmatter, after);
    fieldModal.titleEl.setText(`Select option for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const valueContainer = document.createElement("div");
      ;
      const valueLabel = dv.el("span", p[this.field.name] || "");
      valueContainer.appendChild(valueLabel);
      const dropDownButton = document.createElement("button");
      (0, import_obsidian18.setIcon)(dropDownButton, "down-chevron-glyph");
      dropDownButton.addClass("metadata-menu-dv-field-button");
      valueContainer.appendChild(dropDownButton);
      const selectContainer = document.createElement("div");
      const select = document.createElement("select");
      select.setAttr("class", "metadata-menu-dv-select");
      selectContainer.appendChild(select);
      const dismissBtn = document.createElement("button");
      (0, import_obsidian18.setIcon)(dismissBtn, "cross");
      dismissBtn.addClass("metadata-menu-dv-field-button");
      selectContainer.appendChild(dismissBtn);
      const nullOption = new Option("--select--", void 0);
      select.add(nullOption);
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.field.valuesListNotePath, plugin.app);
      if (listNoteValues.length) {
        listNoteValues.forEach((o) => {
          const option = new Option(o, o);
          if (p[this.field.name] === o || p[this.field.name] && Object.keys(p[this.field.name]).includes("path") && `[[${p[this.field.name].path.replace(".md", "")}]]` === o) {
            option.selected = true;
          }
          select.add(option);
          select.onchange = () => {
            let newValue = "";
            if (select.value !== void 0) {
              newValue = select.value;
            }
            fieldContainer.removeChild(selectContainer);
            fieldContainer.appendChild(valueContainer);
            SelectField.replaceValues(plugin.app, p["file"]["path"], this.field.name, newValue);
          };
        });
      } else {
        Object.keys(this.field.options).forEach((o) => {
          const option = new Option(this.field.options[o], o);
          if (p[this.field.name] === this.field.options[o] || p[this.field.name] && Object.keys(p[this.field.name]).includes("path") && `[[${p[this.field.name].path.replace(".md", "")}]]` === this.field.options[o]) {
            option.selected = true;
          }
          select.add(option);
          select.onchange = () => {
            let newValue = "";
            if (select.value !== void 0) {
              newValue = this.field.options[select.value];
            }
            fieldContainer.removeChild(selectContainer);
            fieldContainer.appendChild(valueContainer);
            SelectField.replaceValues(plugin.app, p["file"]["path"], this.field.name, newValue);
          };
        });
      }
      dropDownButton.onclick = () => {
        fieldContainer.removeChild(valueContainer);
        fieldContainer.appendChild(selectContainer);
      };
      dismissBtn.onclick = () => {
        fieldContainer.removeChild(selectContainer);
        fieldContainer.appendChild(valueContainer);
      };
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        fieldContainer.appendChild(valueContainer);
      } else {
        fieldContainer.appendChild(selectContainer);
      }
    });
  }
};

// src/fields/fieldManagers/CycleField.ts
var import_obsidian19 = require("obsidian");
var CycleField = class extends AbstractListBasedField {
  constructor(field) {
    super(field, "Cycle" /* Cycle */);
    this.valuesPromptComponents = [];
  }
  addFieldOption(name, value, app2, file, location) {
    const options = this.field.options;
    const keys = Object.keys(options);
    const keyForValue = keys.find((key) => options[key] === value);
    let nextOption;
    if (keyForValue) {
      const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
      nextOption = options[nextKey];
    } else {
      nextOption = options[Object.keys(options)[0]];
    }
    ;
    if (CycleField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`${name} : ${value} \u25B7 ${nextOption}`);
        item.setIcon(FieldIcon["Cycle" /* Cycle */]);
        item.onClick(() => replaceValues(app2, file, name, nextOption));
        item.setSection("metadata-menu.fields");
      });
    } else if (CycleField.isSuggest(location)) {
      location.options.push({
        id: `${name}_${value}_${nextOption}`,
        actionLabel: `<span><b>${name}</b> : ${value} \u25B7 ${nextOption}</span>`,
        action: () => replaceValues(app2, file, name, nextOption),
        icon: FieldIcon["Cycle" /* Cycle */]
      });
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, value, lineNumber, inFrontmatter, after) {
    const fieldModal = new ValueSuggestModal(app2, file, value || "", this.field, lineNumber, inFrontmatter, after);
    fieldModal.titleEl.setText(`Select option for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const options = this.field.options;
      const keys = Object.keys(options);
      const keyForValue = keys.find((key) => options[key] === p[this.field.name]);
      let nextOption;
      if (keyForValue) {
        const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
        nextOption = options[nextKey];
      } else {
        nextOption = options[Object.keys(options)[0]];
      }
      ;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const button = document.createElement("button");
      (0, import_obsidian19.setIcon)(button, FieldIcon["Cycle" /* Cycle */]);
      button.setAttr("class", "metadata-menu-dv-field-button");
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        button.hide();
        spacer.show();
        fieldContainer.onmouseover = () => {
          button.show();
          spacer.hide();
        };
        fieldContainer.onmouseout = () => {
          button.hide();
          spacer.show();
        };
      }
      button.onclick = (e) => {
        var _a2;
        CycleField.replaceValues(plugin.app, p["file"]["path"], this.field.name, nextOption);
        if (!((_a2 = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a2.alwaysOn)) {
          button.hide();
          spacer.show();
        }
      };
      fieldContainer.appendChild(button);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(spacer);
    });
  }
};

// src/fields/fieldManagers/MultiField.ts
var import_obsidian21 = require("obsidian");

// src/optionModals/fields/MultiSelectModal.ts
var import_obsidian20 = require("obsidian");
var MultiSuggestModal = class extends import_obsidian20.SuggestModal {
  constructor(app2, file, field, initialOptions, lineNumber = -1, inFrontMatter = false, after = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    if (initialOptions) {
      if (initialOptions.toString().startsWith("[[")) {
        this.selectedOptions = initialOptions.split(",").map((item) => item.trim());
      } else {
        this.selectedOptions = initialOptions.toString().replace(/^\[(.*)\]$/, "$1").split(",").map((item) => item.trim());
      }
      ;
    } else {
      this.selectedOptions = [];
    }
    ;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.after = after;
  }
  onOpen() {
    const buttonContainer = this.containerEl.createDiv({ cls: "metadata-menu-value-suggester-actions" });
    buttonContainer.createDiv({ cls: "metadata-menu-value-suggester-actions-spacer" });
    const confirmButton = new import_obsidian20.ButtonComponent(buttonContainer);
    confirmButton.setIcon("checkmark");
    confirmButton.onClick(() => __async(this, null, function* () {
      yield this.replaceValues();
      this.close();
    }));
    confirmButton.buttonEl.addClass("metadata-menu-value-suggester-button");
    const cancelButton = new import_obsidian20.ButtonComponent(buttonContainer);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => {
      this.close();
    });
    cancelButton.buttonEl.addClass("metadata-menu-value-suggester-button");
    const clearButton = new import_obsidian20.ButtonComponent(buttonContainer);
    clearButton.setIcon("trash");
    clearButton.onClick(() => __async(this, null, function* () {
      yield this.clearValues();
      this.close();
    }));
    clearButton.buttonEl.addClass("metadata-menu-value-suggester-button");
    clearButton.buttonEl.addClass("danger");
    this.modalEl.insertBefore(buttonContainer, this.modalEl.childNodes[0]);
    super.onOpen();
  }
  replaceValues() {
    return __async(this, null, function* () {
      const options = this.selectedOptions;
      if (this.lineNumber == -1) {
        yield replaceValues(this.app, this.file, this.field.name, options.join(","));
      } else {
        const renderedValues = !this.inFrontmatter ? options.join(",") : options.length > 1 ? `[${options.join(", ")}]` : options[0];
        yield insertValues(this.app, this.file, this.field.name, renderedValues, this.lineNumber, this.inFrontmatter, this.after);
      }
      ;
      this.close();
    });
  }
  clearValues() {
    return __async(this, null, function* () {
      if (this.lineNumber == -1) {
        yield replaceValues(this.app, this.file, this.field.name, "");
      } else {
        yield insertValues(this.app, this.file, this.field.name, "", this.lineNumber, this.inFrontmatter, this.after);
      }
      ;
    });
  }
  renderSelected() {
    const chooser = this.chooser;
    const suggestions = chooser.suggestions;
    const values = chooser.values;
    suggestions.forEach((s, i) => {
      if (this.selectedOptions.includes(values[i])) {
        s.addClass("metadata-menu-value-selected");
        if (s.querySelectorAll(".metadata-menu-command-suggest-icon").length == 0) {
          const iconContainer = s.createDiv({ cls: "metadata-menu-command-suggest-icon" });
          (0, import_obsidian20.setIcon)(iconContainer, "check-circle");
        }
      } else {
        s.removeClass("metadata-menu-value-selected");
        s.querySelectorAll(".metadata-menu-command-suggest-icon").forEach((icon) => icon.remove());
      }
    });
  }
  getSuggestions(query) {
    return __async(this, null, function* () {
      const listNoteValues = yield FieldSetting.getValuesListFromNote(this.field.valuesListNotePath, this.app);
      if (listNoteValues.length === 0) {
        return Object.values(this.field.options).filter((o) => o.toLowerCase().includes(query.toLowerCase()));
      } else {
        return listNoteValues.filter((o) => o.toLowerCase().includes(query.toLowerCase()));
      }
    });
  }
  renderSuggestion(value, el) {
    el.setText(value);
    el.addClass("metadata-menu-value-suggester-value-container");
    const spacer = this.containerEl.createDiv({ cls: "metadata-menu-value-suggester-value-container-spacer" });
    el.appendChild(spacer);
    if (this.selectedOptions.includes(value)) {
      el.addClass("metadata-menu-value-selected");
      const iconContainer = el.createDiv({ cls: "metadata-menu-command-suggest-icon" });
      (0, import_obsidian20.setIcon)(iconContainer, "check-circle");
    }
    this.inputEl.focus();
  }
  selectSuggestion(value, evt) {
    if (this.selectedOptions.includes(value)) {
      this.selectedOptions.remove(value);
    } else {
      this.selectedOptions.push(value);
    }
    this.renderSelected();
  }
  onChooseSuggestion(item, evt) {
  }
};

// src/fields/fieldManagers/MultiField.ts
var MultiField = class extends AbstractListBasedField {
  constructor(field) {
    super(field, "Multi" /* Multi */);
    this.valuesPromptComponents = [];
  }
  addFieldOption(name, value, app2, file, location) {
    const modal = new MultiSuggestModal(app2, file, this.field, value);
    modal.titleEl.setText("Select values");
    if (MultiField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon(FieldIcon["Multi" /* Multi */]);
        item.onClick(() => modal.open());
        item.setSection("metadata-menu.fields");
      });
    } else if (MultiField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action: () => modal.open(),
        icon: FieldIcon["Multi" /* Multi */]
      });
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, value, lineNumber, inFrontmatter, after) {
    const fieldModal = new MultiSuggestModal(app2, file, this.field, value || "", lineNumber, inFrontmatter, after);
    fieldModal.titleEl.setText(`Select options for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a, _b;
      let valueHovered = false;
      let currentValues = [];
      if (p[this.field.name]) {
        if (Object.keys(p[this.field.name]).includes("path")) {
          currentValues = [`[[${p[this.field.name].path.replace(".md", "")}]]`];
        } else if (Array.isArray(p[this.field.name])) {
          currentValues.push(...p[this.field.name].last().split(",").map((v) => v.trim()));
        } else {
          currentValues = p[this.field.name].split(",").map((v) => v.trim());
        }
      }
      const selectContainer = document.createElement("div");
      const select = document.createElement("select");
      select.setAttr("class", "metadata-menu-dv-select");
      selectContainer.appendChild(select);
      const nullOption = new Option("--select--", void 0);
      select.add(nullOption);
      Object.keys(this.field.options).filter((o) => !currentValues.contains(this.field.options[o])).forEach((o) => {
        const option = new Option(this.field.options[o], o);
        if (p[this.field.name] === this.field.options[o]) {
          option.selected = true;
        }
        select.add(option);
      });
      select.onchange = () => {
        const newValues = [...currentValues, this.field.options[select.value]].join(", ");
        MultiField.replaceValues(plugin.app, p["file"]["path"], this.field.name, newValues);
        singleSpacer.hide();
        doubleSpacer.show();
        addBtn.hide();
        fieldContainer.appendChild(valuesContainer);
        fieldContainer.appendChild(singleSpacer);
        fieldContainer.appendChild(doubleSpacer);
        fieldContainer.removeChild(selectContainer);
      };
      select.onkeydown = (e) => {
        if (e.key === "Escape") {
          fieldContainer.appendChild(valuesContainer);
          fieldContainer.appendChild(singleSpacer);
          fieldContainer.appendChild(doubleSpacer);
          fieldContainer.removeChild(selectContainer);
        }
      };
      const closeSelect = document.createElement("button");
      (0, import_obsidian21.setIcon)(closeSelect, "cross");
      closeSelect.addClass("metadata-menu-dv-field-button");
      closeSelect.addClass("multi");
      closeSelect.onclick = () => {
        fieldContainer.appendChild(valuesContainer);
        fieldContainer.appendChild(singleSpacer);
        fieldContainer.appendChild(doubleSpacer);
        fieldContainer.removeChild(selectContainer);
      };
      selectContainer.appendChild(closeSelect);
      const valuesContainer = document.createElement("div");
      valuesContainer.addClass("metadata-menu-dv-multi-values-container");
      currentValues.forEach((v) => {
        const valueContainer = document.createElement("div");
        valueContainer.addClass("metadata-menu-dv-multi-values-container");
        const valueRemoveBtn = document.createElement("button");
        (0, import_obsidian21.setIcon)(valueRemoveBtn, "cross");
        valueRemoveBtn.addClass("metadata-menu-dv-field-button");
        valueRemoveBtn.addClass("multi");
        valueRemoveBtn.hide();
        valueRemoveBtn.onclick = () => {
          const remainingValues = currentValues.filter((cV) => cV !== v).join(", ");
          MultiField.replaceValues(plugin.app, p["file"]["path"], this.field.name, remainingValues);
        };
        valueContainer.appendChild(valueRemoveBtn);
        const valueLabel = document.createElement("div");
        valueLabel.setText(v);
        valueLabel.addClass("metadata-menu-dv-multi-value-label");
        valueContainer.appendChild(valueLabel);
        valueContainer.onmouseover = () => {
          valueHovered = true;
          doubleSpacer.hide();
          singleSpacer.hide();
          valueRemoveBtn.show();
          valueLabel.addClass("hovered");
        };
        valueContainer.onmouseout = () => {
          valueHovered = false;
          valueRemoveBtn.hide();
          singleSpacer.show();
          doubleSpacer.hide();
          valueLabel.removeClass("hovered");
        };
        valuesContainer.appendChild(valueContainer);
      });
      const addBtn = document.createElement("button");
      (0, import_obsidian21.setIcon)(addBtn, "bullet-list");
      addBtn.setAttr("class", "metadata-menu-dv-field-button");
      valuesContainer.appendChild(addBtn);
      addBtn.onclick = () => {
        fieldContainer.removeChild(valuesContainer);
        fieldContainer.removeChild(singleSpacer);
        fieldContainer.removeChild(doubleSpacer);
        fieldContainer.appendChild(selectContainer);
      };
      const singleSpacer = document.createElement("div");
      singleSpacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const doubleSpacer = document.createElement("div");
      doubleSpacer.setAttr("class", "metadata-menu-dv-field-double-spacer");
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        addBtn.hide();
        fieldContainer.onmouseover = () => {
          addBtn.show();
          doubleSpacer.hide();
          if (!valueHovered)
            singleSpacer.show();
        };
        fieldContainer.onmouseout = () => {
          addBtn.hide();
          singleSpacer.hide();
          doubleSpacer.show();
        };
      }
      if (!((_b = attrs == null ? void 0 : attrs.options) == null ? void 0 : _b.alwaysOn)) {
        singleSpacer.hide();
        doubleSpacer.show();
        addBtn.hide();
      } else {
        singleSpacer.show();
        doubleSpacer.hide();
        addBtn.show();
      }
      fieldContainer.appendChild(valuesContainer);
      fieldContainer.appendChild(singleSpacer);
      fieldContainer.appendChild(doubleSpacer);
    });
  }
};

// src/fields/fieldManagers/FileField.ts
var import_obsidian23 = require("obsidian");

// src/optionModals/fields/SingleFileModal.ts
var import_obsidian22 = require("obsidian");
var FileFuzzySuggester = class extends import_obsidian22.FuzzySuggestModal {
  constructor(app2, file, field, initialValueObject, lineNumber = -1, inFrontMatter = false, after = false) {
    var _a, _b;
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.after = after;
    const dvApi = (_a = this.app.plugins.plugins["dataview"]) == null ? void 0 : _a.api;
    if (dvApi) {
      if (dvApi.value.isLink(initialValueObject)) {
        const file2 = this.app.vault.getAbstractFileByPath(initialValueObject.path);
        if (file2 instanceof import_obsidian22.TFile)
          this.selectedFile = file2;
      }
    }
    console.log((_b = this.selectedFile) == null ? void 0 : _b.path);
  }
  getItems() {
    try {
      const fileManager = new FieldManager[this.field.type](this.field);
      return fileManager.getFiles();
    } catch (error) {
      this.close();
      throw error;
    }
  }
  getItemText(item) {
    return item.basename;
  }
  renderSuggestion(value, el) {
    var _a;
    el.setText(value.item.basename);
    el.addClass("metadata-menu-value-suggester-value-container");
    const spacer = this.containerEl.createDiv({ cls: "metadata-menu-value-suggester-value-container-spacer" });
    el.appendChild(spacer);
    if (((_a = this.selectedFile) == null ? void 0 : _a.path) === value.item.path) {
      el.addClass("metadata-menu-value-selected");
      const iconContainer = el.createDiv({ cls: "metadata-menu-command-suggest-icon" });
      (0, import_obsidian22.setIcon)(iconContainer, "check-circle");
    }
    this.inputEl.focus();
  }
  onChooseItem(item) {
    return __async(this, null, function* () {
      if (this.lineNumber == -1) {
        yield replaceValues(this.app, this.file, this.field.name, FileField.buildMarkDownLink(this.app, this.file, item.basename));
      } else {
        yield insertValues(this.app, this.file, this.field.name, FileField.buildMarkDownLink(this.app, this.file, item.basename), this.lineNumber, this.inFrontmatter, this.after);
      }
      ;
    });
  }
};

// src/fields/fieldManagers/FileField.ts
var FileField = class extends FieldManager2 {
  constructor(field) {
    super(field, "File" /* File */);
    this.getFiles = () => {
      const getResults = (api) => {
        try {
          return new Function("dv", `return ${this.field.options.dvQueryString}`)(api);
        } catch (error) {
          new import_obsidian23.Notice(`Wrong query for field <${this.field.name}>
check your settings`, 3e3);
        }
      };
      const dataview = app.plugins.plugins["dataview"];
      if (this.field.options.dvQueryString && (dataview == null ? void 0 : dataview.settings.enableDataviewJs) && (dataview == null ? void 0 : dataview.settings.enableInlineDataviewJs)) {
        try {
          const filesPath = getResults(dataview.api).values.map((v) => v.file.path);
          return app.vault.getMarkdownFiles().filter((f) => filesPath.includes(f.path));
        } catch (error) {
          throw error;
        }
      } else {
        return app.vault.getMarkdownFiles();
      }
    };
  }
  addFieldOption(name, value, app2, file, location) {
    const modal = new FileFuzzySuggester(app2, file, this.field, value);
    modal.titleEl.setText("Select value");
    if (FileField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon(FieldIcon["File" /* File */]);
        item.onClick(() => modal.open());
        item.setSection("metadata-menu.fields");
      });
    } else if (FileField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action: () => modal.open(),
        icon: FieldIcon["File" /* File */]
      });
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, value, lineNumber, inFrontmatter, after) {
    const fieldModal = new FileFuzzySuggester(app2, file, this.field, value, lineNumber, inFrontmatter, after);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const searchBtn = document.createElement("button");
      (0, import_obsidian23.setIcon)(searchBtn, FieldIcon["File" /* File */]);
      searchBtn.addClass("metadata-menu-dv-field-button");
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const file = app.vault.getAbstractFileByPath(p["file"]["path"]);
      let fieldModal;
      if (file instanceof import_obsidian23.TFile && file.extension == "md") {
        fieldModal = new FileFuzzySuggester(app, file, this.field, p[this.field.name]);
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
      searchBtn.onclick = () => {
        fieldModal.open();
      };
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        searchBtn.hide();
        spacer.show();
        fieldContainer.onmouseover = () => {
          searchBtn.show();
          spacer.hide();
        };
        fieldContainer.onmouseout = () => {
          searchBtn.hide();
          spacer.show();
        };
      }
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(searchBtn);
      fieldContainer.appendChild(spacer);
    });
  }
  createFileContainer(parentContainer) {
    const dvQueryStringContainer = parentContainer.createDiv();
    dvQueryStringContainer.createEl("span", { text: "Dataview Query (optional)", cls: "metadata-menu-field-option" });
    this.dvQueryString = new import_obsidian23.TextAreaComponent(dvQueryStringContainer);
    this.dvQueryString.inputEl.cols = 50;
    this.dvQueryString.inputEl.rows = 4;
    this.dvQueryString.setValue(this.field.options.dvQueryString || "");
    this.dvQueryString.onChange((value) => {
      this.field.options.dvQueryString = value;
      FieldSettingsModal.removeValidationError(this.dvQueryString);
    });
  }
  createSettingContainer(parentContainer, plugin, location) {
    this.fileValidatorField = parentContainer.createDiv({ cls: "metadata-menu-number-options" });
    this.createFileContainer(this.fileValidatorField);
    this.fileValidatorField.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  getOptionsStr() {
    return this.field.options.dvQueryString || "";
  }
  validateOptions() {
    return true;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      const basename = value.trim().replace(/^\[\[/g, "").replace(/\]\]$/g, "");
      return !!this.getFiles().map((f) => f.basename).find((item) => item === basename);
    });
  }
};

// src/fields/fieldManagers/DateField.ts
var import_obsidian26 = require("obsidian");

// src/optionModals/fields/DateModal.ts
var import_obsidian24 = require("obsidian");
var import_obsidian25 = require("obsidian");

// node_modules/flatpickr/dist/esm/types/options.js
var HOOKS = [
  "onChange",
  "onClose",
  "onDayCreate",
  "onDestroy",
  "onKeyDown",
  "onMonthChange",
  "onOpen",
  "onParseConfig",
  "onReady",
  "onValueUpdate",
  "onYearChange",
  "onPreCalendarPosition"
];
var defaults = {
  _disable: [],
  allowInput: false,
  allowInvalidPreload: false,
  altFormat: "F j, Y",
  altInput: false,
  altInputClass: "form-control input",
  animate: typeof window === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
  ariaDateFormat: "F j, Y",
  autoFillDefaultTime: true,
  clickOpens: true,
  closeOnSelect: true,
  conjunction: ", ",
  dateFormat: "Y-m-d",
  defaultHour: 12,
  defaultMinute: 0,
  defaultSeconds: 0,
  disable: [],
  disableMobile: false,
  enableSeconds: false,
  enableTime: false,
  errorHandler: function(err) {
    return typeof console !== "undefined" && console.warn(err);
  },
  getWeek: function(givenDate) {
    var date = new Date(givenDate.getTime());
    date.setHours(0, 0, 0, 0);
    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
    var week1 = new Date(date.getFullYear(), 0, 4);
    return 1 + Math.round(((date.getTime() - week1.getTime()) / 864e5 - 3 + (week1.getDay() + 6) % 7) / 7);
  },
  hourIncrement: 1,
  ignoredFocusElements: [],
  inline: false,
  locale: "default",
  minuteIncrement: 5,
  mode: "single",
  monthSelectorType: "dropdown",
  nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
  noCalendar: false,
  now: new Date(),
  onChange: [],
  onClose: [],
  onDayCreate: [],
  onDestroy: [],
  onKeyDown: [],
  onMonthChange: [],
  onOpen: [],
  onParseConfig: [],
  onReady: [],
  onValueUpdate: [],
  onYearChange: [],
  onPreCalendarPosition: [],
  plugins: [],
  position: "auto",
  positionElement: void 0,
  prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
  shorthandCurrentMonth: false,
  showMonths: 1,
  static: false,
  time_24hr: false,
  weekNumbers: false,
  wrap: false
};

// node_modules/flatpickr/dist/esm/l10n/default.js
var english = {
  weekdays: {
    shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    longhand: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ]
  },
  months: {
    shorthand: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    longhand: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ]
  },
  daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
  firstDayOfWeek: 0,
  ordinal: function(nth) {
    var s = nth % 100;
    if (s > 3 && s < 21)
      return "th";
    switch (s % 10) {
      case 1:
        return "st";
      case 2:
        return "nd";
      case 3:
        return "rd";
      default:
        return "th";
    }
  },
  rangeSeparator: " to ",
  weekAbbreviation: "Wk",
  scrollTitle: "Scroll to increment",
  toggleTitle: "Click to toggle",
  amPM: ["AM", "PM"],
  yearAriaLabel: "Year",
  monthAriaLabel: "Month",
  hourAriaLabel: "Hour",
  minuteAriaLabel: "Minute",
  time_24hr: false
};
var default_default = english;

// node_modules/flatpickr/dist/esm/utils/index.js
var pad = function(number, length) {
  if (length === void 0) {
    length = 2;
  }
  return ("000" + number).slice(length * -1);
};
var int = function(bool) {
  return bool === true ? 1 : 0;
};
function debounce2(fn2, wait) {
  var t;
  return function() {
    var _this = this;
    var args = arguments;
    clearTimeout(t);
    t = setTimeout(function() {
      return fn2.apply(_this, args);
    }, wait);
  };
}
var arrayify = function(obj) {
  return obj instanceof Array ? obj : [obj];
};

// node_modules/flatpickr/dist/esm/utils/dom.js
function toggleClass(elem, className, bool) {
  if (bool === true)
    return elem.classList.add(className);
  elem.classList.remove(className);
}
function createElement(tag, className, content) {
  var e = window.document.createElement(tag);
  className = className || "";
  content = content || "";
  e.className = className;
  if (content !== void 0)
    e.textContent = content;
  return e;
}
function clearNode(node) {
  while (node.firstChild)
    node.removeChild(node.firstChild);
}
function findParent(node, condition) {
  if (condition(node))
    return node;
  else if (node.parentNode)
    return findParent(node.parentNode, condition);
  return void 0;
}
function createNumberInput(inputClassName, opts) {
  var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
  if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
    numInput.type = "number";
  } else {
    numInput.type = "text";
    numInput.pattern = "\\d*";
  }
  if (opts !== void 0)
    for (var key in opts)
      numInput.setAttribute(key, opts[key]);
  wrapper.appendChild(numInput);
  wrapper.appendChild(arrowUp);
  wrapper.appendChild(arrowDown);
  return wrapper;
}
function getEventTarget(event) {
  try {
    if (typeof event.composedPath === "function") {
      var path = event.composedPath();
      return path[0];
    }
    return event.target;
  } catch (error) {
    return event.target;
  }
}

// node_modules/flatpickr/dist/esm/utils/formatting.js
var doNothing = function() {
  return void 0;
};
var monthToStr = function(monthNumber, shorthand, locale) {
  return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
};
var revFormat = {
  D: doNothing,
  F: function(dateObj, monthName, locale) {
    dateObj.setMonth(locale.months.longhand.indexOf(monthName));
  },
  G: function(dateObj, hour) {
    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  },
  H: function(dateObj, hour) {
    dateObj.setHours(parseFloat(hour));
  },
  J: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  K: function(dateObj, amPM, locale) {
    dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
  },
  M: function(dateObj, shortMonth, locale) {
    dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
  },
  S: function(dateObj, seconds) {
    dateObj.setSeconds(parseFloat(seconds));
  },
  U: function(_, unixSeconds) {
    return new Date(parseFloat(unixSeconds) * 1e3);
  },
  W: function(dateObj, weekNum, locale) {
    var weekNumber = parseInt(weekNum);
    var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
    date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
    return date;
  },
  Y: function(dateObj, year) {
    dateObj.setFullYear(parseFloat(year));
  },
  Z: function(_, ISODate) {
    return new Date(ISODate);
  },
  d: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  h: function(dateObj, hour) {
    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  },
  i: function(dateObj, minutes) {
    dateObj.setMinutes(parseFloat(minutes));
  },
  j: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  l: doNothing,
  m: function(dateObj, month) {
    dateObj.setMonth(parseFloat(month) - 1);
  },
  n: function(dateObj, month) {
    dateObj.setMonth(parseFloat(month) - 1);
  },
  s: function(dateObj, seconds) {
    dateObj.setSeconds(parseFloat(seconds));
  },
  u: function(_, unixMillSeconds) {
    return new Date(parseFloat(unixMillSeconds));
  },
  w: doNothing,
  y: function(dateObj, year) {
    dateObj.setFullYear(2e3 + parseFloat(year));
  }
};
var tokenRegex = {
  D: "",
  F: "",
  G: "(\\d\\d|\\d)",
  H: "(\\d\\d|\\d)",
  J: "(\\d\\d|\\d)\\w+",
  K: "",
  M: "",
  S: "(\\d\\d|\\d)",
  U: "(.+)",
  W: "(\\d\\d|\\d)",
  Y: "(\\d{4})",
  Z: "(.+)",
  d: "(\\d\\d|\\d)",
  h: "(\\d\\d|\\d)",
  i: "(\\d\\d|\\d)",
  j: "(\\d\\d|\\d)",
  l: "",
  m: "(\\d\\d|\\d)",
  n: "(\\d\\d|\\d)",
  s: "(\\d\\d|\\d)",
  u: "(.+)",
  w: "(\\d\\d|\\d)",
  y: "(\\d{2})"
};
var formats = {
  Z: function(date) {
    return date.toISOString();
  },
  D: function(date, locale, options) {
    return locale.weekdays.shorthand[formats.w(date, locale, options)];
  },
  F: function(date, locale, options) {
    return monthToStr(formats.n(date, locale, options) - 1, false, locale);
  },
  G: function(date, locale, options) {
    return pad(formats.h(date, locale, options));
  },
  H: function(date) {
    return pad(date.getHours());
  },
  J: function(date, locale) {
    return locale.ordinal !== void 0 ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
  },
  K: function(date, locale) {
    return locale.amPM[int(date.getHours() > 11)];
  },
  M: function(date, locale) {
    return monthToStr(date.getMonth(), true, locale);
  },
  S: function(date) {
    return pad(date.getSeconds());
  },
  U: function(date) {
    return date.getTime() / 1e3;
  },
  W: function(date, _, options) {
    return options.getWeek(date);
  },
  Y: function(date) {
    return pad(date.getFullYear(), 4);
  },
  d: function(date) {
    return pad(date.getDate());
  },
  h: function(date) {
    return date.getHours() % 12 ? date.getHours() % 12 : 12;
  },
  i: function(date) {
    return pad(date.getMinutes());
  },
  j: function(date) {
    return date.getDate();
  },
  l: function(date, locale) {
    return locale.weekdays.longhand[date.getDay()];
  },
  m: function(date) {
    return pad(date.getMonth() + 1);
  },
  n: function(date) {
    return date.getMonth() + 1;
  },
  s: function(date) {
    return date.getSeconds();
  },
  u: function(date) {
    return date.getTime();
  },
  w: function(date) {
    return date.getDay();
  },
  y: function(date) {
    return String(date.getFullYear()).substring(2);
  }
};

// node_modules/flatpickr/dist/esm/utils/dates.js
var createDateFormatter = function(_a) {
  var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
  return function(dateObj, frmt, overrideLocale) {
    var locale = overrideLocale || l10n;
    if (config.formatDate !== void 0 && !isMobile) {
      return config.formatDate(dateObj, frmt, locale);
    }
    return frmt.split("").map(function(c, i, arr) {
      return formats[c] && arr[i - 1] !== "\\" ? formats[c](dateObj, locale, config) : c !== "\\" ? c : "";
    }).join("");
  };
};
var createDateParser = function(_a) {
  var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
  return function(date, givenFormat, timeless, customLocale) {
    if (date !== 0 && !date)
      return void 0;
    var locale = customLocale || l10n;
    var parsedDate;
    var dateOrig = date;
    if (date instanceof Date)
      parsedDate = new Date(date.getTime());
    else if (typeof date !== "string" && date.toFixed !== void 0)
      parsedDate = new Date(date);
    else if (typeof date === "string") {
      var format2 = givenFormat || (config || defaults).dateFormat;
      var datestr = String(date).trim();
      if (datestr === "today") {
        parsedDate = new Date();
        timeless = true;
      } else if (config && config.parseDate) {
        parsedDate = config.parseDate(date, format2);
      } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) {
        parsedDate = new Date(date);
      } else {
        var matched = void 0, ops = [];
        for (var i = 0, matchIndex = 0, regexStr = ""; i < format2.length; i++) {
          var token = format2[i];
          var isBackSlash = token === "\\";
          var escaped = format2[i - 1] === "\\" || isBackSlash;
          if (tokenRegex[token] && !escaped) {
            regexStr += tokenRegex[token];
            var match = new RegExp(regexStr).exec(date);
            if (match && (matched = true)) {
              ops[token !== "Y" ? "push" : "unshift"]({
                fn: revFormat[token],
                val: match[++matchIndex]
              });
            }
          } else if (!isBackSlash)
            regexStr += ".";
        }
        parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));
        ops.forEach(function(_a2) {
          var fn2 = _a2.fn, val = _a2.val;
          return parsedDate = fn2(parsedDate, val, locale) || parsedDate;
        });
        parsedDate = matched ? parsedDate : void 0;
      }
    }
    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
      config.errorHandler(new Error("Invalid date provided: " + dateOrig));
      return void 0;
    }
    if (timeless === true)
      parsedDate.setHours(0, 0, 0, 0);
    return parsedDate;
  };
};
function compareDates(date1, date2, timeless) {
  if (timeless === void 0) {
    timeless = true;
  }
  if (timeless !== false) {
    return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
  }
  return date1.getTime() - date2.getTime();
}
var isBetween = function(ts, ts1, ts2) {
  return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
};
var calculateSecondsSinceMidnight = function(hours, minutes, seconds) {
  return hours * 3600 + minutes * 60 + seconds;
};
var parseSeconds = function(secondsSinceMidnight) {
  var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
  return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
};
var duration = {
  DAY: 864e5
};
function getDefaultHours(config) {
  var hours = config.defaultHour;
  var minutes = config.defaultMinute;
  var seconds = config.defaultSeconds;
  if (config.minDate !== void 0) {
    var minHour = config.minDate.getHours();
    var minMinutes = config.minDate.getMinutes();
    var minSeconds = config.minDate.getSeconds();
    if (hours < minHour) {
      hours = minHour;
    }
    if (hours === minHour && minutes < minMinutes) {
      minutes = minMinutes;
    }
    if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
      seconds = config.minDate.getSeconds();
  }
  if (config.maxDate !== void 0) {
    var maxHr = config.maxDate.getHours();
    var maxMinutes = config.maxDate.getMinutes();
    hours = Math.min(hours, maxHr);
    if (hours === maxHr)
      minutes = Math.min(maxMinutes, minutes);
    if (hours === maxHr && minutes === maxMinutes)
      seconds = config.maxDate.getSeconds();
  }
  return { hours, minutes, seconds };
}

// node_modules/flatpickr/dist/esm/utils/polyfills.js
if (typeof Object.assign !== "function") {
  Object.assign = function(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (!target) {
      throw TypeError("Cannot convert undefined or null to object");
    }
    var _loop_1 = function(source2) {
      if (source2) {
        Object.keys(source2).forEach(function(key) {
          return target[key] = source2[key];
        });
      }
    };
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
      var source = args_1[_a];
      _loop_1(source);
    }
    return target;
  };
}

// node_modules/flatpickr/dist/esm/index.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __spreadArrays = function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};
var DEBOUNCED_CHANGE_MS = 300;
function FlatpickrInstance(element, instanceConfig) {
  var self = {
    config: __assign(__assign({}, defaults), flatpickr.defaultConfig),
    l10n: default_default
  };
  self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  self._handlers = [];
  self.pluginElements = [];
  self.loadedPlugins = [];
  self._bind = bind;
  self._setHoursFromDate = setHoursFromDate;
  self._positionCalendar = positionCalendar;
  self.changeMonth = changeMonth;
  self.changeYear = changeYear;
  self.clear = clear;
  self.close = close;
  self.onMouseOver = onMouseOver;
  self._createElement = createElement;
  self.createDay = createDay;
  self.destroy = destroy;
  self.isEnabled = isEnabled;
  self.jumpToDate = jumpToDate;
  self.updateValue = updateValue;
  self.open = open;
  self.redraw = redraw;
  self.set = set;
  self.setDate = setDate;
  self.toggle = toggle;
  function setupHelperFunctions() {
    self.utils = {
      getDaysInMonth: function(month, yr) {
        if (month === void 0) {
          month = self.currentMonth;
        }
        if (yr === void 0) {
          yr = self.currentYear;
        }
        if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0))
          return 29;
        return self.l10n.daysInMonth[month];
      }
    };
  }
  function init() {
    self.element = self.input = element;
    self.isOpen = false;
    parseConfig();
    setupLocale();
    setupInputs();
    setupDates();
    setupHelperFunctions();
    if (!self.isMobile)
      build();
    bindEvents();
    if (self.selectedDates.length || self.config.noCalendar) {
      if (self.config.enableTime) {
        setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : void 0);
      }
      updateValue(false);
    }
    setCalendarWidth();
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    if (!self.isMobile && isSafari) {
      positionCalendar();
    }
    triggerEvent("onReady");
  }
  function getClosestActiveElement() {
    var _a;
    return ((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode()).activeElement || document.activeElement;
  }
  function bindToInstance(fn2) {
    return fn2.bind(self);
  }
  function setCalendarWidth() {
    var config = self.config;
    if (config.weekNumbers === false && config.showMonths === 1) {
      return;
    } else if (config.noCalendar !== true) {
      window.requestAnimationFrame(function() {
        if (self.calendarContainer !== void 0) {
          self.calendarContainer.style.visibility = "hidden";
          self.calendarContainer.style.display = "block";
        }
        if (self.daysContainer !== void 0) {
          var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
          self.daysContainer.style.width = daysWidth + "px";
          self.calendarContainer.style.width = daysWidth + (self.weekWrapper !== void 0 ? self.weekWrapper.offsetWidth : 0) + "px";
          self.calendarContainer.style.removeProperty("visibility");
          self.calendarContainer.style.removeProperty("display");
        }
      });
    }
  }
  function updateTime(e) {
    if (self.selectedDates.length === 0) {
      var defaultDate = self.config.minDate === void 0 || compareDates(new Date(), self.config.minDate) >= 0 ? new Date() : new Date(self.config.minDate.getTime());
      var defaults2 = getDefaultHours(self.config);
      defaultDate.setHours(defaults2.hours, defaults2.minutes, defaults2.seconds, defaultDate.getMilliseconds());
      self.selectedDates = [defaultDate];
      self.latestSelectedDateObj = defaultDate;
    }
    if (e !== void 0 && e.type !== "blur") {
      timeWrapper(e);
    }
    var prevValue = self._input.value;
    setHoursFromInputs();
    updateValue();
    if (self._input.value !== prevValue) {
      self._debouncedChange();
    }
  }
  function ampm2military(hour, amPM) {
    return hour % 12 + 12 * int(amPM === self.l10n.amPM[1]);
  }
  function military2ampm(hour) {
    switch (hour % 24) {
      case 0:
      case 12:
        return 12;
      default:
        return hour % 12;
    }
  }
  function setHoursFromInputs() {
    if (self.hourElement === void 0 || self.minuteElement === void 0)
      return;
    var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== void 0 ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;
    if (self.amPM !== void 0) {
      hours = ampm2military(hours, self.amPM.textContent);
    }
    var limitMinHours = self.config.minTime !== void 0 || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;
    var limitMaxHours = self.config.maxTime !== void 0 || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;
    if (self.config.maxTime !== void 0 && self.config.minTime !== void 0 && self.config.minTime > self.config.maxTime) {
      var minBound = calculateSecondsSinceMidnight(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
      var maxBound = calculateSecondsSinceMidnight(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
      var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
      if (currentTime > maxBound && currentTime < minBound) {
        var result = parseSeconds(minBound);
        hours = result[0];
        minutes = result[1];
        seconds = result[2];
      }
    } else {
      if (limitMaxHours) {
        var maxTime = self.config.maxTime !== void 0 ? self.config.maxTime : self.config.maxDate;
        hours = Math.min(hours, maxTime.getHours());
        if (hours === maxTime.getHours())
          minutes = Math.min(minutes, maxTime.getMinutes());
        if (minutes === maxTime.getMinutes())
          seconds = Math.min(seconds, maxTime.getSeconds());
      }
      if (limitMinHours) {
        var minTime = self.config.minTime !== void 0 ? self.config.minTime : self.config.minDate;
        hours = Math.max(hours, minTime.getHours());
        if (hours === minTime.getHours() && minutes < minTime.getMinutes())
          minutes = minTime.getMinutes();
        if (minutes === minTime.getMinutes())
          seconds = Math.max(seconds, minTime.getSeconds());
      }
    }
    setHours(hours, minutes, seconds);
  }
  function setHoursFromDate(dateObj) {
    var date = dateObj || self.latestSelectedDateObj;
    if (date && date instanceof Date) {
      setHours(date.getHours(), date.getMinutes(), date.getSeconds());
    }
  }
  function setHours(hours, minutes, seconds) {
    if (self.latestSelectedDateObj !== void 0) {
      self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
    }
    if (!self.hourElement || !self.minuteElement || self.isMobile)
      return;
    self.hourElement.value = pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * int(hours % 12 === 0) : hours);
    self.minuteElement.value = pad(minutes);
    if (self.amPM !== void 0)
      self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
    if (self.secondElement !== void 0)
      self.secondElement.value = pad(seconds);
  }
  function onYearInput(event) {
    var eventTarget = getEventTarget(event);
    var year = parseInt(eventTarget.value) + (event.delta || 0);
    if (year / 1e3 > 1 || event.key === "Enter" && !/[^\d]/.test(year.toString())) {
      changeYear(year);
    }
  }
  function bind(element2, event, handler, options) {
    if (event instanceof Array)
      return event.forEach(function(ev) {
        return bind(element2, ev, handler, options);
      });
    if (element2 instanceof Array)
      return element2.forEach(function(el) {
        return bind(el, event, handler, options);
      });
    element2.addEventListener(event, handler, options);
    self._handlers.push({
      remove: function() {
        return element2.removeEventListener(event, handler, options);
      }
    });
  }
  function triggerChange() {
    triggerEvent("onChange");
  }
  function bindEvents() {
    if (self.config.wrap) {
      ["open", "close", "toggle", "clear"].forEach(function(evt) {
        Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function(el) {
          return bind(el, "click", self[evt]);
        });
      });
    }
    if (self.isMobile) {
      setupMobile();
      return;
    }
    var debouncedResize = debounce2(onResize, 50);
    self._debouncedChange = debounce2(triggerChange, DEBOUNCED_CHANGE_MS);
    if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
      bind(self.daysContainer, "mouseover", function(e) {
        if (self.config.mode === "range")
          onMouseOver(getEventTarget(e));
      });
    bind(self._input, "keydown", onKeyDown);
    if (self.calendarContainer !== void 0) {
      bind(self.calendarContainer, "keydown", onKeyDown);
    }
    if (!self.config.inline && !self.config.static)
      bind(window, "resize", debouncedResize);
    if (window.ontouchstart !== void 0)
      bind(window.document, "touchstart", documentClick);
    else
      bind(window.document, "mousedown", documentClick);
    bind(window.document, "focus", documentClick, { capture: true });
    if (self.config.clickOpens === true) {
      bind(self._input, "focus", self.open);
      bind(self._input, "click", self.open);
    }
    if (self.daysContainer !== void 0) {
      bind(self.monthNav, "click", onMonthNavClick);
      bind(self.monthNav, ["keyup", "increment"], onYearInput);
      bind(self.daysContainer, "click", selectDate);
    }
    if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0) {
      var selText = function(e) {
        return getEventTarget(e).select();
      };
      bind(self.timeContainer, ["increment"], updateTime);
      bind(self.timeContainer, "blur", updateTime, { capture: true });
      bind(self.timeContainer, "click", timeIncrement);
      bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
      if (self.secondElement !== void 0)
        bind(self.secondElement, "focus", function() {
          return self.secondElement && self.secondElement.select();
        });
      if (self.amPM !== void 0) {
        bind(self.amPM, "click", function(e) {
          updateTime(e);
        });
      }
    }
    if (self.config.allowInput) {
      bind(self._input, "blur", onBlur);
    }
  }
  function jumpToDate(jumpDate, triggerChange2) {
    var jumpTo = jumpDate !== void 0 ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);
    var oldYear = self.currentYear;
    var oldMonth = self.currentMonth;
    try {
      if (jumpTo !== void 0) {
        self.currentYear = jumpTo.getFullYear();
        self.currentMonth = jumpTo.getMonth();
      }
    } catch (e) {
      e.message = "Invalid date supplied: " + jumpTo;
      self.config.errorHandler(e);
    }
    if (triggerChange2 && self.currentYear !== oldYear) {
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
    if (triggerChange2 && (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
      triggerEvent("onMonthChange");
    }
    self.redraw();
  }
  function timeIncrement(e) {
    var eventTarget = getEventTarget(e);
    if (~eventTarget.className.indexOf("arrow"))
      incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
  }
  function incrementNumInput(e, delta, inputElem) {
    var target = e && getEventTarget(e);
    var input = inputElem || target && target.parentNode && target.parentNode.firstChild;
    var event = createEvent("increment");
    event.delta = delta;
    input && input.dispatchEvent(event);
  }
  function build() {
    var fragment = window.document.createDocumentFragment();
    self.calendarContainer = createElement("div", "flatpickr-calendar");
    self.calendarContainer.tabIndex = -1;
    if (!self.config.noCalendar) {
      fragment.appendChild(buildMonthNav());
      self.innerContainer = createElement("div", "flatpickr-innerContainer");
      if (self.config.weekNumbers) {
        var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
        self.innerContainer.appendChild(weekWrapper);
        self.weekNumbers = weekNumbers;
        self.weekWrapper = weekWrapper;
      }
      self.rContainer = createElement("div", "flatpickr-rContainer");
      self.rContainer.appendChild(buildWeekdays());
      if (!self.daysContainer) {
        self.daysContainer = createElement("div", "flatpickr-days");
        self.daysContainer.tabIndex = -1;
      }
      buildDays();
      self.rContainer.appendChild(self.daysContainer);
      self.innerContainer.appendChild(self.rContainer);
      fragment.appendChild(self.innerContainer);
    }
    if (self.config.enableTime) {
      fragment.appendChild(buildTime());
    }
    toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
    toggleClass(self.calendarContainer, "animate", self.config.animate === true);
    toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
    self.calendarContainer.appendChild(fragment);
    var customAppend = self.config.appendTo !== void 0 && self.config.appendTo.nodeType !== void 0;
    if (self.config.inline || self.config.static) {
      self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
      if (self.config.inline) {
        if (!customAppend && self.element.parentNode)
          self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
        else if (self.config.appendTo !== void 0)
          self.config.appendTo.appendChild(self.calendarContainer);
      }
      if (self.config.static) {
        var wrapper = createElement("div", "flatpickr-wrapper");
        if (self.element.parentNode)
          self.element.parentNode.insertBefore(wrapper, self.element);
        wrapper.appendChild(self.element);
        if (self.altInput)
          wrapper.appendChild(self.altInput);
        wrapper.appendChild(self.calendarContainer);
      }
    }
    if (!self.config.static && !self.config.inline)
      (self.config.appendTo !== void 0 ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);
  }
  function createDay(className, date, _dayNumber, i) {
    var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
    dayElement.dateObj = date;
    dayElement.$i = i;
    dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
    if (className.indexOf("hidden") === -1 && compareDates(date, self.now) === 0) {
      self.todayDateElem = dayElement;
      dayElement.classList.add("today");
      dayElement.setAttribute("aria-current", "date");
    }
    if (dateIsEnabled) {
      dayElement.tabIndex = -1;
      if (isDateSelected(date)) {
        dayElement.classList.add("selected");
        self.selectedDateElem = dayElement;
        if (self.config.mode === "range") {
          toggleClass(dayElement, "startRange", self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0);
          toggleClass(dayElement, "endRange", self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0);
          if (className === "nextMonthDay")
            dayElement.classList.add("inRange");
        }
      }
    } else {
      dayElement.classList.add("flatpickr-disabled");
    }
    if (self.config.mode === "range") {
      if (isDateInRange(date) && !isDateSelected(date))
        dayElement.classList.add("inRange");
    }
    if (self.weekNumbers && self.config.showMonths === 1 && className !== "prevMonthDay" && i % 7 === 6) {
      self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
    }
    triggerEvent("onDayCreate", dayElement);
    return dayElement;
  }
  function focusOnDayElem(targetNode) {
    targetNode.focus();
    if (self.config.mode === "range")
      onMouseOver(targetNode);
  }
  function getFirstAvailableDay(delta) {
    var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
    var endMonth = delta > 0 ? self.config.showMonths : -1;
    for (var m = startMonth; m != endMonth; m += delta) {
      var month = self.daysContainer.children[m];
      var startIndex = delta > 0 ? 0 : month.children.length - 1;
      var endIndex = delta > 0 ? month.children.length : -1;
      for (var i = startIndex; i != endIndex; i += delta) {
        var c = month.children[i];
        if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
          return c;
      }
    }
    return void 0;
  }
  function getNextAvailableDay(current, delta) {
    var givenMonth = current.className.indexOf("Month") === -1 ? current.dateObj.getMonth() : self.currentMonth;
    var endMonth = delta > 0 ? self.config.showMonths : -1;
    var loopDelta = delta > 0 ? 1 : -1;
    for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
      var month = self.daysContainer.children[m];
      var startIndex = givenMonth - self.currentMonth === m ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;
      var numMonthDays = month.children.length;
      for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
        var c = month.children[i];
        if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj) && Math.abs(current.$i - i) >= Math.abs(delta))
          return focusOnDayElem(c);
      }
    }
    self.changeMonth(loopDelta);
    focusOnDay(getFirstAvailableDay(loopDelta), 0);
    return void 0;
  }
  function focusOnDay(current, offset2) {
    var activeElement = getClosestActiveElement();
    var dayFocused = isInView(activeElement || document.body);
    var startElem = current !== void 0 ? current : dayFocused ? activeElement : self.selectedDateElem !== void 0 && isInView(self.selectedDateElem) ? self.selectedDateElem : self.todayDateElem !== void 0 && isInView(self.todayDateElem) ? self.todayDateElem : getFirstAvailableDay(offset2 > 0 ? 1 : -1);
    if (startElem === void 0) {
      self._input.focus();
    } else if (!dayFocused) {
      focusOnDayElem(startElem);
    } else {
      getNextAvailableDay(startElem, offset2);
    }
  }
  function buildMonthDays(year, month) {
    var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
    var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
    var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
    var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
    for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
    }
    for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
    }
    for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
    }
    var dayContainer = createElement("div", "dayContainer");
    dayContainer.appendChild(days);
    return dayContainer;
  }
  function buildDays() {
    if (self.daysContainer === void 0) {
      return;
    }
    clearNode(self.daysContainer);
    if (self.weekNumbers)
      clearNode(self.weekNumbers);
    var frag = document.createDocumentFragment();
    for (var i = 0; i < self.config.showMonths; i++) {
      var d = new Date(self.currentYear, self.currentMonth, 1);
      d.setMonth(self.currentMonth + i);
      frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
    }
    self.daysContainer.appendChild(frag);
    self.days = self.daysContainer.firstChild;
    if (self.config.mode === "range" && self.selectedDates.length === 1) {
      onMouseOver();
    }
  }
  function buildMonthSwitch() {
    if (self.config.showMonths > 1 || self.config.monthSelectorType !== "dropdown")
      return;
    var shouldBuildMonth = function(month2) {
      if (self.config.minDate !== void 0 && self.currentYear === self.config.minDate.getFullYear() && month2 < self.config.minDate.getMonth()) {
        return false;
      }
      return !(self.config.maxDate !== void 0 && self.currentYear === self.config.maxDate.getFullYear() && month2 > self.config.maxDate.getMonth());
    };
    self.monthsDropdownContainer.tabIndex = -1;
    self.monthsDropdownContainer.innerHTML = "";
    for (var i = 0; i < 12; i++) {
      if (!shouldBuildMonth(i))
        continue;
      var month = createElement("option", "flatpickr-monthDropdown-month");
      month.value = new Date(self.currentYear, i).getMonth().toString();
      month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
      month.tabIndex = -1;
      if (self.currentMonth === i) {
        month.selected = true;
      }
      self.monthsDropdownContainer.appendChild(month);
    }
  }
  function buildMonth() {
    var container = createElement("div", "flatpickr-month");
    var monthNavFragment = window.document.createDocumentFragment();
    var monthElement;
    if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
      monthElement = createElement("span", "cur-month");
    } else {
      self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
      self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
      bind(self.monthsDropdownContainer, "change", function(e) {
        var target = getEventTarget(e);
        var selectedMonth = parseInt(target.value, 10);
        self.changeMonth(selectedMonth - self.currentMonth);
        triggerEvent("onMonthChange");
      });
      buildMonthSwitch();
      monthElement = self.monthsDropdownContainer;
    }
    var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
    var yearElement = yearInput.getElementsByTagName("input")[0];
    yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
    if (self.config.minDate) {
      yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
    }
    if (self.config.maxDate) {
      yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
      yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
    }
    var currentMonth = createElement("div", "flatpickr-current-month");
    currentMonth.appendChild(monthElement);
    currentMonth.appendChild(yearInput);
    monthNavFragment.appendChild(currentMonth);
    container.appendChild(monthNavFragment);
    return {
      container,
      yearElement,
      monthElement
    };
  }
  function buildMonths() {
    clearNode(self.monthNav);
    self.monthNav.appendChild(self.prevMonthNav);
    if (self.config.showMonths) {
      self.yearElements = [];
      self.monthElements = [];
    }
    for (var m = self.config.showMonths; m--; ) {
      var month = buildMonth();
      self.yearElements.push(month.yearElement);
      self.monthElements.push(month.monthElement);
      self.monthNav.appendChild(month.container);
    }
    self.monthNav.appendChild(self.nextMonthNav);
  }
  function buildMonthNav() {
    self.monthNav = createElement("div", "flatpickr-months");
    self.yearElements = [];
    self.monthElements = [];
    self.prevMonthNav = createElement("span", "flatpickr-prev-month");
    self.prevMonthNav.innerHTML = self.config.prevArrow;
    self.nextMonthNav = createElement("span", "flatpickr-next-month");
    self.nextMonthNav.innerHTML = self.config.nextArrow;
    buildMonths();
    Object.defineProperty(self, "_hidePrevMonthArrow", {
      get: function() {
        return self.__hidePrevMonthArrow;
      },
      set: function(bool) {
        if (self.__hidePrevMonthArrow !== bool) {
          toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
          self.__hidePrevMonthArrow = bool;
        }
      }
    });
    Object.defineProperty(self, "_hideNextMonthArrow", {
      get: function() {
        return self.__hideNextMonthArrow;
      },
      set: function(bool) {
        if (self.__hideNextMonthArrow !== bool) {
          toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
          self.__hideNextMonthArrow = bool;
        }
      }
    });
    self.currentYearElement = self.yearElements[0];
    updateNavigationCurrentMonth();
    return self.monthNav;
  }
  function buildTime() {
    self.calendarContainer.classList.add("hasTime");
    if (self.config.noCalendar)
      self.calendarContainer.classList.add("noCalendar");
    var defaults2 = getDefaultHours(self.config);
    self.timeContainer = createElement("div", "flatpickr-time");
    self.timeContainer.tabIndex = -1;
    var separator = createElement("span", "flatpickr-time-separator", ":");
    var hourInput = createNumberInput("flatpickr-hour", {
      "aria-label": self.l10n.hourAriaLabel
    });
    self.hourElement = hourInput.getElementsByTagName("input")[0];
    var minuteInput = createNumberInput("flatpickr-minute", {
      "aria-label": self.l10n.minuteAriaLabel
    });
    self.minuteElement = minuteInput.getElementsByTagName("input")[0];
    self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
    self.hourElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? defaults2.hours : military2ampm(defaults2.hours));
    self.minuteElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : defaults2.minutes);
    self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
    self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
    self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
    self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
    self.hourElement.setAttribute("maxlength", "2");
    self.minuteElement.setAttribute("min", "0");
    self.minuteElement.setAttribute("max", "59");
    self.minuteElement.setAttribute("maxlength", "2");
    self.timeContainer.appendChild(hourInput);
    self.timeContainer.appendChild(separator);
    self.timeContainer.appendChild(minuteInput);
    if (self.config.time_24hr)
      self.timeContainer.classList.add("time24hr");
    if (self.config.enableSeconds) {
      self.timeContainer.classList.add("hasSeconds");
      var secondInput = createNumberInput("flatpickr-second");
      self.secondElement = secondInput.getElementsByTagName("input")[0];
      self.secondElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : defaults2.seconds);
      self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
      self.secondElement.setAttribute("min", "0");
      self.secondElement.setAttribute("max", "59");
      self.secondElement.setAttribute("maxlength", "2");
      self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
      self.timeContainer.appendChild(secondInput);
    }
    if (!self.config.time_24hr) {
      self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);
      self.amPM.title = self.l10n.toggleTitle;
      self.amPM.tabIndex = -1;
      self.timeContainer.appendChild(self.amPM);
    }
    return self.timeContainer;
  }
  function buildWeekdays() {
    if (!self.weekdayContainer)
      self.weekdayContainer = createElement("div", "flatpickr-weekdays");
    else
      clearNode(self.weekdayContainer);
    for (var i = self.config.showMonths; i--; ) {
      var container = createElement("div", "flatpickr-weekdaycontainer");
      self.weekdayContainer.appendChild(container);
    }
    updateWeekdays();
    return self.weekdayContainer;
  }
  function updateWeekdays() {
    if (!self.weekdayContainer) {
      return;
    }
    var firstDayOfWeek = self.l10n.firstDayOfWeek;
    var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
    if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
      weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
    }
    for (var i = self.config.showMonths; i--; ) {
      self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
    }
  }
  function buildWeeks() {
    self.calendarContainer.classList.add("hasWeeks");
    var weekWrapper = createElement("div", "flatpickr-weekwrapper");
    weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
    var weekNumbers = createElement("div", "flatpickr-weeks");
    weekWrapper.appendChild(weekNumbers);
    return {
      weekWrapper,
      weekNumbers
    };
  }
  function changeMonth(value, isOffset) {
    if (isOffset === void 0) {
      isOffset = true;
    }
    var delta = isOffset ? value : value - self.currentMonth;
    if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true)
      return;
    self.currentMonth += delta;
    if (self.currentMonth < 0 || self.currentMonth > 11) {
      self.currentYear += self.currentMonth > 11 ? 1 : -1;
      self.currentMonth = (self.currentMonth + 12) % 12;
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
    buildDays();
    triggerEvent("onMonthChange");
    updateNavigationCurrentMonth();
  }
  function clear(triggerChangeEvent, toInitial) {
    if (triggerChangeEvent === void 0) {
      triggerChangeEvent = true;
    }
    if (toInitial === void 0) {
      toInitial = true;
    }
    self.input.value = "";
    if (self.altInput !== void 0)
      self.altInput.value = "";
    if (self.mobileInput !== void 0)
      self.mobileInput.value = "";
    self.selectedDates = [];
    self.latestSelectedDateObj = void 0;
    if (toInitial === true) {
      self.currentYear = self._initialDate.getFullYear();
      self.currentMonth = self._initialDate.getMonth();
    }
    if (self.config.enableTime === true) {
      var _a = getDefaultHours(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
      setHours(hours, minutes, seconds);
    }
    self.redraw();
    if (triggerChangeEvent)
      triggerEvent("onChange");
  }
  function close() {
    self.isOpen = false;
    if (!self.isMobile) {
      if (self.calendarContainer !== void 0) {
        self.calendarContainer.classList.remove("open");
      }
      if (self._input !== void 0) {
        self._input.classList.remove("active");
      }
    }
    triggerEvent("onClose");
  }
  function destroy() {
    if (self.config !== void 0)
      triggerEvent("onDestroy");
    for (var i = self._handlers.length; i--; ) {
      self._handlers[i].remove();
    }
    self._handlers = [];
    if (self.mobileInput) {
      if (self.mobileInput.parentNode)
        self.mobileInput.parentNode.removeChild(self.mobileInput);
      self.mobileInput = void 0;
    } else if (self.calendarContainer && self.calendarContainer.parentNode) {
      if (self.config.static && self.calendarContainer.parentNode) {
        var wrapper = self.calendarContainer.parentNode;
        wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
        if (wrapper.parentNode) {
          while (wrapper.firstChild)
            wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
          wrapper.parentNode.removeChild(wrapper);
        }
      } else
        self.calendarContainer.parentNode.removeChild(self.calendarContainer);
    }
    if (self.altInput) {
      self.input.type = "text";
      if (self.altInput.parentNode)
        self.altInput.parentNode.removeChild(self.altInput);
      delete self.altInput;
    }
    if (self.input) {
      self.input.type = self.input._type;
      self.input.classList.remove("flatpickr-input");
      self.input.removeAttribute("readonly");
    }
    [
      "_showTimeInput",
      "latestSelectedDateObj",
      "_hideNextMonthArrow",
      "_hidePrevMonthArrow",
      "__hideNextMonthArrow",
      "__hidePrevMonthArrow",
      "isMobile",
      "isOpen",
      "selectedDateElem",
      "minDateHasTime",
      "maxDateHasTime",
      "days",
      "daysContainer",
      "_input",
      "_positionElement",
      "innerContainer",
      "rContainer",
      "monthNav",
      "todayDateElem",
      "calendarContainer",
      "weekdayContainer",
      "prevMonthNav",
      "nextMonthNav",
      "monthsDropdownContainer",
      "currentMonthElement",
      "currentYearElement",
      "navigationCurrentMonth",
      "selectedDateElem",
      "config"
    ].forEach(function(k) {
      try {
        delete self[k];
      } catch (_) {
      }
    });
  }
  function isCalendarElem(elem) {
    return self.calendarContainer.contains(elem);
  }
  function documentClick(e) {
    if (self.isOpen && !self.config.inline) {
      var eventTarget_1 = getEventTarget(e);
      var isCalendarElement = isCalendarElem(eventTarget_1);
      var isInput = eventTarget_1 === self.input || eventTarget_1 === self.altInput || self.element.contains(eventTarget_1) || e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));
      var lostFocus = !isInput && !isCalendarElement && !isCalendarElem(e.relatedTarget);
      var isIgnored = !self.config.ignoredFocusElements.some(function(elem) {
        return elem.contains(eventTarget_1);
      });
      if (lostFocus && isIgnored) {
        if (self.config.allowInput) {
          self.setDate(self._input.value, false, self.config.altInput ? self.config.altFormat : self.config.dateFormat);
        }
        if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0 && self.input.value !== "" && self.input.value !== void 0) {
          updateTime();
        }
        self.close();
        if (self.config && self.config.mode === "range" && self.selectedDates.length === 1)
          self.clear(false);
      }
    }
  }
  function changeYear(newYear) {
    if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear())
      return;
    var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
    self.currentYear = newYearNum || self.currentYear;
    if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {
      self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
    } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {
      self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
    }
    if (isNewYear) {
      self.redraw();
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
  }
  function isEnabled(date, timeless) {
    var _a;
    if (timeless === void 0) {
      timeless = true;
    }
    var dateToCheck = self.parseDate(date, void 0, timeless);
    if (self.config.minDate && dateToCheck && compareDates(dateToCheck, self.config.minDate, timeless !== void 0 ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && compareDates(dateToCheck, self.config.maxDate, timeless !== void 0 ? timeless : !self.maxDateHasTime) > 0)
      return false;
    if (!self.config.enable && self.config.disable.length === 0)
      return true;
    if (dateToCheck === void 0)
      return false;
    var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
    for (var i = 0, d = void 0; i < array.length; i++) {
      d = array[i];
      if (typeof d === "function" && d(dateToCheck))
        return bool;
      else if (d instanceof Date && dateToCheck !== void 0 && d.getTime() === dateToCheck.getTime())
        return bool;
      else if (typeof d === "string") {
        var parsed = self.parseDate(d, void 0, true);
        return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
      } else if (typeof d === "object" && dateToCheck !== void 0 && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime())
        return bool;
    }
    return !bool;
  }
  function isInView(elem) {
    if (self.daysContainer !== void 0)
      return elem.className.indexOf("hidden") === -1 && elem.className.indexOf("flatpickr-disabled") === -1 && self.daysContainer.contains(elem);
    return false;
  }
  function onBlur(e) {
    var isInput = e.target === self._input;
    var valueChanged = self._input.value.trimEnd() !== getDateStr();
    if (isInput && valueChanged && !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
      self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);
    }
  }
  function onKeyDown(e) {
    var eventTarget = getEventTarget(e);
    var isInput = self.config.wrap ? element.contains(eventTarget) : eventTarget === self._input;
    var allowInput = self.config.allowInput;
    var allowKeydown = self.isOpen && (!allowInput || !isInput);
    var allowInlineKeydown = self.config.inline && isInput && !allowInput;
    if (e.keyCode === 13 && isInput) {
      if (allowInput) {
        self.setDate(self._input.value, true, eventTarget === self.altInput ? self.config.altFormat : self.config.dateFormat);
        self.close();
        return eventTarget.blur();
      } else {
        self.open();
      }
    } else if (isCalendarElem(eventTarget) || allowKeydown || allowInlineKeydown) {
      var isTimeObj = !!self.timeContainer && self.timeContainer.contains(eventTarget);
      switch (e.keyCode) {
        case 13:
          if (isTimeObj) {
            e.preventDefault();
            updateTime();
            focusAndClose();
          } else
            selectDate(e);
          break;
        case 27:
          e.preventDefault();
          focusAndClose();
          break;
        case 8:
        case 46:
          if (isInput && !self.config.allowInput) {
            e.preventDefault();
            self.clear();
          }
          break;
        case 37:
        case 39:
          if (!isTimeObj && !isInput) {
            e.preventDefault();
            var activeElement = getClosestActiveElement();
            if (self.daysContainer !== void 0 && (allowInput === false || activeElement && isInView(activeElement))) {
              var delta_1 = e.keyCode === 39 ? 1 : -1;
              if (!e.ctrlKey)
                focusOnDay(void 0, delta_1);
              else {
                e.stopPropagation();
                changeMonth(delta_1);
                focusOnDay(getFirstAvailableDay(1), 0);
              }
            }
          } else if (self.hourElement)
            self.hourElement.focus();
          break;
        case 38:
        case 40:
          e.preventDefault();
          var delta = e.keyCode === 40 ? 1 : -1;
          if (self.daysContainer && eventTarget.$i !== void 0 || eventTarget === self.input || eventTarget === self.altInput) {
            if (e.ctrlKey) {
              e.stopPropagation();
              changeYear(self.currentYear - delta);
              focusOnDay(getFirstAvailableDay(1), 0);
            } else if (!isTimeObj)
              focusOnDay(void 0, delta * 7);
          } else if (eventTarget === self.currentYearElement) {
            changeYear(self.currentYear - delta);
          } else if (self.config.enableTime) {
            if (!isTimeObj && self.hourElement)
              self.hourElement.focus();
            updateTime(e);
            self._debouncedChange();
          }
          break;
        case 9:
          if (isTimeObj) {
            var elems = [
              self.hourElement,
              self.minuteElement,
              self.secondElement,
              self.amPM
            ].concat(self.pluginElements).filter(function(x) {
              return x;
            });
            var i = elems.indexOf(eventTarget);
            if (i !== -1) {
              var target = elems[i + (e.shiftKey ? -1 : 1)];
              e.preventDefault();
              (target || self._input).focus();
            }
          } else if (!self.config.noCalendar && self.daysContainer && self.daysContainer.contains(eventTarget) && e.shiftKey) {
            e.preventDefault();
            self._input.focus();
          }
          break;
        default:
          break;
      }
    }
    if (self.amPM !== void 0 && eventTarget === self.amPM) {
      switch (e.key) {
        case self.l10n.amPM[0].charAt(0):
        case self.l10n.amPM[0].charAt(0).toLowerCase():
          self.amPM.textContent = self.l10n.amPM[0];
          setHoursFromInputs();
          updateValue();
          break;
        case self.l10n.amPM[1].charAt(0):
        case self.l10n.amPM[1].charAt(0).toLowerCase():
          self.amPM.textContent = self.l10n.amPM[1];
          setHoursFromInputs();
          updateValue();
          break;
      }
    }
    if (isInput || isCalendarElem(eventTarget)) {
      triggerEvent("onKeyDown", e);
    }
  }
  function onMouseOver(elem, cellClass) {
    if (cellClass === void 0) {
      cellClass = "flatpickr-day";
    }
    if (self.selectedDates.length !== 1 || elem && (!elem.classList.contains(cellClass) || elem.classList.contains("flatpickr-disabled")))
      return;
    var hoverDate = elem ? elem.dateObj.getTime() : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], void 0, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
    var containsDisabled = false;
    var minRange = 0, maxRange = 0;
    for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
      if (!isEnabled(new Date(t), true)) {
        containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;
        if (t < initialDate && (!minRange || t > minRange))
          minRange = t;
        else if (t > initialDate && (!maxRange || t < maxRange))
          maxRange = t;
      }
    }
    var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
    hoverableCells.forEach(function(dayElem) {
      var date = dayElem.dateObj;
      var timestamp = date.getTime();
      var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;
      if (outOfRange) {
        dayElem.classList.add("notAllowed");
        ["inRange", "startRange", "endRange"].forEach(function(c) {
          dayElem.classList.remove(c);
        });
        return;
      } else if (containsDisabled && !outOfRange)
        return;
      ["startRange", "inRange", "endRange", "notAllowed"].forEach(function(c) {
        dayElem.classList.remove(c);
      });
      if (elem !== void 0) {
        elem.classList.add(hoverDate <= self.selectedDates[0].getTime() ? "startRange" : "endRange");
        if (initialDate < hoverDate && timestamp === initialDate)
          dayElem.classList.add("startRange");
        else if (initialDate > hoverDate && timestamp === initialDate)
          dayElem.classList.add("endRange");
        if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate))
          dayElem.classList.add("inRange");
      }
    });
  }
  function onResize() {
    if (self.isOpen && !self.config.static && !self.config.inline)
      positionCalendar();
  }
  function open(e, positionElement) {
    if (positionElement === void 0) {
      positionElement = self._positionElement;
    }
    if (self.isMobile === true) {
      if (e) {
        e.preventDefault();
        var eventTarget = getEventTarget(e);
        if (eventTarget) {
          eventTarget.blur();
        }
      }
      if (self.mobileInput !== void 0) {
        self.mobileInput.focus();
        self.mobileInput.click();
      }
      triggerEvent("onOpen");
      return;
    } else if (self._input.disabled || self.config.inline) {
      return;
    }
    var wasOpen = self.isOpen;
    self.isOpen = true;
    if (!wasOpen) {
      self.calendarContainer.classList.add("open");
      self._input.classList.add("active");
      triggerEvent("onOpen");
      positionCalendar(positionElement);
    }
    if (self.config.enableTime === true && self.config.noCalendar === true) {
      if (self.config.allowInput === false && (e === void 0 || !self.timeContainer.contains(e.relatedTarget))) {
        setTimeout(function() {
          return self.hourElement.select();
        }, 50);
      }
    }
  }
  function minMaxDateSetter(type) {
    return function(date) {
      var dateObj = self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat);
      var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
      if (dateObj !== void 0) {
        self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
      }
      if (self.selectedDates) {
        self.selectedDates = self.selectedDates.filter(function(d) {
          return isEnabled(d);
        });
        if (!self.selectedDates.length && type === "min")
          setHoursFromDate(dateObj);
        updateValue();
      }
      if (self.daysContainer) {
        redraw();
        if (dateObj !== void 0)
          self.currentYearElement[type] = dateObj.getFullYear().toString();
        else
          self.currentYearElement.removeAttribute(type);
        self.currentYearElement.disabled = !!inverseDateObj && dateObj !== void 0 && inverseDateObj.getFullYear() === dateObj.getFullYear();
      }
    };
  }
  function parseConfig() {
    var boolOpts = [
      "wrap",
      "weekNumbers",
      "allowInput",
      "allowInvalidPreload",
      "clickOpens",
      "time_24hr",
      "enableTime",
      "noCalendar",
      "altInput",
      "shorthandCurrentMonth",
      "inline",
      "static",
      "enableSeconds",
      "disableMobile"
    ];
    var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
    var formats2 = {};
    self.config.parseDate = userConfig.parseDate;
    self.config.formatDate = userConfig.formatDate;
    Object.defineProperty(self.config, "enable", {
      get: function() {
        return self.config._enable;
      },
      set: function(dates) {
        self.config._enable = parseDateRules(dates);
      }
    });
    Object.defineProperty(self.config, "disable", {
      get: function() {
        return self.config._disable;
      },
      set: function(dates) {
        self.config._disable = parseDateRules(dates);
      }
    });
    var timeMode = userConfig.mode === "time";
    if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
      var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
      formats2.dateFormat = userConfig.noCalendar || timeMode ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
    }
    if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
      var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
      formats2.altFormat = userConfig.noCalendar || timeMode ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
    }
    Object.defineProperty(self.config, "minDate", {
      get: function() {
        return self.config._minDate;
      },
      set: minMaxDateSetter("min")
    });
    Object.defineProperty(self.config, "maxDate", {
      get: function() {
        return self.config._maxDate;
      },
      set: minMaxDateSetter("max")
    });
    var minMaxTimeSetter = function(type) {
      return function(val) {
        self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
      };
    };
    Object.defineProperty(self.config, "minTime", {
      get: function() {
        return self.config._minTime;
      },
      set: minMaxTimeSetter("min")
    });
    Object.defineProperty(self.config, "maxTime", {
      get: function() {
        return self.config._maxTime;
      },
      set: minMaxTimeSetter("max")
    });
    if (userConfig.mode === "time") {
      self.config.noCalendar = true;
      self.config.enableTime = true;
    }
    Object.assign(self.config, formats2, userConfig);
    for (var i = 0; i < boolOpts.length; i++)
      self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === "true";
    HOOKS.filter(function(hook) {
      return self.config[hook] !== void 0;
    }).forEach(function(hook) {
      self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
    });
    self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === "single" && !self.config.disable.length && !self.config.enable && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    for (var i = 0; i < self.config.plugins.length; i++) {
      var pluginConf = self.config.plugins[i](self) || {};
      for (var key in pluginConf) {
        if (HOOKS.indexOf(key) > -1) {
          self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);
        } else if (typeof userConfig[key] === "undefined")
          self.config[key] = pluginConf[key];
      }
    }
    if (!userConfig.altInputClass) {
      self.config.altInputClass = getInputElem().className + " " + self.config.altInputClass;
    }
    triggerEvent("onParseConfig");
  }
  function getInputElem() {
    return self.config.wrap ? element.querySelector("[data-input]") : element;
  }
  function setupLocale() {
    if (typeof self.config.locale !== "object" && typeof flatpickr.l10ns[self.config.locale] === "undefined")
      self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
    self.l10n = __assign(__assign({}, flatpickr.l10ns.default), typeof self.config.locale === "object" ? self.config.locale : self.config.locale !== "default" ? flatpickr.l10ns[self.config.locale] : void 0);
    tokenRegex.D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
    tokenRegex.l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
    tokenRegex.M = "(" + self.l10n.months.shorthand.join("|") + ")";
    tokenRegex.F = "(" + self.l10n.months.longhand.join("|") + ")";
    tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
    var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
    if (userConfig.time_24hr === void 0 && flatpickr.defaultConfig.time_24hr === void 0) {
      self.config.time_24hr = self.l10n.time_24hr;
    }
    self.formatDate = createDateFormatter(self);
    self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  }
  function positionCalendar(customPositionElement) {
    if (typeof self.config.position === "function") {
      return void self.config.position(self, customPositionElement);
    }
    if (self.calendarContainer === void 0)
      return;
    triggerEvent("onPreCalendarPosition");
    var positionElement = customPositionElement || self._positionElement;
    var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, function(acc, child) {
      return acc + child.offsetHeight;
    }, 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" || configPosVertical !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
    var top2 = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
    toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
    toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
    if (self.config.inline)
      return;
    var left2 = window.pageXOffset + inputBounds.left;
    var isCenter = false;
    var isRight = false;
    if (configPosHorizontal === "center") {
      left2 -= (calendarWidth - inputBounds.width) / 2;
      isCenter = true;
    } else if (configPosHorizontal === "right") {
      left2 -= calendarWidth - inputBounds.width;
      isRight = true;
    }
    toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
    toggleClass(self.calendarContainer, "arrowCenter", isCenter);
    toggleClass(self.calendarContainer, "arrowRight", isRight);
    var right2 = window.document.body.offsetWidth - (window.pageXOffset + inputBounds.right);
    var rightMost = left2 + calendarWidth > window.document.body.offsetWidth;
    var centerMost = right2 + calendarWidth > window.document.body.offsetWidth;
    toggleClass(self.calendarContainer, "rightMost", rightMost);
    if (self.config.static)
      return;
    self.calendarContainer.style.top = top2 + "px";
    if (!rightMost) {
      self.calendarContainer.style.left = left2 + "px";
      self.calendarContainer.style.right = "auto";
    } else if (!centerMost) {
      self.calendarContainer.style.left = "auto";
      self.calendarContainer.style.right = right2 + "px";
    } else {
      var doc = getDocumentStyleSheet();
      if (doc === void 0)
        return;
      var bodyWidth = window.document.body.offsetWidth;
      var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
      var centerBefore = ".flatpickr-calendar.centerMost:before";
      var centerAfter = ".flatpickr-calendar.centerMost:after";
      var centerIndex = doc.cssRules.length;
      var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
      toggleClass(self.calendarContainer, "rightMost", false);
      toggleClass(self.calendarContainer, "centerMost", true);
      doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
      self.calendarContainer.style.left = centerLeft + "px";
      self.calendarContainer.style.right = "auto";
    }
  }
  function getDocumentStyleSheet() {
    var editableSheet = null;
    for (var i = 0; i < document.styleSheets.length; i++) {
      var sheet = document.styleSheets[i];
      if (!sheet.cssRules)
        continue;
      try {
        sheet.cssRules;
      } catch (err) {
        continue;
      }
      editableSheet = sheet;
      break;
    }
    return editableSheet != null ? editableSheet : createStyleSheet();
  }
  function createStyleSheet() {
    var style = document.createElement("style");
    document.head.appendChild(style);
    return style.sheet;
  }
  function redraw() {
    if (self.config.noCalendar || self.isMobile)
      return;
    buildMonthSwitch();
    updateNavigationCurrentMonth();
    buildDays();
  }
  function focusAndClose() {
    self._input.focus();
    if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== void 0) {
      setTimeout(self.close, 0);
    } else {
      self.close();
    }
  }
  function selectDate(e) {
    e.preventDefault();
    e.stopPropagation();
    var isSelectable = function(day) {
      return day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("flatpickr-disabled") && !day.classList.contains("notAllowed");
    };
    var t = findParent(getEventTarget(e), isSelectable);
    if (t === void 0)
      return;
    var target = t;
    var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());
    var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== "range";
    self.selectedDateElem = target;
    if (self.config.mode === "single")
      self.selectedDates = [selectedDate];
    else if (self.config.mode === "multiple") {
      var selectedIndex = isDateSelected(selectedDate);
      if (selectedIndex)
        self.selectedDates.splice(parseInt(selectedIndex), 1);
      else
        self.selectedDates.push(selectedDate);
    } else if (self.config.mode === "range") {
      if (self.selectedDates.length === 2) {
        self.clear(false, false);
      }
      self.latestSelectedDateObj = selectedDate;
      self.selectedDates.push(selectedDate);
      if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
        self.selectedDates.sort(function(a, b) {
          return a.getTime() - b.getTime();
        });
    }
    setHoursFromInputs();
    if (shouldChangeMonth) {
      var isNewYear = self.currentYear !== selectedDate.getFullYear();
      self.currentYear = selectedDate.getFullYear();
      self.currentMonth = selectedDate.getMonth();
      if (isNewYear) {
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
      triggerEvent("onMonthChange");
    }
    updateNavigationCurrentMonth();
    buildDays();
    updateValue();
    if (!shouldChangeMonth && self.config.mode !== "range" && self.config.showMonths === 1)
      focusOnDayElem(target);
    else if (self.selectedDateElem !== void 0 && self.hourElement === void 0) {
      self.selectedDateElem && self.selectedDateElem.focus();
    }
    if (self.hourElement !== void 0)
      self.hourElement !== void 0 && self.hourElement.focus();
    if (self.config.closeOnSelect) {
      var single = self.config.mode === "single" && !self.config.enableTime;
      var range = self.config.mode === "range" && self.selectedDates.length === 2 && !self.config.enableTime;
      if (single || range) {
        focusAndClose();
      }
    }
    triggerChange();
  }
  var CALLBACKS = {
    locale: [setupLocale, updateWeekdays],
    showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
    minDate: [jumpToDate],
    maxDate: [jumpToDate],
    positionElement: [updatePositionElement],
    clickOpens: [
      function() {
        if (self.config.clickOpens === true) {
          bind(self._input, "focus", self.open);
          bind(self._input, "click", self.open);
        } else {
          self._input.removeEventListener("focus", self.open);
          self._input.removeEventListener("click", self.open);
        }
      }
    ]
  };
  function set(option, value) {
    if (option !== null && typeof option === "object") {
      Object.assign(self.config, option);
      for (var key in option) {
        if (CALLBACKS[key] !== void 0)
          CALLBACKS[key].forEach(function(x) {
            return x();
          });
      }
    } else {
      self.config[option] = value;
      if (CALLBACKS[option] !== void 0)
        CALLBACKS[option].forEach(function(x) {
          return x();
        });
      else if (HOOKS.indexOf(option) > -1)
        self.config[option] = arrayify(value);
    }
    self.redraw();
    updateValue(true);
  }
  function setSelectedDate(inputDate, format2) {
    var dates = [];
    if (inputDate instanceof Array)
      dates = inputDate.map(function(d) {
        return self.parseDate(d, format2);
      });
    else if (inputDate instanceof Date || typeof inputDate === "number")
      dates = [self.parseDate(inputDate, format2)];
    else if (typeof inputDate === "string") {
      switch (self.config.mode) {
        case "single":
        case "time":
          dates = [self.parseDate(inputDate, format2)];
          break;
        case "multiple":
          dates = inputDate.split(self.config.conjunction).map(function(date) {
            return self.parseDate(date, format2);
          });
          break;
        case "range":
          dates = inputDate.split(self.l10n.rangeSeparator).map(function(date) {
            return self.parseDate(date, format2);
          });
          break;
        default:
          break;
      }
    } else
      self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
    self.selectedDates = self.config.allowInvalidPreload ? dates : dates.filter(function(d) {
      return d instanceof Date && isEnabled(d, false);
    });
    if (self.config.mode === "range")
      self.selectedDates.sort(function(a, b) {
        return a.getTime() - b.getTime();
      });
  }
  function setDate(date, triggerChange2, format2) {
    if (triggerChange2 === void 0) {
      triggerChange2 = false;
    }
    if (format2 === void 0) {
      format2 = self.config.dateFormat;
    }
    if (date !== 0 && !date || date instanceof Array && date.length === 0)
      return self.clear(triggerChange2);
    setSelectedDate(date, format2);
    self.latestSelectedDateObj = self.selectedDates[self.selectedDates.length - 1];
    self.redraw();
    jumpToDate(void 0, triggerChange2);
    setHoursFromDate();
    if (self.selectedDates.length === 0) {
      self.clear(false);
    }
    updateValue(triggerChange2);
    if (triggerChange2)
      triggerEvent("onChange");
  }
  function parseDateRules(arr) {
    return arr.slice().map(function(rule) {
      if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) {
        return self.parseDate(rule, void 0, true);
      } else if (rule && typeof rule === "object" && rule.from && rule.to)
        return {
          from: self.parseDate(rule.from, void 0),
          to: self.parseDate(rule.to, void 0)
        };
      return rule;
    }).filter(function(x) {
      return x;
    });
  }
  function setupDates() {
    self.selectedDates = [];
    self.now = self.parseDate(self.config.now) || new Date();
    var preloadedDate = self.config.defaultDate || ((self.input.nodeName === "INPUT" || self.input.nodeName === "TEXTAREA") && self.input.placeholder && self.input.value === self.input.placeholder ? null : self.input.value);
    if (preloadedDate)
      setSelectedDate(preloadedDate, self.config.dateFormat);
    self._initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;
    self.currentYear = self._initialDate.getFullYear();
    self.currentMonth = self._initialDate.getMonth();
    if (self.selectedDates.length > 0)
      self.latestSelectedDateObj = self.selectedDates[0];
    if (self.config.minTime !== void 0)
      self.config.minTime = self.parseDate(self.config.minTime, "H:i");
    if (self.config.maxTime !== void 0)
      self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
    self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);
    self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);
  }
  function setupInputs() {
    self.input = getInputElem();
    if (!self.input) {
      self.config.errorHandler(new Error("Invalid input element specified"));
      return;
    }
    self.input._type = self.input.type;
    self.input.type = "text";
    self.input.classList.add("flatpickr-input");
    self._input = self.input;
    if (self.config.altInput) {
      self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
      self._input = self.altInput;
      self.altInput.placeholder = self.input.placeholder;
      self.altInput.disabled = self.input.disabled;
      self.altInput.required = self.input.required;
      self.altInput.tabIndex = self.input.tabIndex;
      self.altInput.type = "text";
      self.input.setAttribute("type", "hidden");
      if (!self.config.static && self.input.parentNode)
        self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
    }
    if (!self.config.allowInput)
      self._input.setAttribute("readonly", "readonly");
    updatePositionElement();
  }
  function updatePositionElement() {
    self._positionElement = self.config.positionElement || self._input;
  }
  function setupMobile() {
    var inputType = self.config.enableTime ? self.config.noCalendar ? "time" : "datetime-local" : "date";
    self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
    self.mobileInput.tabIndex = 1;
    self.mobileInput.type = inputType;
    self.mobileInput.disabled = self.input.disabled;
    self.mobileInput.required = self.input.required;
    self.mobileInput.placeholder = self.input.placeholder;
    self.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";
    if (self.selectedDates.length > 0) {
      self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
    }
    if (self.config.minDate)
      self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
    if (self.config.maxDate)
      self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
    if (self.input.getAttribute("step"))
      self.mobileInput.step = String(self.input.getAttribute("step"));
    self.input.type = "hidden";
    if (self.altInput !== void 0)
      self.altInput.type = "hidden";
    try {
      if (self.input.parentNode)
        self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
    } catch (_a) {
    }
    bind(self.mobileInput, "change", function(e) {
      self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
      triggerEvent("onChange");
      triggerEvent("onClose");
    });
  }
  function toggle(e) {
    if (self.isOpen === true)
      return self.close();
    self.open(e);
  }
  function triggerEvent(event, data) {
    if (self.config === void 0)
      return;
    var hooks = self.config[event];
    if (hooks !== void 0 && hooks.length > 0) {
      for (var i = 0; hooks[i] && i < hooks.length; i++)
        hooks[i](self.selectedDates, self.input.value, self, data);
    }
    if (event === "onChange") {
      self.input.dispatchEvent(createEvent("change"));
      self.input.dispatchEvent(createEvent("input"));
    }
  }
  function createEvent(name) {
    var e = document.createEvent("Event");
    e.initEvent(name, true, true);
    return e;
  }
  function isDateSelected(date) {
    for (var i = 0; i < self.selectedDates.length; i++) {
      var selectedDate = self.selectedDates[i];
      if (selectedDate instanceof Date && compareDates(selectedDate, date) === 0)
        return "" + i;
    }
    return false;
  }
  function isDateInRange(date) {
    if (self.config.mode !== "range" || self.selectedDates.length < 2)
      return false;
    return compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;
  }
  function updateNavigationCurrentMonth() {
    if (self.config.noCalendar || self.isMobile || !self.monthNav)
      return;
    self.yearElements.forEach(function(yearElement, i) {
      var d = new Date(self.currentYear, self.currentMonth, 1);
      d.setMonth(self.currentMonth + i);
      if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
        self.monthElements[i].textContent = monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
      } else {
        self.monthsDropdownContainer.value = d.getMonth().toString();
      }
      yearElement.value = d.getFullYear().toString();
    });
    self._hidePrevMonthArrow = self.config.minDate !== void 0 && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());
    self._hideNextMonthArrow = self.config.maxDate !== void 0 && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());
  }
  function getDateStr(specificFormat) {
    var format2 = specificFormat || (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
    return self.selectedDates.map(function(dObj) {
      return self.formatDate(dObj, format2);
    }).filter(function(d, i, arr) {
      return self.config.mode !== "range" || self.config.enableTime || arr.indexOf(d) === i;
    }).join(self.config.mode !== "range" ? self.config.conjunction : self.l10n.rangeSeparator);
  }
  function updateValue(triggerChange2) {
    if (triggerChange2 === void 0) {
      triggerChange2 = true;
    }
    if (self.mobileInput !== void 0 && self.mobileFormatStr) {
      self.mobileInput.value = self.latestSelectedDateObj !== void 0 ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : "";
    }
    self.input.value = getDateStr(self.config.dateFormat);
    if (self.altInput !== void 0) {
      self.altInput.value = getDateStr(self.config.altFormat);
    }
    if (triggerChange2 !== false)
      triggerEvent("onValueUpdate");
  }
  function onMonthNavClick(e) {
    var eventTarget = getEventTarget(e);
    var isPrevMonth = self.prevMonthNav.contains(eventTarget);
    var isNextMonth = self.nextMonthNav.contains(eventTarget);
    if (isPrevMonth || isNextMonth) {
      changeMonth(isPrevMonth ? -1 : 1);
    } else if (self.yearElements.indexOf(eventTarget) >= 0) {
      eventTarget.select();
    } else if (eventTarget.classList.contains("arrowUp")) {
      self.changeYear(self.currentYear + 1);
    } else if (eventTarget.classList.contains("arrowDown")) {
      self.changeYear(self.currentYear - 1);
    }
  }
  function timeWrapper(e) {
    e.preventDefault();
    var isKeyDown = e.type === "keydown", eventTarget = getEventTarget(e), input = eventTarget;
    if (self.amPM !== void 0 && eventTarget === self.amPM) {
      self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
    }
    var min2 = parseFloat(input.getAttribute("min")), max2 = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);
    var newValue = curValue + step * delta;
    if (typeof input.value !== "undefined" && input.value.length === 2) {
      var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
      if (newValue < min2) {
        newValue = max2 + newValue + int(!isHourElem) + (int(isHourElem) && int(!self.amPM));
        if (isMinuteElem)
          incrementNumInput(void 0, -1, self.hourElement);
      } else if (newValue > max2) {
        newValue = input === self.hourElement ? newValue - max2 - int(!self.amPM) : min2;
        if (isMinuteElem)
          incrementNumInput(void 0, 1, self.hourElement);
      }
      if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {
        self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
      }
      input.value = pad(newValue);
    }
  }
  init();
  return self;
}
function _flatpickr(nodeList, config) {
  var nodes = Array.prototype.slice.call(nodeList).filter(function(x) {
    return x instanceof HTMLElement;
  });
  var instances = [];
  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    try {
      if (node.getAttribute("data-fp-omit") !== null)
        continue;
      if (node._flatpickr !== void 0) {
        node._flatpickr.destroy();
        node._flatpickr = void 0;
      }
      node._flatpickr = FlatpickrInstance(node, config || {});
      instances.push(node._flatpickr);
    } catch (e) {
      console.error(e);
    }
  }
  return instances.length === 1 ? instances[0] : instances;
}
if (typeof HTMLElement !== "undefined" && typeof HTMLCollection !== "undefined" && typeof NodeList !== "undefined") {
  HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function(config) {
    return _flatpickr(this, config);
  };
  HTMLElement.prototype.flatpickr = function(config) {
    return _flatpickr([this], config);
  };
}
var flatpickr = function(selector, config) {
  if (typeof selector === "string") {
    return _flatpickr(window.document.querySelectorAll(selector), config);
  } else if (selector instanceof Node) {
    return _flatpickr([selector], config);
  } else {
    return _flatpickr(selector, config);
  }
};
flatpickr.defaultConfig = {};
flatpickr.l10ns = {
  en: __assign({}, default_default),
  default: __assign({}, default_default)
};
flatpickr.localize = function(l10n) {
  flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
};
flatpickr.setDefaults = function(config) {
  flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
};
flatpickr.parseDate = createDateParser({});
flatpickr.formatDate = createDateFormatter({});
flatpickr.compareDates = compareDates;
if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
  jQuery.fn.flatpickr = function(config) {
    return _flatpickr(this, config);
  };
}
Date.prototype.fp_incr = function(days) {
  return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
};
if (typeof window !== "undefined") {
  window.flatpickr = flatpickr;
}
var esm_default = flatpickr;

// src/optionModals/fields/DateModal.ts
var DateModal = class extends import_obsidian24.Modal {
  constructor(app2, file, field, value, lineNumber = -1, inFrontMatter = false, after = false) {
    super(app2);
    this.app = app2;
    this.file = file;
    this.field = field;
    this.value = value ? value.toString().replace(/^\[\[/g, "").replace(/\]\]$/g, "") : "";
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.after = after;
    this.insertAsLink = FieldManager2.stringToBoolean(this.field.options.defaultInsertAsLink || "false") || false;
    this.format = this.field.options.dateFormat || this.field.options.defaultDateFormat;
    if (this.app.plugins.enabledPlugins.has("metadata-menu")) {
      this.plugin = this.app.plugins.plugins["metadata-menu"];
    }
  }
  onOpen() {
    const fieldContainer = this.contentEl.createDiv({ cls: "metadata-menu-modal-value" });
    this.buildForm(fieldContainer);
  }
  buildForm(parentContainer) {
    const form = parentContainer.createEl("form");
    form.type = "submit";
    this.buildInputEl(form);
    this.errorField = form.createEl("div", { cls: "metadata-menu-modal-value-error-field" });
    this.errorField.hide();
    this.buildInsertAsLinkToggler(form);
    const saveBtnContainer = form.createEl("div", { cls: "metadata-menu-value-grid-footer" });
    const saveBtn = new import_obsidian24.ButtonComponent(saveBtnContainer);
    saveBtn.setIcon("checkmark");
    form.onsubmit = (e) => __async(this, null, function* () {
      e.preventDefault();
      let newValue;
      if (app.plugins.enabledPlugins.has("nldates-obsidian")) {
        try {
          const nldates = app.plugins.plugins["nldates-obsidian"];
          newValue = nldates.parseDate(this.value).moment;
        } catch (error) {
          newValue = (0, import_obsidian25.moment)(this.value, this.format);
        }
      } else {
        newValue = (0, import_obsidian25.moment)(this.value, this.format);
      }
      if (newValue.isValid()) {
        const linkPath = app.metadataCache.getFirstLinkpathDest(this.field.options.linkPath || "" + newValue.format(this.format), this.file.path);
        const formattedValue = this.insertAsLink ? `[[${this.field.options.linkPath || ""}${newValue.format(this.format)}${linkPath ? "|" + linkPath.basename : ""}]]` : newValue.format(this.format);
        if (this.lineNumber == -1) {
          yield replaceValues(this.app, this.file, this.field.name, formattedValue);
        } else {
          yield insertValues(this.app, this.file, this.field.name, formattedValue, this.lineNumber, this.inFrontmatter, this.after);
        }
        ;
        this.close();
      } else if (!this.value) {
        if (this.lineNumber == -1) {
          yield replaceValues(this.app, this.file, this.field.name, "");
        } else {
          yield insertValues(this.app, this.file, this.field.name, "", this.lineNumber, this.inFrontmatter, this.after);
        }
        ;
        this.close();
      } else {
        this.errorField.show();
        this.errorField.setText(`value must be a valid date`);
        this.inputEl.inputEl.addClass("is-invalid");
        return;
      }
    });
  }
  buildInsertAsLinkToggler(form) {
    const togglerContainer = form.createDiv({ cls: "metadata-menu-toggler-with-label" });
    const togglerContainerLabel = togglerContainer.createDiv({
      cls: "metadata-menu-toggler-label"
    });
    togglerContainerLabel.setText("Insert as link");
    const toggleEl = new import_obsidian24.ToggleComponent(togglerContainer);
    toggleEl.setValue(FieldManager2.stringToBoolean(this.field.options.defaultInsertAsLink || "false"));
    toggleEl.onChange((value) => {
      this.insertAsLink = value;
    });
  }
  buildInputEl(form) {
    var _a;
    const inputContainer = form.createDiv({ cls: "metadata-menu-dateinput-with-picker" });
    this.inputEl = new import_obsidian24.TextComponent(inputContainer);
    this.inputEl.inputEl.focus();
    let currentDateValue = (_a = this.value.replace(/^\[\[/g, "").replace(/\]\]$/g, "").split("|").first()) == null ? void 0 : _a.split("/").last();
    this.inputEl.setPlaceholder(currentDateValue ? (0, import_obsidian25.moment)(currentDateValue, this.field.options.dateFormat).format(this.field.options.dateFormat) : "");
    this.inputEl.inputEl.addClass("metadata-menu-prompt-input");
    this.inputEl.onChange((value) => {
      this.inputEl.inputEl.removeClass("is-invalid");
      this.errorField.hide();
      this.errorField.setText("");
      this.value = value;
    });
    const calendarDisplayBtn = inputContainer.createEl("button", { cls: "metadata-menu-calendar-display-btn" });
    (0, import_obsidian24.setIcon)(calendarDisplayBtn, FieldIcon["Date" /* Date */]);
    const datePickerContainer = form.createDiv({ cls: "metadata-menu-picker-container" });
    const datePicker = esm_default(datePickerContainer, {
      locale: {
        firstDayOfWeek: this.plugin.settings.firstDayOfWeek
      }
    });
    datePicker.config.onChange.push((value) => {
      const newDate = (0, import_obsidian25.moment)(value.toString()).format(this.format);
      this.inputEl.setValue(newDate);
      this.value = newDate;
    });
    calendarDisplayBtn.onclick = (e) => {
      e.preventDefault();
      datePicker.setDate(datePicker.parseDate(this.inputEl.getValue()) || new Date());
      datePicker.open();
    };
  }
};

// src/fields/fieldManagers/DateField.ts
var DateField = class extends FieldManager2 {
  constructor(field) {
    super(field, "Date" /* Date */);
    this.defaultDateFormat = "YYYY-MM-DD";
  }
  addFieldOption(name, value, app2, file, location) {
    const modal = new DateModal(app2, file, this.field, value);
    modal.titleEl.setText(`Change date for <${name}>`);
    if (DateField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon(FieldIcon["Date" /* Date */]);
        item.onClick(() => modal.open());
        item.setSection("metadata-menu.fields");
      });
    } else if (DateField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action: () => modal.open(),
        icon: FieldIcon["Date" /* Date */]
      });
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, value, lineNumber, inFrontmatter, after) {
    const fieldModal = new DateModal(app2, file, this.field, value || "", lineNumber, inFrontmatter, after);
    fieldModal.titleEl.setText(`Enter date for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDateContainer(parentContainer) {
    if (!this.field.options.dateFormat)
      this.field.options.dateFormat = this.defaultDateFormat;
    if (!this.field.options.defaultInsertAsLink)
      this.field.options.defaultInsertAsLink = "false";
    const dateFormatContainer = parentContainer.createDiv();
    dateFormatContainer.createEl("span", { text: "Date format", cls: "metadata-menu-field-option" });
    const dateFormatInput = new import_obsidian26.TextComponent(dateFormatContainer);
    dateFormatInput.setValue(this.field.options.dateFormat);
    const dateExample = dateFormatContainer.createEl("span", { text: "", cls: "metadata-menu-field-option" });
    dateExample.setText(`example: ${(0, import_obsidian26.moment)().format(dateFormatInput.getValue())}`);
    dateFormatInput.onChange((value) => {
      this.field.options.dateFormat = value;
      dateExample.setText(`example: ${(0, import_obsidian26.moment)().format(value)}`);
    });
    const dateLinkPathContainer = parentContainer.createDiv();
    dateLinkPathContainer.createEl("span", { text: "Link path (optional)", cls: "metadata-menu-field-option" });
    const dateLinkPathInput = new import_obsidian26.TextComponent(dateLinkPathContainer);
    dateLinkPathInput.setValue(this.field.options.linkPath);
    dateLinkPathInput.onChange((value) => {
      this.field.options.linkPath = value.endsWith("/") ? value : value + "/";
    });
    const defaultInsertAsLinkContainer = parentContainer.createDiv();
    defaultInsertAsLinkContainer.createEl("span", { text: "Insert as link by default", cls: "metadata-menu-field-option" });
    const defaultInsertAsLink = new import_obsidian26.ToggleComponent(defaultInsertAsLinkContainer);
    defaultInsertAsLink.setValue(DateField.stringToBoolean(this.field.options.defaultInsertAsLink));
    defaultInsertAsLink.onChange((value) => {
      this.field.options.defaultInsertAsLink = value.toString();
    });
  }
  createSettingContainer(parentContainer, plugin, location) {
    this.dateValidatorField = parentContainer.createDiv({ cls: "metadata-menu-number-options" });
    this.createDateContainer(this.dateValidatorField);
    this.dateValidatorField.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const dateBtn = document.createElement("button");
      (0, import_obsidian26.setIcon)(dateBtn, FieldIcon["Date" /* Date */]);
      dateBtn.addClass("metadata-menu-dv-field-button");
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const file = app.vault.getAbstractFileByPath(p["file"]["path"]);
      let fieldModal;
      if (file instanceof import_obsidian26.TFile && file.extension == "md") {
        if (p[this.field.name] && p[this.field.name].hasOwnProperty("path")) {
          const dateFile = app.vault.getAbstractFileByPath(p[this.field.name]);
          if (dateFile instanceof import_obsidian26.TFile && dateFile.extension == "md") {
            fieldModal = new DateModal(app, file, this.field, dateFile.name);
          } else {
            fieldModal = new DateModal(app, file, this.field, p[this.field.name].path.split("/").last().replace(".md", ""));
          }
        } else if (p[this.field.name]) {
          fieldModal = new DateModal(app, file, this.field, p[this.field.name]);
        } else {
          fieldModal = new DateModal(app, file, this.field, "");
        }
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
      fieldModal.onClose = () => {
        fieldModal.contentEl.innerHTML = "";
      };
      dateBtn.onclick = () => {
        fieldModal.open();
      };
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        dateBtn.hide();
        spacer.show();
        fieldContainer.onmouseover = () => {
          dateBtn.show();
          spacer.hide();
        };
        fieldContainer.onmouseout = () => {
          dateBtn.hide();
          spacer.show();
        };
      }
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(dateBtn);
      fieldContainer.appendChild(spacer);
    });
  }
  getOptionsStr() {
    return this.field.options.dateFormat;
  }
  validateOptions() {
    return true;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      var _a;
      return (0, import_obsidian26.moment)((_a = value.replace(/^\[\[/g, "").replace(/\]\]$/g, "").split("|").first()) == null ? void 0 : _a.split("/").last(), this.field.options.dateFormat).isValid();
    });
  }
};

// src/fields/fieldManagers/MultiFileField.ts
var import_obsidian28 = require("obsidian");

// src/optionModals/fields/MultiFileModal.ts
var import_obsidian27 = require("obsidian");
var MultiFileFuzzySuggester = class extends import_obsidian27.FuzzySuggestModal {
  constructor(app2, file, field, initialValueObject, lineNumber = -1, inFrontMatter = false, after = false) {
    var _a;
    super(app2);
    this.selectedFiles = [];
    this.app = app2;
    this.file = file;
    this.field = field;
    this.lineNumber = lineNumber;
    this.inFrontmatter = inFrontMatter;
    this.after = after;
    const dvApi = (_a = this.app.plugins.plugins["dataview"]) == null ? void 0 : _a.api;
    if (dvApi) {
      const selectedValues = Array.isArray(initialValueObject) ? initialValueObject : [initialValueObject];
      selectedValues.forEach((value) => {
        if (dvApi.value.isLink(value)) {
          const file2 = this.app.vault.getAbstractFileByPath(value.path);
          if (file2 instanceof import_obsidian27.TFile)
            this.selectedFiles.push(file2);
        }
      });
    }
  }
  onOpen() {
    const buttonContainer = this.containerEl.createDiv({ cls: "metadata-menu-value-suggester-actions" });
    buttonContainer.createDiv({ cls: "metadata-menu-value-suggester-actions-spacer" });
    const confirmButton = new import_obsidian27.ButtonComponent(buttonContainer);
    confirmButton.setIcon("checkmark");
    confirmButton.onClick(() => __async(this, null, function* () {
      yield this.replaceValues();
      this.close();
    }));
    confirmButton.buttonEl.addClass("metadata-menu-value-suggester-button");
    const cancelButton = new import_obsidian27.ButtonComponent(buttonContainer);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => {
      this.close();
    });
    cancelButton.buttonEl.addClass("metadata-menu-value-suggester-button");
    const clearButton = new import_obsidian27.ButtonComponent(buttonContainer);
    clearButton.setIcon("trash");
    clearButton.onClick(() => __async(this, null, function* () {
      yield this.clearValues();
      this.close();
    }));
    clearButton.buttonEl.addClass("metadata-menu-value-suggester-button");
    clearButton.buttonEl.addClass("danger");
    this.modalEl.insertBefore(buttonContainer, this.modalEl.childNodes[0]);
    super.onOpen();
  }
  getItems() {
    try {
      const fileManager = new FieldManager[this.field.type](this.field);
      return fileManager.getFiles();
    } catch (error) {
      this.close();
      throw error;
    }
  }
  getItemText(item) {
    return item.basename;
  }
  replaceValues() {
    return __async(this, null, function* () {
      const result = this.selectedFiles.map((file) => FieldManager2.buildMarkDownLink(this.app, this.file, file.basename));
      if (this.lineNumber == -1) {
        yield replaceValues(this.app, this.file, this.field.name, result.join(", "));
      } else {
        yield insertValues(this.app, this.file, this.field.name, result.join(", "), this.lineNumber, this.inFrontmatter, this.after);
      }
      ;
    });
  }
  clearValues() {
    return __async(this, null, function* () {
      yield replaceValues(this.app, this.file, this.field.name, "");
    });
  }
  renderSuggestion(value, el) {
    el.setText(value.item.basename);
    el.addClass("metadata-menu-value-suggester-value-container");
    const spacer = this.containerEl.createDiv({ cls: "metadata-menu-value-suggester-value-container-spacer" });
    el.appendChild(spacer);
    if (this.selectedFiles.some((file) => file.path === value.item.path)) {
      el.addClass("metadata-menu-value-selected");
      const iconContainer = el.createDiv({ cls: "metadata-menu-command-suggest-icon" });
      (0, import_obsidian27.setIcon)(iconContainer, "check-circle");
    }
    this.inputEl.focus();
  }
  renderSelected() {
    const chooser = this.chooser;
    const suggestions = chooser.suggestions;
    const values = chooser.values;
    suggestions.forEach((s, i) => {
      if (this.selectedFiles.some((file) => file.path === values[i].item.path)) {
        s.addClass("metadata-menu-value-selected");
        if (s.querySelectorAll(".metadata-menu-command-suggest-icon").length == 0) {
          const iconContainer = s.createDiv({ cls: "metadata-menu-command-suggest-icon" });
          (0, import_obsidian27.setIcon)(iconContainer, "check-circle");
        }
      } else {
        s.removeClass("metadata-menu-value-selected");
        s.querySelectorAll(".metadata-menu-command-suggest-icon").forEach((icon) => icon.remove());
      }
    });
  }
  selectSuggestion(value, evt) {
    if (this.selectedFiles.includes(value.item)) {
      this.selectedFiles.remove(value.item);
    } else {
      this.selectedFiles.push(value.item);
    }
    this.renderSelected();
  }
  onChooseItem(item) {
    return __async(this, null, function* () {
    });
  }
};

// src/fields/fieldManagers/MultiFileField.ts
var MultiFileField = class extends FieldManager2 {
  constructor(field) {
    super(field, "MultiFile" /* MultiFile */);
    this.getFiles = () => {
      const getResults = (api) => {
        try {
          return new Function("dv", `return ${this.field.options.dvQueryString}`)(api);
        } catch (error) {
          new import_obsidian28.Notice(`Wrong query for field <${this.field.name}>
check your settings`, 3e3);
        }
      };
      const dataview = app.plugins.plugins["dataview"];
      if (this.field.options.dvQueryString && (dataview == null ? void 0 : dataview.settings.enableDataviewJs) && (dataview == null ? void 0 : dataview.settings.enableInlineDataviewJs)) {
        try {
          const filesPath = getResults(dataview.api).values.map((v) => v.file.path);
          return app.vault.getMarkdownFiles().filter((f) => filesPath.includes(f.path));
        } catch (error) {
          throw error;
        }
      } else {
        return app.vault.getMarkdownFiles();
      }
    };
  }
  static buildMarkDownLink(app2, file, path) {
    const destFile = app2.metadataCache.getFirstLinkpathDest(path, file.path);
    if (destFile) {
      return app2.fileManager.generateMarkdownLink(destFile, file.path, void 0, destFile.basename);
    }
    return "";
  }
  addFieldOption(name, value, app2, file, location) {
    const modal = new MultiFileFuzzySuggester(app2, file, this.field, value);
    if (MultiFileField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon(FieldIcon["File" /* File */]);
        item.onClick(() => modal.open());
        item.setSection("metadata-menu.fields");
      });
    } else if (MultiFileField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action: () => modal.open(),
        icon: FieldIcon["File" /* File */]
      });
    }
    ;
  }
  createAndOpenFieldModal(app2, file, selectedFieldName, value, lineNumber, inFrontmatter, after) {
    const fieldModal = new MultiFileFuzzySuggester(app2, file, this.field, value, lineNumber, inFrontmatter, after);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(plugin, dv, p, fieldContainer, attrs) {
    return __async(this, null, function* () {
      var _a;
      const fieldValue = dv.el("span", p[this.field.name], attrs);
      const searchBtn = document.createElement("button");
      (0, import_obsidian28.setIcon)(searchBtn, FieldIcon["File" /* File */]);
      searchBtn.addClass("metadata-menu-dv-field-button");
      const spacer = document.createElement("div");
      spacer.setAttr("class", "metadata-menu-dv-field-spacer");
      const file = app.vault.getAbstractFileByPath(p["file"]["path"]);
      let fieldModal;
      if (file instanceof import_obsidian28.TFile && file.extension == "md") {
        fieldModal = new MultiFileFuzzySuggester(app, file, this.field, p[this.field.name]);
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
      searchBtn.onclick = () => {
        fieldModal.open();
      };
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
        searchBtn.hide();
        spacer.show();
        fieldContainer.onmouseover = () => {
          searchBtn.show();
          spacer.hide();
        };
        fieldContainer.onmouseout = () => {
          searchBtn.hide();
          spacer.show();
        };
      }
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(searchBtn);
      fieldContainer.appendChild(spacer);
    });
  }
  createFileContainer(parentContainer) {
    const dvQueryStringContainer = parentContainer.createDiv();
    dvQueryStringContainer.createEl("span", { text: "Dataview Query (optional)", cls: "metadata-menu-field-option" });
    this.dvQueryString = new import_obsidian28.TextAreaComponent(dvQueryStringContainer);
    this.dvQueryString.inputEl.cols = 50;
    this.dvQueryString.inputEl.rows = 4;
    this.dvQueryString.setValue(this.field.options.dvQueryString || "");
    this.dvQueryString.onChange((value) => {
      this.field.options.dvQueryString = value;
      FieldSettingsModal.removeValidationError(this.dvQueryString);
    });
  }
  createSettingContainer(parentContainer, plugin, location) {
    this.fileValidatorField = parentContainer.createDiv({ cls: "metadata-menu-number-options" });
    this.createFileContainer(this.fileValidatorField);
    this.fileValidatorField.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  getOptionsStr() {
    return this.field.options.dvQueryString || "";
  }
  validateOptions() {
    return true;
  }
  validateValue(value) {
    return __async(this, null, function* () {
      const basename = value.trim().replace(/^\[\[/g, "").replace(/\]\]$/g, "");
      return !!this.getFiles().map((f) => f.basename).find((item) => item === basename);
    });
  }
};

// src/fields/fieldManagers/Managers.ts
var Managers = {
  Input: InputField,
  Boolean: BooleanField,
  Number: NumberField,
  Select: SelectField,
  Cycle: CycleField,
  Multi: MultiField,
  File: FileField,
  Date: DateField,
  MultiFile: MultiFileField
};
var Managers_default = Managers;

// src/types/fieldTypes.ts
var FieldTypeLabelMapping = {
  "Input": "Input" /* Input */,
  "Select": "Select" /* Select */,
  "Multi": "Multi" /* Multi */,
  "Cycle": "Cycle" /* Cycle */,
  "Boolean": "Boolean" /* Boolean */,
  "Number": "Number" /* Number */,
  "File": "File" /* File */,
  "MultiFile": "MultiFile" /* MultiFile */,
  "Date": "Date" /* Date */
};
var FieldTypeTagClass = {
  "Input": "single",
  "Select": "select",
  "Multi": "multi",
  "Cycle": "cycle",
  "Boolean": "boolean",
  "Number": "number",
  "File": "file",
  "MultiFile": "file",
  "Date": "date"
};
var FieldTypeTooltip = {
  "Input": "Accept any value",
  "Select": "Accept a single value from a list",
  "Multi": "Accept multiple values from a list",
  "Cycle": "Cycle through values from a list",
  "Boolean": "Accept true of false",
  "Number": "Accept a number",
  "File": "Accept a link",
  "MultiFile": "Accept multiple links",
  "Date": "Accept a date"
};
var FieldManager = {
  "Input": Managers_default.Input,
  "Select": Managers_default.Select,
  "Multi": Managers_default.Multi,
  "Cycle": Managers_default.Cycle,
  "Boolean": Managers_default.Boolean,
  "Number": Managers_default.Number,
  "File": Managers_default.File,
  "MultiFile": Managers_default.MultiFile,
  "Date": Managers_default.Date
};
var FieldIcon = {
  "Input": "pencil",
  "Select": "right-triangle",
  "Multi": "bullet-list",
  "Cycle": "switch",
  "Boolean": "checkmark",
  "Number": "plus-minus-glyph",
  "File": "link",
  "MultiFile": "link",
  "Date": "calendar-with-checkmark"
};

// src/fields/Field.ts
var Field = class {
  constructor(name = "", options = {}, id = "", valuesListNotePath = "", type = "Input" /* Input */) {
    this.name = name;
    this.options = options;
    this.id = id;
    this.valuesListNotePath = valuesListNotePath;
    this.type = type;
    this.insertNewValue.bind(this);
  }
  insertNewValue(value) {
    return __async(this, null, function* () {
      let newKey = 1;
      Object.keys(this.options).forEach((key) => {
        if (parseInt(key) && parseInt(key) >= newKey) {
          newKey = parseInt(key) + 1;
        }
        ;
      });
      this.options[newKey.toString()] = value;
      return newKey.toString();
    });
  }
  static copyProperty(target, source) {
    target.id = source.id;
    target.name = source.name;
    target.valuesListNotePath = source.valuesListNotePath;
    target.type = source.type;
    Object.keys(source.options).forEach((k) => {
      target.options[k] = source.options[k];
    });
    Object.keys(target.options).forEach((k) => {
      if (!Object.keys(source.options).includes(k)) {
        delete target.options[k];
      }
      ;
    });
  }
  static createDefault(name) {
    const field = new Field();
    field.type = "Input" /* Input */;
    field.name = name;
    return field;
  }
};
var Field_default = Field;

// src/fileClass/fileClassAttribute.ts
var FileClassAttribute = class {
  constructor(origin, name, type = "Input" /* Input */, options = []) {
    this.origin = origin;
    this.name = name;
    this.type = type;
    this.options = options;
  }
  getField() {
    var _a;
    let options = {};
    if (Array.isArray(this.options)) {
      (_a = this.options) == null ? void 0 : _a.forEach((option, index) => {
        options[index] = option;
      });
    } else {
      options = this.options;
    }
    return new Field_default(this.name, options, this.name, void 0, this.type);
  }
};

// src/fileClass/fileClass.ts
var import_obsidian29 = require("obsidian");

// src/utils/textUtils.ts
var capitalize = (s) => {
  return s && s[0].toUpperCase() + s.slice(1);
};

// src/utils/dataviewUtils.ts
function genuineKeys(dvFile) {
  const genuineKeys2 = [];
  Object.keys(dvFile).forEach((key) => {
    if (!genuineKeys2.map((k) => k.toLowerCase().replace(/\s/g, "-")).includes(key.toLowerCase().replace(/\s/g, "-"))) {
      genuineKeys2.push(key);
    } else {
      if (key !== key.toLowerCase().replace(/\s/g, "-")) {
        genuineKeys2[genuineKeys2.indexOf(key.toLowerCase().replace(/\s/g, "-"))] = key;
      }
    }
  });
  return genuineKeys2;
}

// src/fileClass/fileClass.ts
var FileClassManager = class {
  constructor(instance) {
    this.instance = instance;
  }
  all() {
    const filesWithFileClassName = this.instance.plugin.app.vault.getMarkdownFiles().filter((file) => {
      const cache = this.instance.plugin.app.metadataCache.getFileCache(file);
      const fileClassAlias = this.instance.plugin.settings.fileClassAlias;
      return (cache == null ? void 0 : cache.frontmatter) && Object.keys(cache.frontmatter).includes(fileClassAlias) && cache.frontmatter[fileClassAlias] == this.instance.name;
    });
    return filesWithFileClassName;
  }
  get(name) {
    const filesWithName = this.all().filter((file) => file.basename == name);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
  getPath(path) {
    const filesWithName = this.all().filter((file) => file.path == path);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
};
var FileClass = class {
  constructor(plugin, name) {
    this.plugin = plugin;
    this.name = name;
    this.objects = new FileClassManager(this);
    this.attributes = [];
  }
  getClassFile() {
    const filesClassPath = this.plugin.settings.classFilesPath;
    const file = this.plugin.app.vault.getAbstractFileByPath(`${filesClassPath}${this.name}.md`);
    if (file instanceof import_obsidian29.TFile && file.extension == "md") {
      return file;
    } else {
      const error = new Error(`no file named <${this.name}.md> in <${filesClassPath}> folder to match <${this.plugin.settings.fileClassAlias}: ${this.name}> in one of these notes`);
      throw error;
    }
  }
  getParentClass() {
    return;
  }
  getAttributes(excludeParents = false) {
    var _a, _b, _c, _d;
    try {
      const file = this.getClassFile();
      let parentAttributes = [];
      let errors = [];
      const parent = (_b = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.extends;
      const excludedFields = (_d = (_c = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _c.frontmatter) == null ? void 0 : _d.excludes;
      if (parent && !excludeParents) {
        try {
          const parentFileClass = FileClass.createFileClass(this.plugin, parent);
          parentFileClass.getAttributes();
          parentAttributes = Array.isArray(excludedFields) ? [...parentFileClass.attributes.filter((attr) => !excludedFields.includes(attr.name))] : [...parentFileClass.attributes];
        } catch (error) {
          errors.push(error);
        }
      }
      let attributes = [];
      const dataview = app.plugins.plugins["dataview"];
      if (dataview) {
        const dvFile = dataview.api.page(file.path);
        try {
          genuineKeys(dvFile).forEach((key) => {
            if (key !== "file") {
              const item = typeof dvFile[key] !== "string" ? JSON.stringify(dvFile[key]) : dvFile[key];
              try {
                const { type, options } = JSON.parse(item);
                const fieldType = FieldTypeLabelMapping[capitalize(type)];
                const attr = new FileClassAttribute(this.name, key, fieldType, options);
                attributes.push(attr);
              } catch (e) {
              }
            }
          });
        } catch (error) {
          throw error;
        }
      }
      this.attributes = parentAttributes.filter((attr) => !attributes.map((_attr) => _attr.name).includes(attr.name)).concat(attributes.filter((p) => {
        var _a2;
        return !Object.keys(((_a2 = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a2.frontmatter) || {}).includes(p.name);
      }));
      this.errors = errors;
    } catch (error) {
      throw error;
    }
  }
  updateAttribute(newType, newName, newOptions, attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      let result = yield this.plugin.app.vault.read(file);
      if (attr) {
        let newContent = [];
        result.split("\n").forEach((line) => {
          if (line.startsWith(attr.name)) {
            let settings = {};
            settings["type"] = newType;
            if (newOptions)
              settings["options"] = newOptions;
            newContent.push(`${newName}:: ${JSON.stringify(settings)}`);
          } else {
            newContent.push(line);
          }
        });
        this.plugin.app.vault.modify(file, newContent.join("\n"));
      } else {
        let settings = {};
        settings["type"] = newType;
        if (newOptions)
          settings["options"] = newOptions;
        result += `
${newName}:: ${JSON.stringify(settings)}`;
        yield this.plugin.app.vault.modify(file, result);
      }
    });
  }
  removeAttribute(attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      const result = yield this.plugin.app.vault.read(file);
      let newContent = [];
      result.split("\n").forEach((line) => {
        if (!line.startsWith(attr.name)) {
          newContent.push(line);
        }
      });
      yield this.plugin.app.vault.modify(file, newContent.join("\n"));
    });
  }
  static createFileClass(plugin, name, excludeParent = false) {
    const fileClass = new FileClass(plugin, name);
    fileClass.getAttributes(excludeParent);
    return fileClass;
  }
};

// src/fileClass/FileClassAttributeModal.ts
var import_obsidian30 = require("obsidian");
var FileClassAttributeModal = class extends import_obsidian30.Modal {
  constructor(plugin, fileClass, attr) {
    super(plugin.app);
    this.plugin = plugin;
    this.attr = attr;
    this.fileClass = fileClass;
    this.initialField = new Field_default();
    if (this.attr) {
      this.field = attr.getField();
      Field_default.copyProperty(this.initialField, this.field);
    } else {
      this.field = new Field_default();
    }
    this.fieldManager = new FieldManager[this.field.type](this.field);
    this.nameInputContainer = this.contentEl.createDiv();
    this.typeSelectContainer = this.contentEl.createDiv({ cls: "metadata-menu-value-selector-container" });
    this.fieldOptionsContainer = this.contentEl.createDiv();
  }
  buildNameInputContainer() {
    this.nameInputContainer.setText("Name: ");
    this.nameInput = new import_obsidian30.TextComponent(this.nameInputContainer);
    this.attr ? this.nameInput.setValue(this.field.name) : this.nameInput.setPlaceholder("Type a name for this attribute");
    this.nameInput.inputEl.focus();
    this.nameInput.onChange((value) => {
      this.field.name = value;
      this.attrName.setText(`<${value}>`);
    });
    this.typeSelectContainer.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
  }
  buildTypeSelectContainer() {
    const typeSelectHeader = this.typeSelectContainer.createDiv();
    const attrLine = typeSelectHeader.createEl("div");
    this.attrName = attrLine.createEl("strong");
    this.attrName.setText(`<${this.field.name}>`);
    attrLine.append(" fields in files with:");
    String(`---
${this.plugin.settings.fileClassAlias}: ${this.fileClass.name}
...
---`).split("\n").forEach((line) => {
      typeSelectHeader.createEl("div", "yaml-metadata-menu-red").setText(line);
    });
    const typeSelectLabel = this.typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-inline-label" });
    typeSelectLabel.setText("will: ");
    const typeSelectDropDown = this.typeSelectContainer.createDiv({ cls: "metadata-menu-value-selector-toggler" });
    const typeSelect = new import_obsidian30.DropdownComponent(typeSelectDropDown);
    Object.keys(FieldTypeTooltip).forEach((key) => typeSelect.addOption(key, FieldTypeTooltip[key]));
    typeSelect.setValue(this.field.type);
    typeSelect.onChange((typeLabel) => {
      this.field = new Field_default();
      Field_default.copyProperty(this.field, this.initialField);
      this.field.name = this.nameInput.getValue();
      this.field.type = FieldTypeLabelMapping[typeLabel];
      if (this.field.type !== this.initialField.type && ![this.field.type, this.initialField.type].every((fieldType) => ["Multi" /* Multi */, "Select" /* Select */, "Cycle" /* Cycle */].includes(fieldType))) {
        this.field.options = {};
      }
      while (this.fieldOptionsContainer.firstChild) {
        this.fieldOptionsContainer.removeChild(this.fieldOptionsContainer.firstChild);
      }
      this.fieldManager = new FieldManager[this.field.type](this.field);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 1 /* FileClassAttributeSettings */);
    });
  }
  validateFields() {
    return this.fieldManager.validateName(this.nameInput, this.nameInput.inputEl) && this.fieldManager.validateOptions();
  }
  createSaveBtn(container) {
    const saveButton = new import_obsidian30.ButtonComponent(container);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => {
      let error = !this.validateFields();
      if (error) {
        new import_obsidian30.Notice("Fix errors before saving.");
        return;
      }
      ;
      this.fileClass.updateAttribute(this.field.type, this.field.name, this.field.options, this.attr);
      this.close();
    });
  }
  createRemovelBtn(container) {
    const removeButton = new import_obsidian30.ButtonComponent(container);
    removeButton.setIcon("trash");
    removeButton.onClick(() => {
      var _a;
      const confirmModal = new import_obsidian30.Modal(this.plugin.app);
      confirmModal.titleEl.setText("Please confirm");
      confirmModal.contentEl.createDiv().setText(`Do you really want to remove ${(_a = this.attr) == null ? void 0 : _a.name} attribute from ${this.fileClass.name}?`);
      const confirmFooter = confirmModal.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
      const confirmButton = new import_obsidian30.ButtonComponent(confirmFooter);
      confirmButton.setIcon("checkmark");
      confirmButton.onClick(() => {
        if (this.attr)
          this.fileClass.removeAttribute(this.attr);
        confirmModal.close();
        this.close();
      });
      const dismissButton = new import_obsidian30.ExtraButtonComponent(confirmFooter);
      dismissButton.setIcon("cross");
      dismissButton.onClick(() => this.close());
      confirmModal.open();
    });
  }
  createCancelBtn(container) {
    const cancelButton = new import_obsidian30.ExtraButtonComponent(container);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => this.close());
  }
  onOpen() {
    this.titleEl.setText(this.attr ? `Manage ${this.attr.name}` : `Create a new attribute for ${this.fileClass.name}`);
    this.buildNameInputContainer();
    this.buildTypeSelectContainer();
    this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 1 /* FileClassAttributeSettings */);
    const footer = this.contentEl.createDiv({ cls: "metadata-menu-value-grid-footer" });
    this.createSaveBtn(footer);
    if (this.attr)
      this.createRemovelBtn(footer);
    this.createCancelBtn(footer);
  }
};

// src/fileClass/FileClassQuery.ts
var FileClassQuery = class {
  constructor(name = "", id = "", query = "", fileClassName = "") {
    this.name = name;
    this.query = query;
    this.id = id;
    this.fileClassName = fileClassName;
  }
  matchFile(file) {
    const getResults = (api) => {
      try {
        return new Function("dv", `return ${this.query}`)(api);
      } catch (error) {
        throw Error(`Wrong query for field <${this.name}>. Check your settings`);
      }
    };
    const dataview = app.plugins.plugins["dataview"];
    if (this.query && (dataview == null ? void 0 : dataview.settings.enableDataviewJs) && (dataview == null ? void 0 : dataview.settings.enableInlineDataviewJs)) {
      try {
        const filesPath = getResults(dataview.api).values.map((v) => v.file.path);
        return filesPath.includes(file.path);
      } catch (error) {
        return false;
      }
    } else {
      return false;
    }
  }
  static copyProperty(target, source) {
    target.id = source.id;
    target.name = source.name;
    target.query = source.query;
    target.fileClassName = source.fileClassName;
  }
};
var FileClassQuery_default = FileClassQuery;

// src/commands/getValues.ts
var import_obsidian31 = require("obsidian");
function getValues(app2, fileOrfilePath, attribute) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrfilePath instanceof import_obsidian31.TFile) {
      file = fileOrfilePath;
    } else {
      const _file = app2.vault.getAbstractFileByPath(fileOrfilePath);
      if (_file instanceof import_obsidian31.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const content = (yield app2.vault.cachedRead(file)).split("\n");
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start: start2, end: end2 } } = frontmatter ? frontmatter : { position: { start: void 0, end: void 0 } };
    const result = [];
    content.map((line, i) => {
      if (frontmatter && i >= start2.line && i <= end2.line) {
        const regex = new RegExp(`${attribute}:(.*)`, "u");
        const r = line.match(regex);
        if (r && r.length > 0)
          result.push(r[1]);
      } else {
        const fullLineRegex2 = new RegExp(`^${inlineFieldRegex(attribute)}`, "u");
        const fR = encodeLink(line).match(fullLineRegex2);
        if (fR == null ? void 0 : fR.groups) {
          result.push(decodeLink(fR.groups.values));
        }
        ;
        const inSentenceRegexBrackets2 = new RegExp(`\\[${inlineFieldRegex(attribute)}\\]`, "gu");
        const sRB = encodeLink(line).matchAll(inSentenceRegexBrackets2);
        let next = sRB.next();
        while (!next.done) {
          if (next.value.groups) {
            result.push(decodeLink(next.value.groups.values));
          }
          next = sRB.next();
        }
        const inSentenceRegexPar2 = new RegExp(`\\(${inlineFieldRegex(attribute)}\\)`, "gu");
        const sRP = encodeLink(line).matchAll(inSentenceRegexPar2);
        next = sRP.next();
        while (!next.done) {
          if (next.value.groups) {
            result.push(decodeLink(next.value.groups.values));
          }
          next = sRP.next();
        }
      }
    });
    return result;
  });
}

// src/commands/getField.ts
function getField(plugin, propertyName, fileClass) {
  const matchingSettings = plugin.settings.presetFields.filter((p) => p.name == propertyName);
  if (fileClass) {
    const fileClassAttributesWithName = fileClass.attributes.filter((attr) => attr.name == propertyName);
    if (fileClassAttributesWithName.length > 0) {
      const fileClassAttribute = fileClassAttributesWithName[0];
      if (fileClassAttribute.type) {
        return fileClassAttribute.getField();
      } else if (matchingSettings.length > 0) {
        return matchingSettings[0];
      }
      ;
    }
  } else if (matchingSettings.length > 0) {
    return matchingSettings[0];
  }
  ;
}

// src/optionModals/chooseSectionModal.ts
var import_obsidian32 = require("obsidian");
var chooseSectionModal = class extends import_obsidian32.Modal {
  constructor(plugin, file, fileClass, fieldName) {
    super(plugin.app);
    this.file = file;
    this.plugin = plugin;
    this.fileClass = fileClass;
    this.fieldName = fieldName;
  }
  onOpen() {
    return __async(this, null, function* () {
      var _a;
      const result = yield this.app.vault.read(this.file);
      this.titleEl.setText(`Add a ${this.fieldName ? "<" + this.fieldName + "> " : ""}field in "${this.file.basename.slice(0, 30)}${this.file.basename.length < 30 ? "..." : ""}" after:`);
      const selectEl = new import_obsidian32.DropdownComponent(this.contentEl);
      selectEl.selectEl.addClass("metadata-menu-field-add-section-select");
      selectEl.addOption("", "Select line");
      selectEl.addOption("top_0", "top");
      let foreHeadText = false;
      let frontmatterStart = false;
      let frontmatterEnd = false;
      let inFrontmatter = false;
      result.split("\n").forEach((line, lineNumber) => {
        if (line != "---" && !foreHeadText && !frontmatterStart) {
          foreHeadText = true;
        }
        ;
        if (line == "---" && !foreHeadText) {
          if (!frontmatterStart) {
            frontmatterStart = true;
            inFrontmatter = true;
          } else if (!frontmatterEnd) {
            frontmatterEnd = true;
            inFrontmatter = false;
          }
          ;
        }
        if (inFrontmatter) {
          selectEl.addOption(`frontmatter_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        } else {
          selectEl.addOption(`body_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
        }
        ;
      });
      selectEl.selectEl.focus();
      selectEl.onChange(() => {
        const valueArray = selectEl.getValue().match(/(\w+)_(\d+)/);
        const position = valueArray && valueArray.length > 0 ? valueArray[1] : 0;
        const lineNumber = Number(valueArray && valueArray.length > 1 ? valueArray[2] : 0);
        const inFrontmatter2 = position == "frontmatter" ? true : false;
        const after = position == "top" ? false : true;
        FieldManager2.openFieldModal(this.plugin, this.file, this.fieldName, "", lineNumber, inFrontmatter2, after, this.fileClass);
        this.close();
      });
      if ((_a = app.metadataCache.getCache(this.file.path)) == null ? void 0 : _a.frontmatter) {
        const addToFrontMatterBtn = new import_obsidian32.ButtonComponent(this.contentEl);
        addToFrontMatterBtn.setClass("metadata-menu-field-add-frontmatter-btn");
        addToFrontMatterBtn.setButtonText("Add to frontmatter");
        addToFrontMatterBtn.onClick(() => {
          const lineNumber = app.metadataCache.getCache(this.file.path).frontmatter.position.end.line - 1;
          FieldManager2.openFieldModal(this.plugin, this.file, this.fieldName, "", lineNumber, true, false, this.fileClass);
          this.close();
        });
      }
    });
  }
};

// src/commands/fieldModifier.ts
var import_obsidian33 = require("obsidian");
function fieldModifier(plugin, dv, p, fieldName, attrs) {
  return __async(this, null, function* () {
    var _a;
    const fieldContainer = dv.el("div", "");
    fieldContainer.setAttr("class", "metadata-menu-dv-field-container");
    if (p[fieldName] === void 0) {
      if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.showAddField)) {
        const emptyField = dv.el("span", null, attrs);
        fieldContainer.appendChild(emptyField);
      } else {
        const addFieldBtn = dv.el("button", attrs);
        (0, import_obsidian33.setIcon)(addFieldBtn, "plus-with-circle");
        addFieldBtn.addClass("metadata-menu-dv-field-button");
        addFieldBtn.addClass("isolated");
        addFieldBtn.onclick = () => __async(this, null, function* () {
          var _a2, _b, _c, _d;
          const file = app.vault.getAbstractFileByPath(p.file.path);
          if (file instanceof import_obsidian33.TFile && file.extension == "md") {
            const fileClassAlias = plugin.settings.fileClassAlias;
            if (p[fileClassAlias] || plugin.settings.globalFileClass) {
              const fileClassName = p[fileClassAlias] || plugin.settings.globalFileClass;
              const fileClass = FileClass.createFileClass(plugin, fileClassName);
              if (((_a2 = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a2.inFrontmatter) && ((_b = plugin.app.metadataCache.getCache(file.path)) == null ? void 0 : _b.frontmatter)) {
                const lineNumber = plugin.app.metadataCache.getCache(file.path).frontmatter.position.end.line - 1;
                FieldManager2.openFieldModal(plugin, file, fieldName, "", lineNumber, true, false, fileClass);
              } else {
                new chooseSectionModal(plugin, file, fileClass, fieldName).open();
              }
            } else if (plugin.settings.presetFields.filter((attr) => attr.name == fieldName)) {
              const field = getField(plugin, fieldName);
              if (field == null ? void 0 : field.type) {
                if (((_c = attrs == null ? void 0 : attrs.options) == null ? void 0 : _c.inFrontmatter) && ((_d = plugin.app.metadataCache.getCache(file.path)) == null ? void 0 : _d.frontmatter)) {
                  const lineNumber = plugin.app.metadataCache.getCache(file.path).frontmatter.position.end.line - 1;
                  FieldManager2.openFieldModal(plugin, file, fieldName, "", lineNumber, true, false);
                } else {
                  new chooseSectionModal(plugin, file, void 0, fieldName).open();
                }
              } else {
                new chooseSectionModal(plugin, file, void 0).open();
              }
            } else {
              new chooseSectionModal(plugin, file, void 0).open();
            }
          } else {
            throw Error("path doesn't correspond to a proper file");
          }
        });
        fieldContainer.appendChild(addFieldBtn);
      }
    } else {
      const fileClassAlias = plugin.settings.fileClassAlias;
      if (p[fileClassAlias] || plugin.settings.globalFileClass) {
        const fileClassName = p[fileClassAlias] || plugin.settings.globalFileClass;
        const fileClass = FileClass.createFileClass(plugin, fileClassName);
        const field = getField(plugin, fieldName, fileClass);
        if (field == null ? void 0 : field.type) {
          const fieldManager = new FieldManager[field.type](field);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        } else {
          const fieldManager = FieldManager2.createDefault(fieldName);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        }
      } else if (plugin.settings.presetFields.filter((attr) => attr.name == fieldName)) {
        const field = getField(plugin, fieldName);
        if (field == null ? void 0 : field.type) {
          const fieldManager = new FieldManager[field.type](field);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        } else {
          const fieldManager = FieldManager2.createDefault(fieldName);
          yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
        }
      } else {
        const fieldManager = FieldManager2.createDefault(fieldName);
        yield fieldManager.createDvField(plugin, dv, p, fieldContainer, attrs);
      }
    }
    return fieldContainer;
  });
}

// src/commands/fileFields.ts
var import_obsidian34 = require("obsidian");
var FieldInfo = class {
  constructor() {
    this.type = void 0;
    this.sourceType = void 0;
    this.fileClass = void 0;
    this.fileClassQuery = void 0;
    this.options = void 0;
    this.isValid = void 0;
    this.value = "";
    this.valuesListNotePath = void 0;
    this.unique = true;
  }
  setInfos(plugin, fieldName, value, fileClass, matchingFileClassQuery) {
    return __async(this, null, function* () {
      this.value = value;
      this.ignoreInMenu = plugin.settings.globallyIgnoredFields.includes(fieldName);
      if (fileClass) {
        const fileClassFields = fileClass.attributes.map((attr) => attr.name);
        if (fileClassFields.includes(fieldName)) {
          const field = getField(plugin, fieldName, fileClass);
          if (field) {
            const fieldManager = new FieldManager[field.type](field);
            this.isValid = yield fieldManager.validateValue(value);
            const attribute = fileClass.attributes.filter((a) => a.name === fieldName)[0];
            this.fileClass = attribute.origin;
            this.fileClassQuery = matchingFileClassQuery;
            this.type = attribute.type;
            this.options = attribute.options;
          }
        }
      } else if (plugin.settings.presetFields.map((f) => f.name).includes(fieldName)) {
        const field = getField(plugin, fieldName);
        if (field) {
          const fieldManager = new FieldManager[field.type](field);
          this.isValid = yield fieldManager.validateValue(value);
          this.type = field.type;
          this.options = field.options;
          this.valuesListNotePath = field.valuesListNotePath;
          this.sourceType = "settings";
        }
      }
    });
  }
};
function fileFields(plugin, fileOrfilePath) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrfilePath instanceof import_obsidian34.TFile) {
      file = fileOrfilePath;
    } else {
      const _file = app.vault.getAbstractFileByPath(fileOrfilePath);
      if (_file instanceof import_obsidian34.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const frontmatter = (_a = plugin.app.metadataCache.getCache(file.path)) == null ? void 0 : _a.frontmatter;
    const fields = {};
    let fileClass;
    if (plugin.settings.globalFileClass) {
      try {
        fileClass = FileClass.createFileClass(plugin, plugin.settings.globalFileClass);
      } catch (error) {
        fileClass = void 0;
      }
    }
    const fileClassQueries = plugin.settings.fileClassQueries;
    let matchingFileClassQuery = void 0;
    if (fileClassQueries.length > 0) {
      while (!matchingFileClassQuery && fileClassQueries.length > 0) {
        const fileClassQuery = new FileClassQuery_default();
        Object.assign(fileClassQuery, fileClassQueries.pop());
        if (fileClassQuery.matchFile(file)) {
          fileClass = FileClass.createFileClass(plugin, fileClassQuery.fileClassName);
          matchingFileClassQuery = fileClassQuery.name;
        }
      }
    }
    if (frontmatter) {
      const _b = frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
      const fileClassAlias = plugin.settings.fileClassAlias;
      if (Object.keys(attributes).includes(fileClassAlias)) {
        const fileClassName = attributes[fileClassAlias];
        try {
          fileClass = FileClass.createFileClass(plugin, fileClassName);
          matchingFileClassQuery = void 0;
        } catch (error) {
          fileClass = void 0;
        }
      }
      Object.keys(attributes).forEach((key) => __async(this, null, function* () {
        const fieldInfo = new FieldInfo();
        fieldInfo.unique = !Object.keys(fields).includes(key);
        fields[key] = fieldInfo;
        yield fieldInfo.setInfos(plugin, key, attributes[key], fileClass);
      }));
    }
    const dataview = app.plugins.plugins["dataview"];
    if (dataview) {
      const dvFile = dataview.api.page(file.path);
      try {
        genuineKeys(dvFile).forEach((key) => __async(this, null, function* () {
          if (key !== "file") {
            const fieldInfo = new FieldInfo();
            fieldInfo.unique = !Object.keys(fields).includes(key);
            fields[key] = fieldInfo;
            yield fieldInfo.setInfos(plugin, key, dvFile[key], fileClass, matchingFileClassQuery);
          }
        }));
      } catch (error) {
        throw error;
      }
    }
    return fields;
  });
}

// src/MetadataMenuApi.ts
var MetadataMenuApi = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  make() {
    return {
      getValues: this.getValues(),
      replaceValues: this.replaceValues(),
      insertValues: this.insertValues(),
      fieldModifier: this.fieldModifier(),
      fileFields: this.fileFields()
    };
  }
  getValues() {
    return (fileOrFilePath, attribute) => __async(this, null, function* () {
      return getValues(this.plugin.app, fileOrFilePath, attribute);
    });
  }
  replaceValues() {
    return (fileOrFilePath, attribute, input) => __async(this, null, function* () {
      return replaceValues(this.plugin.app, fileOrFilePath, attribute, input);
    });
  }
  insertValues() {
    return (fileOrFilePath, fieldName, value, lineNumber, inFrontmatter, after) => __async(this, null, function* () {
      return insertValues(this.plugin.app, fileOrFilePath, fieldName, value, lineNumber, inFrontmatter, after);
    });
  }
  fieldModifier() {
    return (dv, p, fieldName, attrs) => fieldModifier(this.plugin, dv, p, fieldName, attrs);
  }
  fileFields() {
    return (fileOrFilePath) => __async(this, null, function* () {
      return fileFields(this.plugin, fileOrFilePath);
    });
  }
};

// src/options/FieldCommandSuggestModal.ts
var import_obsidian35 = require("obsidian");
var FieldCommandSuggestModal = class extends import_obsidian35.FuzzySuggestModal {
  constructor(app2) {
    super(app2);
    this.options = [];
    this.app = app2;
  }
  getItems() {
    return this.options;
  }
  getItemText(item) {
    return item.actionLabel;
  }
  onChooseItem(item, evt) {
    item.action();
  }
  renderSuggestion(item, el) {
    el.addClass("metadata-menu-command-suggest-item");
    const iconContainer = el.createDiv({ cls: "metadata-menu-command-suggest-icon" });
    item.item.icon ? (0, import_obsidian35.setIcon)(iconContainer, item.item.icon) : (0, import_obsidian35.setIcon)(iconContainer, "pencil");
    const actionLabel = el.createDiv({ cls: "metadata-menu-command-suggest-action-label" });
    actionLabel.innerHTML = item.item.actionLabel;
  }
};

// src/options/FileClassOptionsList.ts
function isMenu(location) {
  return location.addItem !== void 0;
}
function isInsertFieldCommand(location) {
  return location === "InsertFieldCommand";
}
function isSuggest(location) {
  return location.getItems !== void 0;
}
var FileClassOptionsList = class {
  constructor(plugin, file, location) {
    this.file = file;
    this.plugin = plugin;
    this.location = location;
    this.fileClass = FileClass.createFileClass(this.plugin, file.basename);
  }
  createExtraOptionList(openAfterCreate = true) {
    if (isMenu(this.location)) {
      this.location.addSeparator();
    }
    ;
    if (isInsertFieldCommand(this.location)) {
      const modal = new FileClassAttributeModal(this.plugin, this.fileClass);
      modal.open();
    } else if (isSuggest(this.location)) {
      this.buildFieldOptions();
      if (openAfterCreate)
        this.location.open();
    } else {
      this.buildFieldOptions();
    }
  }
  buildFieldOptions() {
    this.fileClass.attributes.forEach((attr) => {
      const modal = new FileClassAttributeModal(this.plugin, this.fileClass, attr);
      if (isMenu(this.location)) {
        this.location.addItem((item) => {
          item.setTitle(`${attr.name}`);
          item.setIcon("wrench");
          item.onClick(() => {
            modal.open();
          });
          item.setSection("metadata-menu-fileclass.fileclass-fields");
        });
      } else if (isSuggest(this.location)) {
        this.location.options.push({
          id: `update_${attr.name}`,
          actionLabel: `<span>${attr.name}</span>`,
          action: () => modal.open(),
          icon: "gear"
        });
      }
    });
    if (isMenu(this.location)) {
      this.location.addItem((item) => {
        item.setTitle("Add new fileClass attribute");
        item.setIcon("plus-circle");
        item.onClick(() => {
          const modal = new FileClassAttributeModal(this.plugin, this.fileClass);
          modal.open();
        });
        item.setSection("metadata-menu-fileclass");
      });
    } else if (isSuggest(this.location)) {
      const modal = new FileClassAttributeModal(this.plugin, this.fileClass);
      this.location.options.push({
        id: "add_fileClass_attribute",
        actionLabel: `<span>Insert an attribute for <b>${this.fileClass.name}</b> fileClass</span>`,
        action: () => {
          modal.open();
        },
        icon: "plus-circle"
      });
    }
  }
};

// src/options/linkContextMenu.ts
var import_obsidian37 = require("obsidian");

// src/options/OptionsList.ts
var import_obsidian36 = require("obsidian");
function isMenu2(location) {
  return location.addItem !== void 0;
}
function isInsertFieldCommand2(location) {
  return location === "InsertFieldCommand";
}
function isSuggest2(location) {
  return location.getItems !== void 0;
}
var OptionsList = class {
  constructor(plugin, file, location, includedFields) {
    this.file = file;
    this.plugin = plugin;
    this.location = location;
    this.attributes = {};
    this.fileClassFields = [];
    this.fileClassForFields = false;
    this.includedFields = includedFields ? [this.plugin.settings.fileClassAlias, ...includedFields] : [this.plugin.settings.fileClassAlias];
  }
  addAttribute(key, value) {
    const includedFields = this.includedFields.filter((f) => f !== this.plugin.settings.fileClassAlias);
    if (includedFields.length > 0) {
      if (this.includedFields.includes(key) && !this.plugin.settings.globallyIgnoredFields.includes(key)) {
        this.attributes[key] = value;
      }
    } else if (!this.plugin.settings.globallyIgnoredFields.includes(key)) {
      this.attributes[key] = value;
    }
  }
  getGlobalFileClassForFields() {
    const fileClass = this.plugin.settings.globalFileClass;
    try {
      const _fileClass = FileClass.createFileClass(this.plugin, fileClass);
      this.fileClass = _fileClass;
      this.fileClassFields = _fileClass.attributes.map((attr) => attr.name);
      this.fileClassForFields = true;
    } catch (error) {
    }
  }
  getQueryFileClassForFields() {
    const fileClassQueries = this.plugin.settings.fileClassQueries.map((fcq) => fcq);
    while (!this.fileClassForFields && fileClassQueries.length > 0) {
      const fileClassQuery = new FileClassQuery_default();
      Object.assign(fileClassQuery, fileClassQueries.pop());
      if (fileClassQuery.matchFile(this.file)) {
        this.fileClassForFields = true;
        this.fileClass = FileClass.createFileClass(this.plugin, fileClassQuery.fileClassName);
        this.fileClassFields = this.fileClass.attributes.map((attr) => attr.name);
      }
    }
  }
  fetchFrontmatterFields() {
    var _a;
    const frontmatter = (_a = this.plugin.app.metadataCache.getCache(this.file.path)) == null ? void 0 : _a.frontmatter;
    if (frontmatter) {
      const _b = frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
      Object.entries(attributes).forEach((attr) => this.addAttribute(...attr));
      const fileClassAlias = this.plugin.settings.fileClassAlias;
      if (Object.keys(this.attributes).includes(fileClassAlias)) {
        const fileClass = this.attributes[fileClassAlias];
        try {
          const _fileClass = FileClass.createFileClass(this.plugin, fileClass);
          this.fileClass = _fileClass;
          this.fileClassFields = _fileClass.attributes.map((attr) => attr.name);
          this.fileClassForFields = true;
          Object.keys(attributes).forEach((key) => {
            if (!this.fileClassFields.includes(key) && key != fileClassAlias) {
              delete this.attributes[key];
            }
            ;
          });
        } catch (error) {
        }
      }
    }
  }
  fetchInlineFields() {
    const dataview = app.plugins.plugins["dataview"];
    if (dataview) {
      const dvFile = dataview.api.page(this.file.path);
      try {
        genuineKeys(dvFile).forEach((key) => this.addAttribute(key, dvFile[key]));
      } catch (error) {
        throw error;
      }
    }
  }
  createAndOpenFieldModal(fieldName) {
    this.getGlobalFileClassForFields();
    this.getQueryFileClassForFields();
    this.fetchFrontmatterFields();
    this.fetchInlineFields();
    const value = this.attributes[fieldName];
    const field = getField(this.plugin, fieldName, this.fileClass);
    if (field) {
      const fieldManager = new FieldManager[field.type](field);
      fieldManager.createAndOpenFieldModal(this.plugin.app, this.file, field.name, this.attributes[field.name]);
    }
  }
  createExtraOptionList(openAfterCreate = true) {
    this.getGlobalFileClassForFields();
    this.getQueryFileClassForFields();
    this.fetchFrontmatterFields();
    this.fetchInlineFields();
    if (isMenu2(this.location)) {
      this.location.addSeparator();
    }
    ;
    if (isInsertFieldCommand2(this.location)) {
      this.addFieldAtCurrentPositionOption();
    } else if (isSuggest2(this.location)) {
      this.buildFieldOptions();
      this.addFieldAtCurrentPositionOption();
      this.addSectionSelectModalOption();
      this.addFieldAtTheEndOfFrontmatterOption();
      if (this.fileClass) {
        const fieldCommandSuggestModal = new FieldCommandSuggestModal(this.plugin.app);
        const optionsList = new FileClassOptionsList(this.plugin, this.fileClass.getClassFile(), fieldCommandSuggestModal);
        optionsList.createExtraOptionList(false);
        this.location.options.push({
          id: "manage_fileClass_attributes",
          actionLabel: `<span>Manage <b>${this.fileClass.name}</b> fileClass fields</span>`,
          action: () => {
            fieldCommandSuggestModal.open();
          },
          icon: "wrench"
        });
      }
      if (openAfterCreate)
        this.location.open();
    } else if (isMenu2(this.location)) {
      this.buildFieldOptions();
      this.addSectionSelectModalOption();
      this.addFieldAtCurrentPositionOption();
      this.addFieldAtTheEndOfFrontmatterOption();
      if (this.fileClass) {
        const fileClassOptionsList = new FileClassOptionsList(this.plugin, this.fileClass.getClassFile(), this.location);
        fileClassOptionsList.createExtraOptionList(false);
      }
    }
  }
  buildFileClassFieldOptions(field, value) {
    const modal = new InputModal(app, this.file, field, value);
    modal.titleEl.setText(`Change Value for <${field.name}>`);
    if (isMenu2(this.location)) {
      this.location.addItem((item) => {
        item.setTitle(`Update ${field.name}`);
        item.setIcon("wrench");
        item.onClick(() => modal.open());
        item.setSection("metadata-menu");
      });
    } else if (isSuggest2(this.location)) {
      this.location.options.push({
        id: `update_${field.name}`,
        actionLabel: `<span>Update <b>${field.name}</b></span>`,
        action: () => modal.open(),
        icon: FieldIcon["Input" /* Input */]
      });
    }
    ;
  }
  buildFieldOptions() {
    Object.keys(this.attributes).forEach((key) => {
      const value = this.attributes[key];
      const field = getField(this.plugin, key, this.fileClass);
      if (field) {
        const fieldManager = new FieldManager[field.type](field);
        fieldManager.addFieldOption(key, value, this.plugin.app, this.file, this.location);
      } else if (key !== "file" && (isSuggest2(this.location) || isMenu2(this.location))) {
        const defaultField = new Field_default(key);
        defaultField.type = "Input" /* Input */;
        if (key === this.plugin.settings.fileClassAlias) {
          this.buildFileClassFieldOptions(defaultField, value);
        } else {
          const fieldManager = new Managers_default.Input(defaultField);
          fieldManager.addFieldOption(key, value, this.plugin.app, this.file, this.location);
        }
      }
    });
  }
  addSectionSelectModalOption() {
    const modal = new chooseSectionModal(this.plugin, this.file, this.fileClass);
    if (isMenu2(this.location)) {
      this.location.addItem((item) => {
        item.setIcon("enter");
        item.setTitle("Add field at section...");
        item.onClick((evt) => {
          modal.open();
        });
        item.setSection("metadata-menu");
      });
    } else if (isSuggest2(this.location)) {
      this.location.options.push({
        id: "add_field_at_section",
        actionLabel: "Add field at section...",
        action: () => modal.open(),
        icon: "enter"
      });
    }
    ;
  }
  addFieldAtTheEndOfFrontmatterOption() {
    var _a;
    if ((_a = this.plugin.app.metadataCache.getCache(this.file.path)) == null ? void 0 : _a.frontmatter) {
      const lineNumber = this.plugin.app.metadataCache.getCache(this.file.path).frontmatter.position.end.line - 1;
      if (isMenu2(this.location)) {
        this.location.addItem((item) => {
          item.setIcon("pin");
          item.setTitle("Add field in frontmatter");
          item.onClick((evt) => __async(this, null, function* () {
            FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", lineNumber + 1, true, false);
          }));
          item.setSection("metadata-menu");
        });
      } else if (isSuggest2(this.location)) {
        this.location.options.push({
          id: "add_field_in_frontmatter",
          actionLabel: "Add a field in frontmatter...",
          action: () => FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", lineNumber + 1, true, false, this.fileClass),
          icon: "pin"
        });
      }
    }
  }
  addFieldAtCurrentPositionOption() {
    var _a;
    const currentView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian36.MarkdownView);
    const lineNumber = currentView == null ? void 0 : currentView.editor.getCursor().line;
    if (lineNumber !== void 0 && this.file.path == (currentView == null ? void 0 : currentView.file.path)) {
      let inFrontmatter = false;
      const frontmatter = (_a = this.plugin.app.metadataCache.getFileCache(this.file)) == null ? void 0 : _a.frontmatter;
      if (frontmatter) {
        const { position: { start: start2, end: end2 } } = frontmatter;
        if (lineNumber >= start2.line && lineNumber < end2.line)
          inFrontmatter = true;
      }
      if (isMenu2(this.location)) {
        this.location.addItem((item) => {
          item.setIcon("pin");
          item.setTitle("Add field at cursor");
          item.onClick((evt) => {
            FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", lineNumber, inFrontmatter, false, this.fileClass);
          });
          item.setSection("metadata-menu");
        });
      } else if (isInsertFieldCommand2(this.location)) {
        FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", lineNumber, inFrontmatter, false, this.fileClass);
      } else if (isSuggest2(this.location)) {
        this.location.options.push({
          id: "add_field_at_cursor",
          actionLabel: "Add field at cursor...",
          action: () => FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", lineNumber, inFrontmatter, false, this.fileClass),
          icon: "pin"
        });
      }
      ;
    }
  }
};

// src/options/linkContextMenu.ts
var linkContextMenu = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.createContextMenu();
  }
  buildOptions(file, menu, includedFields) {
    if (file instanceof import_obsidian37.TFile && file.extension === "md") {
      if (!import_obsidian37.Platform.isMobile && (0, import_obsidian37.requireApiVersion)("0.16.0")) {
        menu.setSectionSubmenu("metadata-menu.current_field", { title: "Current Field", icon: "pencil" });
        menu.setSectionSubmenu("metadata-menu.fields", { title: "Manage Fields", icon: "pencil" });
        menu.setSectionSubmenu("metadata-menu-fileclass.fileclass-fields", { title: "Manage Fileclass Fields", icon: "wrench" });
      }
      if (file.parent.path + "/" == this.plugin.settings.classFilesPath) {
        const fileClassOptionsList = new FileClassOptionsList(this.plugin, file, menu);
        fileClassOptionsList.createExtraOptionList();
      } else {
        const optionsList = new OptionsList(this.plugin, file, menu, includedFields);
        optionsList.createExtraOptionList();
      }
      ;
    }
    ;
  }
  createContextMenu() {
    this.plugin.registerEvent(this.plugin.app.workspace.on("file-menu", (menu, abstractFile, source) => {
      const file = this.plugin.app.vault.getAbstractFileByPath(abstractFile.path);
      this.buildOptions(file, menu);
    }));
    this.plugin.registerEvent(this.plugin.app.workspace.on("editor-menu", (menu, editor, view) => {
      var _a;
      const file = this.plugin.app.workspace.getActiveFile();
      const includedFields = [];
      const frontmatter = (_a = this.plugin.app.metadataCache.getFileCache(view.file)) == null ? void 0 : _a.frontmatter;
      if (frontmatter && editor.getCursor().line > frontmatter.position.start.line && editor.getCursor().line < frontmatter.position.end.line) {
        const attribute = frontMatterLineField(editor.getLine(editor.getCursor().line));
        if (attribute)
          includedFields.push(attribute);
      } else {
        getLineFields(editor.getLine(editor.getCursor().line)).forEach((field) => {
          if (editor.getCursor().ch <= field.index + field.length && editor.getCursor().ch >= field.index) {
            includedFields.push(field.attribute);
          }
        });
      }
      if (includedFields.length) {
        this.buildOptions(file, menu, includedFields);
      } else {
        this.buildOptions(file, menu);
      }
    }));
  }
};

// src/settings/MetadataMenuSettings.ts
var DEFAULT_SETTINGS = {
  presetFields: [],
  fileClassQueries: [],
  displayFieldsInContextMenu: true,
  globallyIgnoredFields: [],
  classFilesPath: "",
  isAutosuggestEnabled: true,
  fileClassAlias: "fileClass",
  settingsVersion: void 0,
  globalFileClass: void 0,
  firstDayOfWeek: 1
};

// src/settings/MetadataMenuSettingTab.ts
var import_obsidian41 = require("obsidian");

// src/suggester/FolderSuggester.ts
var import_obsidian38 = require("obsidian");
var FolderSuggest = class extends TextInputSuggest {
  getSuggestions(inputStr) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian38.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/settings/FileClassQuerySettingModal.ts
var import_obsidian40 = require("obsidian");

// src/settings/FileClassQuerySetting.ts
var import_obsidian39 = require("obsidian");
var FileClassQuerySetting = class extends import_obsidian39.Setting {
  constructor(containerEl, property, app2, plugin) {
    super(containerEl);
    this.containerEl = containerEl;
    this.fileClassQuery = property;
    this.app = app2;
    this.plugin = plugin;
    this.setTextContentWithname();
    this.addEditButton();
    this.addDeleteButton();
    this.addMoveUpButton();
  }
  setTextContentWithname() {
    this.infoEl.textContent = "";
    this.infoEl.addClass("metadata-menu-setting-item");
    const fileClassQueryContainer = this.infoEl.createDiv();
    const nameContainer = fileClassQueryContainer.createEl("div", "metadata-menu-setting-item-name");
    nameContainer.innerHTML = `<strong>${this.fileClassQuery.name}</strong>`;
    const fileClassNameContainer = fileClassQueryContainer.createEl("div");
    fileClassNameContainer.innerHTML = `<span>FileClass</span> : ${this.fileClassQuery.fileClassName}`;
    const queryContainer = fileClassQueryContainer.createEl("div");
    queryContainer.innerHTML = `<span>Query</span> : ${this.fileClassQuery.query}`;
  }
  addEditButton() {
    this.addButton((b) => {
      b.setIcon("pencil").setTooltip("Edit").onClick(() => {
        let modal = new FileClassQuerySettingsModal(this.app, this.plugin, this.containerEl, this, this.fileClassQuery);
        modal.open();
      });
    });
  }
  addDeleteButton() {
    this.addButton((b) => {
      b.setIcon("trash").setTooltip("Delete").onClick(() => {
        var _a;
        const currentExistingFileClassQuery = this.plugin.initialFileClassQueries.find((p) => p.id == this.fileClassQuery.id);
        if (currentExistingFileClassQuery) {
          this.plugin.initialFileClassQueries.remove(currentExistingFileClassQuery);
        }
        ;
        (_a = this.settingEl.parentElement) == null ? void 0 : _a.removeChild(this.settingEl);
        this.plugin.saveSettings();
      });
    });
  }
  addMoveUpButton() {
    this.addButton((b) => {
      b.setIcon("up-chevron-glyph").setTooltip("Move up (lower priority)").onClick(() => {
        const currentFileClassQueryIndex = this.plugin.initialFileClassQueries.map((fcq) => fcq.id).indexOf(this.fileClassQuery.id);
        if (currentFileClassQueryIndex > 0) {
          this.containerEl.insertBefore(this.settingEl, this.settingEl.previousElementSibling);
          this.plugin.initialFileClassQueries.splice(currentFileClassQueryIndex, 1);
          this.plugin.initialFileClassQueries.splice(currentFileClassQueryIndex - 1, 0, this.fileClassQuery);
          this.plugin.saveSettings();
        }
      });
    });
  }
};

// src/settings/FileClassQuerySettingModal.ts
var FileClassQuerySettingsModal = class extends import_obsidian40.Modal {
  constructor(app2, plugin, parentSettingContainer, parentSetting, fileClassQuery) {
    super(app2);
    this.saved = false;
    this.new = true;
    this.plugin = plugin;
    this.parentSetting = parentSetting;
    this.initialFileClassQuery = new FileClassQuery_default();
    this.parentSettingContainer = parentSettingContainer;
    if (fileClassQuery) {
      this.new = false;
      this.fileClassQuery = fileClassQuery;
      FileClassQuery_default.copyProperty(this.initialFileClassQuery, this.fileClassQuery);
    } else {
      let newId = 1;
      this.plugin.initialFileClassQueries.forEach((prop) => {
        if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
          newId = parseInt(prop.id) + 1;
        }
        ;
      });
      this.fileClassQuery = new FileClassQuery_default();
      this.fileClassQuery.id = newId.toString();
      this.initialFileClassQuery.id = newId.toString();
    }
    ;
  }
  onOpen() {
    return __async(this, null, function* () {
      if (this.fileClassQuery.name == "") {
        this.titleEl.setText(`Select a fileClass and add an applicable query`);
      } else {
        this.titleEl.setText(`Manage ${this.fileClassQuery.name} settings`);
      }
      ;
      yield this.createForm();
    });
  }
  onClose() {
    Object.assign(this.fileClassQuery, this.initialFileClassQuery);
    if (!this.new && this.parentSetting) {
      this.parentSetting.setTextContentWithname();
    } else if (this.saved) {
      new FileClassQuerySetting(this.parentSettingContainer, this.fileClassQuery, this.app, this.plugin);
    }
    ;
  }
  createnameInputContainer(parentNode) {
    const fileClassQueryNameContainerLabel = parentNode.createDiv();
    fileClassQueryNameContainerLabel.setText(`FileClass Query Name:`);
    const input = new import_obsidian40.TextComponent(parentNode);
    const name = this.fileClassQuery.name;
    input.setValue(name);
    input.setPlaceholder("Name of this fileClass query");
    input.onChange((value) => {
      this.fileClassQuery.name = value;
      this.titleEl.setText(`Manage options for ${this.fileClassQuery.name}`);
    });
    return input;
  }
  createFileClassSelectorContainer(parentNode) {
    const FileClassSelectorContainerLabel = parentNode.createDiv();
    FileClassSelectorContainerLabel.setText(`Fileclass:`);
    const select = new import_obsidian40.DropdownComponent(parentNode);
    const fileClasses = this.plugin.app.vault.getFiles().filter((f) => f.path.startsWith(this.plugin.settings.classFilesPath));
    select.addOption("--Select a fileClass--", "--Select a fileClass--");
    fileClasses.forEach((fileClass) => select.addOption(fileClass.basename, fileClass.basename));
    if (this.fileClassQuery.fileClassName) {
      select.setValue(this.fileClassQuery.fileClassName);
    }
    select.onChange((value) => {
      if (value != "--Select a fileClass--") {
        this.fileClassQuery.fileClassName = value;
      } else {
        this.fileClassQuery.fileClassName = "";
      }
    });
  }
  createQueryInputContainer(parentNode) {
    const queryContainerLabel = parentNode.createDiv();
    queryContainerLabel.setText("dataviewJS query:");
    const queryStringInput = new import_obsidian40.TextAreaComponent(parentNode);
    queryStringInput.setValue(this.fileClassQuery.query);
    queryStringInput.onChange((value) => this.fileClassQuery.query = value);
  }
  createForm() {
    return __async(this, null, function* () {
      const div = this.contentEl.createDiv({ cls: "metadata-menu-prompt-div" });
      const mainDiv = div.createDiv({ cls: "metadata-menu-prompt-form" });
      const nameContainer = mainDiv.createDiv();
      this.createnameInputContainer(nameContainer);
      mainDiv.createDiv({ cls: "metadata-menu-separator" }).createEl("hr");
      const fileClassSelectContainer = mainDiv.createDiv();
      const footerEl = this.contentEl.createDiv();
      const footerButtons = new import_obsidian40.Setting(footerEl);
      footerButtons.addButton((b) => this.createSaveButton(b));
      footerButtons.addExtraButton((b) => this.createCancelButton(b));
      this.createFileClassSelectorContainer(fileClassSelectContainer);
      const fileClassQueryContainer = mainDiv.createDiv();
      this.createQueryInputContainer(fileClassQueryContainer);
    });
  }
  createSaveButton(b) {
    b.setTooltip("Save");
    b.setIcon("checkmark");
    b.onClick(() => __async(this, null, function* () {
      var _a;
      if (this.fileClassQuery.fileClassName && this.fileClassQuery.name && this.fileClassQuery.query) {
        this.saved = true;
        const currentExistingFileClassQuery = this.plugin.initialFileClassQueries.filter((p) => p.id == this.fileClassQuery.id)[0];
        if (currentExistingFileClassQuery) {
          FileClassQuery_default.copyProperty(currentExistingFileClassQuery, this.fileClassQuery);
        } else {
          this.plugin.initialFileClassQueries.push(this.fileClassQuery);
        }
        ;
        FileClassQuery_default.copyProperty(this.initialFileClassQuery, this.fileClassQuery);
        if (this.parentSetting)
          FileClassQuery_default.copyProperty(this.parentSetting.fileClassQuery, this.fileClassQuery);
        (_a = this.parentSetting) == null ? void 0 : _a.setTextContentWithname();
        this.plugin.saveSettings();
        this.close();
      }
    }));
    return b;
  }
  createCancelButton(b) {
    b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.saved = false;
      if (this.initialFileClassQuery.name != "") {
        Object.assign(this.fileClassQuery, this.initialFileClassQuery);
      }
      ;
      this.close();
    });
    return b;
  }
};

// src/settings/MetadataMenuSettingTab.ts
var SettingsMigrationConfirmModal = class extends import_obsidian41.Modal {
  constructor(plugin, tab) {
    super(plugin.app);
    this.plugin = plugin;
    this.tab = tab;
  }
  onOpen() {
    this.titleEl.setText("Confirm");
    const body = this.contentEl.createDiv({
      cls: "modal-text-danger"
    });
    body.setText("This will erase current settings. Are you sure?");
    const confirmButton = new import_obsidian41.ButtonComponent(this.contentEl);
    confirmButton.setIcon("check");
    confirmButton.onClick(() => {
      if (this.app.plugins.plugins.hasOwnProperty("supercharged-links-obsidian")) {
        let settings = this.app.plugins.plugins["supercharged-links-obsidian"].settings;
        this.plugin.initialProperties = [];
        settings.presetFields.forEach((prop) => {
          const field = new Field_default();
          Object.assign(field, prop);
          this.plugin.initialProperties.push(field);
        });
        this.plugin.saveSettings();
        this.close();
      }
      ;
    });
  }
  onClose() {
    this.tab.display();
  }
};
var MetadataMenuSettingTab = class extends import_obsidian41.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    const globalSettings = containerEl.createEl("div");
    globalSettings.createEl("h4", { text: "Global settings", cls: "metadata-menu-setting-section-header" });
    globalSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Global settings to apply to your whole vault"
    });
    new import_obsidian41.Setting(globalSettings).setName("Display field options in context menu").setDesc("Choose to show or hide fields options in the context menu of a link or a file").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.displayFieldsInContextMenu);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.displayFieldsInContextMenu = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian41.Setting(globalSettings).setName("Globally ignored fields").setDesc("Fields to be ignored by the plugin when adding options to the context menu").addTextArea((text) => {
      text.setPlaceholder("Enter fields as string, comma separated").setValue(this.plugin.settings.globallyIgnoredFields.join(", ")).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.globallyIgnoredFields = value.split(",").map((item) => item.trim());
        yield this.plugin.saveSettings();
      }));
      text.inputEl.rows = 6;
      text.inputEl.cols = 25;
    });
    new import_obsidian41.Setting(globalSettings).setName("First day of week").setDesc("For date fields, which day the date picker's week should start with").addDropdown((cb) => {
      for (let i = 0; i < 2; i++) {
        cb.addOption(i.toString(), (0, import_obsidian41.moment)().day(i).format("dddd"));
      }
      cb.setValue(this.plugin.settings.firstDayOfWeek.toString() || "1");
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.firstDayOfWeek = parseInt(value);
        yield this.plugin.saveSettings();
      }));
    });
    const presetFieldsSettings = containerEl.createEl("div");
    const presetFieldsSettingHeaderContainer = presetFieldsSettings.createEl("div", { cls: "metadata-menu-setting-section-header-container" });
    const presetFieldsSettingHeaderTextContainer = presetFieldsSettingHeaderContainer.createEl("div", { cls: "metadata-menu-setting-section-header-text-container" });
    presetFieldsSettingHeaderTextContainer.createEl("h4", { text: "Preset Fields settings", cls: "metadata-menu-setting-section-header" });
    presetFieldsSettingHeaderTextContainer.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Manage globally predefined type and options for a field throughout your whole vault"
    });
    const presetFieldsSettingsContainerShowButtonContainer = presetFieldsSettingHeaderContainer.createEl("div", { cls: "setting-item-control" });
    const presetFieldsSettingsContainerShowButton = presetFieldsSettingsContainerShowButtonContainer.createEl("button");
    presetFieldsSettingsContainerShowButton.addClass("setting-item-control");
    const presetFieldsSettingsContainer = presetFieldsSettings.createEl("div");
    new import_obsidian41.Setting(presetFieldsSettingsContainer).setName("Add New Field Setting").setDesc("Add a new Frontmatter property for which you want preset options.").addButton((button) => {
      return button.setTooltip("Add New Property Manager").setButtonText("+").onClick(() => __async(this, null, function* () {
        let modal = new FieldSettingsModal(this.app, this.plugin, presetFieldsSettingsContainer);
        modal.open();
      }));
    });
    this.plugin.initialProperties.forEach((prop) => {
      const property = new Field_default();
      Object.assign(property, prop);
      new FieldSetting(presetFieldsSettingsContainer, property, this.app, this.plugin);
    });
    presetFieldsSettingsContainer.isShown() ? (0, import_obsidian41.setIcon)(presetFieldsSettingsContainerShowButton, "double-up-arrow-glyph") : (0, import_obsidian41.setIcon)(presetFieldsSettingsContainerShowButton, "double-down-arrow-glyph");
    presetFieldsSettingsContainerShowButton.onclick = () => {
      presetFieldsSettingsContainer.isShown() ? presetFieldsSettingsContainer.hide() : presetFieldsSettingsContainer.show();
      presetFieldsSettingsContainer.isShown() ? (0, import_obsidian41.setIcon)(presetFieldsSettingsContainerShowButton, "double-up-arrow-glyph") : (0, import_obsidian41.setIcon)(presetFieldsSettingsContainerShowButton, "double-down-arrow-glyph");
    };
    const classFilesSettings = containerEl.createEl("div");
    const classFilesSettingsHeaderContainer = classFilesSettings.createEl("div", { cls: "metadata-menu-setting-section-header-container" });
    const classFilesSettingsHeaderTextContainer = classFilesSettingsHeaderContainer.createEl("div", { cls: "metadata-menu-setting-section-header-text-container" });
    classFilesSettingsHeaderTextContainer.createEl("h4", { text: "FileClass settings", cls: "metadata-menu-setting-section-header" });
    classFilesSettingsHeaderTextContainer.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Manage fileClass folder and alias. When a note has a fielClass defined, fileClass field properties will override global preset fields settings for the same field name"
    });
    const classFilesSettingsContainerShowButtonContainer = classFilesSettingsHeaderContainer.createEl("div", { cls: "setting-item-control" });
    const classFilesSettingsContainerShowButton = classFilesSettingsContainerShowButtonContainer.createEl("button");
    classFilesSettingsContainerShowButton.addClass("setting-item-control");
    const classFilesSettingsContainer = classFilesSettings.createEl("div");
    new import_obsidian41.Setting(classFilesSettingsContainer).setName("class Files path").setDesc("Path to the files containing the authorized fields for a type of note").addSearch((cfs) => {
      new FolderSuggest(this.app, cfs.inputEl);
      cfs.setPlaceholder("Folder").setValue(this.plugin.settings.classFilesPath).onChange((new_folder) => {
        const newPath = new_folder.endsWith("/") ? new_folder : new_folder + "/";
        this.plugin.settings.classFilesPath = newPath;
        this.plugin.saveSettings();
      });
      cfs.containerEl.addClass("metadata-menu-setting-fileClass-search");
    });
    new import_obsidian41.Setting(classFilesSettingsContainer).setName("fileClass field alias").setDesc("Choose another name for fileClass field in frontmatter (example: Category, type, ...").addText((text) => {
      text.setValue(this.plugin.settings.fileClassAlias).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.fileClassAlias = value || "fileClass";
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian41.Setting(classFilesSettingsContainer).setName("global fileClass").setDesc("Choose one fileClass to be applicable to all files (even it is not present as a fileClass attribute in their frontmatter). This will override the preset Fields defined above").addSearch((cfs) => {
      new FileSuggest(this.app, cfs.inputEl, this.plugin, this.plugin.settings.classFilesPath);
      cfs.setPlaceholder("Global fileClass");
      cfs.setValue(this.plugin.settings.globalFileClass ? this.plugin.settings.classFilesPath + this.plugin.settings.globalFileClass + ".md" : "").onChange((newPath) => {
        var _a;
        this.plugin.settings.globalFileClass = newPath ? (_a = newPath.split("\\").pop().split("/").pop()) == null ? void 0 : _a.replace(".md", "") : "";
        this.plugin.saveSettings();
      });
      cfs.containerEl.addClass("metadata-menu-setting-fileClass-search");
    });
    const queryFileClassSettings = classFilesSettingsContainer.createEl("div");
    queryFileClassSettings.createEl("h4", { text: "Query based FileClass settings", cls: "metadata-menu-setting-section-header" });
    queryFileClassSettings.createEl("div", {
      cls: "setting-item-description metadata-menu-setting-section-desc",
      text: "Manage globally predefined type and options for a field matching this query"
    });
    new import_obsidian41.Setting(queryFileClassSettings).setName("Add New Query for fileClass").setDesc("Add a new query and a FileClass that will apply to files matching this query.").addButton((button) => {
      return button.setTooltip("Add New Property Manager").setButtonText("+").onClick(() => __async(this, null, function* () {
        let modal = new FileClassQuerySettingsModal(this.app, this.plugin, queryFileClassSettings);
        modal.open();
      }));
    });
    this.plugin.initialFileClassQueries.forEach((query) => {
      const fileClassQuery = new FileClassQuery_default();
      Object.assign(fileClassQuery, query);
      new FileClassQuerySetting(queryFileClassSettings, fileClassQuery, this.app, this.plugin);
    });
    classFilesSettingsContainer.isShown() ? (0, import_obsidian41.setIcon)(classFilesSettingsContainerShowButton, "double-up-arrow-glyph") : (0, import_obsidian41.setIcon)(classFilesSettingsContainerShowButton, "double-down-arrow-glyph");
    classFilesSettingsContainerShowButton.onclick = () => {
      classFilesSettingsContainer.isShown() ? classFilesSettingsContainer.hide() : classFilesSettingsContainer.show();
      classFilesSettingsContainer.isShown() ? (0, import_obsidian41.setIcon)(classFilesSettingsContainerShowButton, "double-up-arrow-glyph") : (0, import_obsidian41.setIcon)(classFilesSettingsContainerShowButton, "double-down-arrow-glyph");
    };
    const migrateSettings = containerEl.createEl("div");
    migrateSettings.createEl("h4", { text: "Migrate" });
    new import_obsidian41.Setting(migrateSettings).setName("Copy settings from supercharged links plugin").setDesc("Copy settings from supercharged links plugin").addButton((button) => {
      return button.setTooltip("Get settings from supercharged links").setButtonText("Copy").onClick(() => __async(this, null, function* () {
        let modal = new SettingsMigrationConfirmModal(this.plugin, this);
        modal.open();
      }));
    });
  }
};

// src/settings/migrateSettingV1toV2.ts
var migrateSettingsV1toV2 = (plugin) => __async(void 0, null, function* () {
  const presetFields = plugin.settings.presetFields;
  presetFields.forEach((p) => {
    if (!Object.keys(p).contains("type")) {
      if (p.isMulti)
        p.type = "Multi" /* Multi */;
      else if (p.isCycle)
        p.type = "Cycle" /* Cycle */;
      else if (p.isBoolean)
        p.type = "Boolean" /* Boolean */;
      else if (p.options && Object.keys(p.options).length > 0)
        p.type = "Select" /* Select */;
      else
        p.type = "Input" /* Input */;
    }
    delete p.isMulti;
    delete p.isCycle;
    delete p.isBoolean;
    if (Object.getOwnPropertyDescriptor(p, "values") !== void 0) {
      Object.defineProperty(p, "options", Object.getOwnPropertyDescriptor(p, "values"));
      delete p["values"];
    }
  });
  plugin.settings.settingsVersion = 2;
  yield plugin.saveData(plugin.settings);
  console.log("Metadata menu settings migrated");
});

// src/suggester/metadataSuggester.ts
var import_obsidian42 = require("obsidian");
var ValueSuggest = class extends import_obsidian42.EditorSuggest {
  constructor(app2, plugin) {
    super(app2);
    this.inFrontmatter = false;
    this.inFullLine = false;
    this.inSentence = false;
    this.didSelect = false;
    this.filterOption = (firstValues, lastValue, option) => {
      return !firstValues || !(firstValues == null ? void 0 : firstValues.contains(encodeLink(option))) && (!lastValue || !!lastValue && encodeLink(option).includes(lastValue));
    };
    this.app = app2;
    this.plugin = plugin;
    this.setInstructions([{ command: "Shift", purpose: "put a space after::" }]);
    this.scope.register(["Shift"], "Enter", (evt) => {
      this.suggestions.useSelectedItem(evt);
      return false;
    });
  }
  onTrigger(cursor, editor, file) {
    if (this.didSelect) {
      this.didSelect = false;
      return null;
    }
    if (!this.plugin.settings.isAutosuggestEnabled) {
      return null;
    }
    ;
    const frontmatter = this.plugin.app.metadataCache.getFileCache(file).frontmatter;
    const fullLine = editor.getLine(editor.getCursor().line);
    this.inFrontmatter = frontmatter !== void 0 && frontmatter.position.start.line < cursor.line && cursor.line < frontmatter.position.end.line;
    if (this.inFrontmatter) {
      const regex = new RegExp(`^${genericFieldRegex}:(?<values>.*)`, "u");
      if (!regex.test(fullLine))
        return null;
    } else if (getLineFields(fullLine).length === 0) {
      return null;
    }
    return {
      start: cursor,
      end: cursor,
      query: editor.getLine(cursor.line)
    };
  }
  getOptionsFromFileClassFields(fieldNames, fieldName, firstValues, lastValue, context) {
    if (fieldNames.includes(fieldName)) {
      const field = this.fileClass.attributes.find((attr) => attr.name == fieldName).getField();
      if (["Cycle" /* Cycle */, "Multi" /* Multi */, "Select" /* Select */].contains(field.type)) {
        const filteredOptions = Array.isArray(field.options) ? field.options.filter((option) => this.filterOption(firstValues, lastValue, option)) : Object.keys(field.options).map((k) => field.options[k]).filter((option) => this.filterOption(firstValues, lastValue, option));
        return filteredOptions.map((option) => Object({ value: option }));
      } else if (["File" /* File */, "MultiFile" /* MultiFile */].includes(field.type)) {
        const fieldManager = new FieldManager[field.type](field);
        const files = fieldManager.getFiles();
        if (lastValue) {
          return files.filter((f) => f.basename.includes(lastValue)).map((f) => Object({ value: FileField.buildMarkDownLink(app, context.file, f.basename) }));
        } else {
          return files.map((f) => Object({ value: FileField.buildMarkDownLink(app, context.file, f.basename) }));
        }
      } else {
        return [];
      }
    } else {
      return [];
    }
  }
  getSuggestions(context) {
    return __async(this, null, function* () {
      const suggestions = yield this.getValueSuggestions(context);
      if (suggestions.length) {
        return suggestions;
      }
      return [];
    });
  }
  getValueSuggestions(context) {
    return __async(this, null, function* () {
      var _a;
      const lineNumber = context.start.line;
      const matchField = { attribute: void 0, values: "" };
      if (!this.inFrontmatter) {
        const lineFields = getLineFields(encodeLink(context.editor.getLine(lineNumber)));
        const position = context.editor.getCursor().ch;
        const activeLineField = lineFields.find((lineField) => lineField.index <= position && lineField.index + lineField.length >= position);
        if (activeLineField) {
          this.inSentence = activeLineField.index > 0;
          this.inFullLine = activeLineField.index === 0;
          matchField.attribute = activeLineField.attribute;
          matchField.values = activeLineField.values;
        }
      } else {
        const regex = new RegExp(`^${genericFieldRegex}:(?<values>.+)?`, "u");
        const regexResult = context.editor.getRange({ line: lineNumber, ch: 0 }, context.end).match(regex);
        if (regexResult == null ? void 0 : regexResult.groups) {
          matchField.attribute = regexResult.groups.attribute;
          matchField.values = regexResult.groups.values;
        }
      }
      ;
      if (matchField.attribute) {
        const fieldName = matchField.attribute;
        const valuesList = (_a = matchField.values) == null ? void 0 : _a.replace(/^\[|^\s\[|^\(|^\s\(/, "").replace(/\]$|\)$/, "").split(",").map((o) => encodeLink(o.trim()));
        const lastValue = valuesList == null ? void 0 : valuesList.last();
        const firstValues = valuesList == null ? void 0 : valuesList.slice(0, -1);
        if (fieldName === "tags" && this.inFrontmatter) {
          return Object.keys(this.app.metadataCache.getTags()).filter((t) => lastValue ? t.contains(lastValue) : t).sort().map((tag) => Object({ value: tag.replace(/^#/, "") }));
        }
        const fileClassQueries = this.plugin.settings.fileClassQueries.map((fcq) => fcq);
        while (!this.fileClassForFields && fileClassQueries.length > 0) {
          const fileClassQuery = new FileClassQuery_default();
          Object.assign(fileClassQuery, fileClassQueries.pop());
          if (fileClassQuery.matchFile(context.file)) {
            this.fileClassForFields = true;
            this.fileClass = FileClass.createFileClass(this.plugin, fileClassQuery.fileClassName);
            this.fileClassFields = this.fileClass.attributes.map((attr) => attr.name);
          }
        }
        const cache = this.plugin.app.metadataCache.getCache(context.file.path);
        if (cache == null ? void 0 : cache.frontmatter) {
          const _b = cache.frontmatter, { position } = _b, attributes = __objRest(_b, ["position"]);
          const fileClassAlias = this.plugin.settings.fileClassAlias;
          if (Object.keys(attributes).contains(fileClassAlias)) {
            const fileClassValue = attributes[fileClassAlias];
            try {
              const fileClass = FileClass.createFileClass(this.plugin, fileClassValue);
              this.fileClass = fileClass;
              this.fileClassForFields = true;
              this.fileClassFields = this.fileClass.attributes.map((a) => a.name);
            } catch (error) {
            }
            ;
          }
        }
        if (this.fileClassForFields) {
          return this.getOptionsFromFileClassFields(this.fileClassFields, fieldName, firstValues, lastValue, context);
        } else {
          const presetField = this.plugin.settings.presetFields.find((field) => field.name == fieldName);
          if (presetField) {
            if (["Cycle" /* Cycle */, "Multi" /* Multi */, "Select" /* Select */].contains(presetField.type)) {
              if (presetField.valuesListNotePath) {
                const valuesFile = this.plugin.app.vault.getAbstractFileByPath(presetField.valuesListNotePath);
                if (valuesFile instanceof import_obsidian42.TFile && valuesFile.extension == "md") {
                  const values2 = (yield this.plugin.app.vault.read(valuesFile)).split("\n").filter((option) => this.filterOption(firstValues, lastValue, option)).map((_value) => Object({ value: _value }));
                  return values2;
                }
                ;
              }
              ;
              const values = Object.entries(presetField.options).map((option) => option[1]).filter((option) => this.filterOption(firstValues, lastValue, option));
              return values.map((_value) => Object({ value: _value }));
            } else if (["File" /* File */, "MultiFile" /* MultiFile */].includes(presetField.type)) {
              const fieldManager = new FieldManager[presetField.type](presetField);
              const files = fieldManager.getFiles();
              if (lastValue) {
                return files.filter((f) => f.basename.includes(lastValue)).map((f) => Object({ value: FileField.buildMarkDownLink(app, context.file, f.basename) }));
              } else {
                return files.map((f) => Object({ value: FileField.buildMarkDownLink(app, context.file, f.basename) }));
              }
            } else {
              return [];
            }
          }
          ;
        }
        ;
      }
      ;
      return [];
    });
  }
  renderSuggestion(suggestion, el) {
    el.setText(suggestion.value);
  }
  selectSuggestion(suggestion, event) {
    var _a;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian42.MarkdownView);
    if (!activeView) {
      return;
    }
    ;
    const editor = activeView.editor;
    const activeLine = editor.getLine(this.context.start.line);
    if (this.inFrontmatter) {
      try {
        let parsedField = (0, import_obsidian42.parseYaml)(activeLine);
        let [attr, pastValues] = Object.entries(parsedField)[0];
        let newField;
        if (!pastValues) {
          newField = attr + ": " + suggestion.value;
        } else if (typeof pastValues == "string") {
          if (!pastValues.contains(",")) {
            newField = attr + ": " + suggestion.value;
          } else {
            newField = attr + ": [" + pastValues.split(",").map((o) => o.trim()).slice(0, -1).join(", ") + ", " + suggestion.value + "]";
          }
        } else if (Array.isArray(pastValues)) {
          if (activeLine.endsWith(",]") || activeLine.endsWith(", ]")) {
            newField = attr + ": [" + [...pastValues, suggestion.value].join(", ") + "]";
          } else {
            newField = attr + ": [" + [...pastValues.slice(0, -1), suggestion.value].join(", ") + "]";
          }
        } else {
          newField = attr + ": [" + [...pastValues].join(", ") + "]";
        }
        editor.replaceRange(newField, { line: this.context.start.line, ch: 0 }, { line: this.context.start.line, ch: activeLine.length });
        if (Array.isArray(pastValues) || typeof pastValues === "string" && pastValues.contains(",")) {
          editor.setCursor({ line: this.context.start.line, ch: newField.length - 1 });
        } else {
          editor.setCursor({ line: this.context.start.line, ch: newField.length });
        }
      } catch (error) {
        new import_obsidian42.Notice("Frontmatter wrongly formatted", 2e3);
        this.close();
        return;
      }
    } else if (this.inFullLine) {
      let cleanedLine = activeLine;
      while (![",", ":"].contains(cleanedLine.charAt(cleanedLine.length - 1))) {
        cleanedLine = cleanedLine.slice(0, -1);
      }
      editor.replaceRange(`${cleanedLine}${event.shiftKey ? " " : ""}` + suggestion.value, { line: this.context.start.line, ch: 0 }, this.context.end);
    } else if (this.inSentence) {
      const position = ((_a = this.context) == null ? void 0 : _a.editor.getCursor().ch) || 0;
      let beforeCursor = activeLine.slice(0, position);
      let afterCursor = activeLine.slice(position);
      let separatorPos = position;
      let currentValueLength = 0;
      while (!beforeCursor.endsWith("::") && !beforeCursor.endsWith(",") && beforeCursor.length) {
        separatorPos = separatorPos - 1;
        currentValueLength = currentValueLength + 1;
        beforeCursor = beforeCursor.slice(0, -1);
      }
      let nextBracketPos = position;
      while (!encodeLink(afterCursor).match("(\\]|\\)).*") && afterCursor.length) {
        nextBracketPos = nextBracketPos + 1;
        afterCursor = afterCursor.slice(nextBracketPos - position);
      }
      editor.replaceRange(suggestion.value, { line: this.context.start.line, ch: separatorPos }, { line: this.context.start.line, ch: nextBracketPos });
      editor.setCursor({ line: this.context.start.line, ch: nextBracketPos - currentValueLength + suggestion.value.length });
    }
    this.didSelect = true;
    this.close();
  }
};

// main.ts
var MetadataMenu = class extends import_obsidian43.Plugin {
  constructor() {
    super(...arguments);
    this.initialProperties = [];
    this.initialFileClassQueries = [];
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Metadata Menu loaded");
      yield this.loadSettings();
      if (this.settings.settingsVersion === void 0) {
        yield migrateSettingsV1toV2(this);
      }
      this.settings.presetFields.forEach((prop) => {
        const property = new Field_default();
        Object.assign(property, prop);
        this.initialProperties.push(property);
      });
      this.settings.fileClassQueries.forEach((query) => {
        const fileClassQuery = new FileClassQuery_default();
        Object.assign(fileClassQuery, query);
        this.initialFileClassQueries.push(fileClassQuery);
      });
      this.addSettingTab(new MetadataMenuSettingTab(this.app, this));
      this.registerEditorSuggest(new ValueSuggest(this.app, this));
      this.api = new MetadataMenuApi(this).make();
      this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf) => {
        const view = leaf == null ? void 0 : leaf.view;
        this.addCommands(view);
      }));
      this.addCommands(this.app.workspace.getActiveViewOfType(import_obsidian43.MarkdownView));
      new linkContextMenu(this);
    });
  }
  addFileClassAttributeOptions() {
    this.addCommand({
      id: "fileClassAttr_options",
      name: "fileClass attributes options",
      icon: "gear",
      checkCallback: (checking) => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian43.MarkdownView);
        if (checking) {
          return !!(view == null ? void 0 : view.file) && `${view.file.parent.path}/` == this.settings.classFilesPath;
        }
        const fieldCommandSuggestModal = new FieldCommandSuggestModal(this.app);
        const optionsList = new FileClassOptionsList(this, view.file, fieldCommandSuggestModal);
        optionsList.createExtraOptionList();
      }
    });
  }
  addInsertFileClassAttribute() {
    this.addCommand({
      id: "insert_fileClassAttr",
      name: "Insert a new fileClass attribute",
      icon: "list-plus",
      checkCallback: (checking) => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian43.MarkdownView);
        if (checking) {
          return !!(view == null ? void 0 : view.file) && `${view.file.parent.path}/` == this.settings.classFilesPath;
        }
        const fileClassAttributeModal = new FileClassAttributeModal(this, FileClass.createFileClass(this, view.file.basename));
        fileClassAttributeModal.open();
      }
    });
  }
  addInsertFieldAtPositionCommand() {
    this.addCommand({
      id: "insert_field_at_cursor",
      name: "insert field at cursor",
      icon: "list-plus",
      checkCallback: (checking) => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian43.MarkdownView);
        if (checking) {
          return !!((view == null ? void 0 : view.file) && view.file.parent.path + "/" !== this.settings.classFilesPath);
        }
        const optionsList = new OptionsList(this, view.file, "InsertFieldCommand");
        optionsList.createExtraOptionList();
      }
    });
  }
  addFieldCommand() {
    this.addCommand({
      id: "field_options",
      name: "field options",
      icon: "gear",
      checkCallback: (checking) => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian43.MarkdownView);
        if (checking) {
          return !!((view == null ? void 0 : view.file) && view.file.parent.path + "/" !== this.settings.classFilesPath);
        }
        const fieldCommandSuggestModal = new FieldCommandSuggestModal(this.app);
        const optionsList = new OptionsList(this, view.file, fieldCommandSuggestModal);
        optionsList.createExtraOptionList();
      }
    });
  }
  addManageFieldAtCursorCommand() {
    this.addCommand({
      id: "field_at_cursor_options",
      name: "Manage field at cursor",
      icon: "text-cursor-input",
      checkCallback: (checking) => {
        var _a;
        const view = this.app.workspace.getActiveViewOfType(import_obsidian43.MarkdownView);
        const editor = view == null ? void 0 : view.editor;
        if (checking) {
          const inFile = !!((view == null ? void 0 : view.file) && view.file.parent.path + "/" !== this.settings.classFilesPath);
          return inFile && editor !== void 0;
        }
        const optionsList = new OptionsList(this, view.file, "ManageAtCursorCommand");
        const frontmatter = (_a = this.app.metadataCache.getFileCache(view.file)) == null ? void 0 : _a.frontmatter;
        if (frontmatter && editor && editor.getCursor().line > frontmatter.position.start.line && editor.getCursor().line < frontmatter.position.end.line) {
          const attribute = frontMatterLineField(editor.getLine(editor.getCursor().line));
          if (attribute)
            optionsList.createAndOpenFieldModal(attribute);
        } else if (editor) {
          const { attribute, values } = getLineFields(editor.getLine(editor.getCursor().line)).find((field) => editor.getCursor().ch <= field.index + field.length && editor.getCursor().ch >= field.index) || {};
          if (attribute)
            optionsList.createAndOpenFieldModal(attribute);
        }
      }
    });
  }
  addCommands(view) {
    if (view && view instanceof import_obsidian43.FileView) {
      const file = app.vault.getAbstractFileByPath(view.file.path);
      if (file instanceof import_obsidian43.TFile && file.extension === "md") {
        if (file.parent.path + "/" == this.settings.classFilesPath) {
          this.addFileClassAttributeOptions();
          this.addInsertFileClassAttribute();
        } else {
          this.addFieldCommand();
          this.addInsertFieldAtPositionCommand();
          this.addManageFieldAtCursorCommand();
        }
      }
    }
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      this.settings.presetFields = this.initialProperties;
      this.settings.fileClassQueries = this.initialFileClassQueries;
      yield this.saveData(this.settings);
    });
  }
  onunload() {
    console.log("Metadata Menu unloaded");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvZmllbGRzL2ZpZWxkTWFuYWdlcnMvSW5wdXRGaWVsZC50cyIsICJzcmMvb3B0aW9uTW9kYWxzL2ZpZWxkcy9JbnB1dE1vZGFsLnRzIiwgInNyYy9jb21tYW5kcy9pbnNlcnRWYWx1ZXMudHMiLCAic3JjL2NvbW1hbmRzL3JlcGxhY2VWYWx1ZXMudHMiLCAic3JjL3V0aWxzL3BhcnNlci50cyIsICJzcmMvZmllbGRzL0ZpZWxkTWFuYWdlci50cyIsICJzcmMvb3B0aW9uTW9kYWxzL2luc2VydEZpZWxkU3VnZ2VzdE1vZGFsLnRzIiwgInNyYy9vcHRpb25Nb2RhbHMvYWRkTmV3RmllbGRNb2RhbC50cyIsICJzcmMvc2V0dGluZ3MvRmllbGRTZXR0aW5nc01vZGFsLnRzIiwgInNyYy9zZXR0aW5ncy9GaWVsZFNldHRpbmcudHMiLCAic3JjL29wdGlvbk1vZGFscy9maWVsZHMvQm9vbGVhbk1vZGFsLnRzIiwgInNyYy9maWVsZHMvZmllbGRNYW5hZ2Vycy9Cb29sZWFuRmllbGQudHMiLCAic3JjL2ZpZWxkcy9maWVsZE1hbmFnZXJzL051bWJlckZpZWxkLnRzIiwgInNyYy9vcHRpb25Nb2RhbHMvZmllbGRzL051bWJlck1vZGFsLnRzIiwgInNyYy9maWVsZHMvZmllbGRNYW5hZ2Vycy9TZWxlY3RGaWVsZC50cyIsICJzcmMvb3B0aW9uTW9kYWxzL2ZpZWxkcy9TZWxlY3RNb2RhbC50cyIsICJzcmMvZmllbGRzL2ZpZWxkTWFuYWdlcnMvQWJzdHJhY3RMaXN0QmFzZWRGaWVsZC50cyIsICJzcmMvc3VnZ2VzdGVyL0ZpbGVTdWdnZXN0ZXIudHMiLCAic3JjL3N1Z2dlc3Rlci9zdWdnZXN0LnRzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZW51bXMuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93LmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2luc3RhbmNlT2YuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWF0aC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9jb250YWlucy5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzVGFibGVFbGVtZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcnJvdy5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsQmFyWC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRWaWV3cG9ydFJlY3QuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRSZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzU2Nyb2xsUGFyZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFNjcm9sbFBhcmVudC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvY29tcHV0ZU9mZnNldHMuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZXRlY3RPdmVyZmxvdy5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2ZsaXAuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvaGlkZS5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEFsdEF4aXMuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVTY3JvbGwuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGVib3VuY2UuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9mb3JtYXQuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy92YWxpZGF0ZU1vZGlmaWVycy5qcyIsICJub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3VuaXF1ZUJ5LmpzIiwgIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VCeU5hbWUuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9jcmVhdGVQb3BwZXIuanMiLCAibm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXIuanMiLCAic3JjL3V0aWxzL2ZpbGVVdGlscy50cyIsICJzcmMvZmllbGRzL2ZpZWxkTWFuYWdlcnMvQ3ljbGVGaWVsZC50cyIsICJzcmMvZmllbGRzL2ZpZWxkTWFuYWdlcnMvTXVsdGlGaWVsZC50cyIsICJzcmMvb3B0aW9uTW9kYWxzL2ZpZWxkcy9NdWx0aVNlbGVjdE1vZGFsLnRzIiwgInNyYy9maWVsZHMvZmllbGRNYW5hZ2Vycy9GaWxlRmllbGQudHMiLCAic3JjL29wdGlvbk1vZGFscy9maWVsZHMvU2luZ2xlRmlsZU1vZGFsLnRzIiwgInNyYy9maWVsZHMvZmllbGRNYW5hZ2Vycy9EYXRlRmllbGQudHMiLCAic3JjL29wdGlvbk1vZGFscy9maWVsZHMvRGF0ZU1vZGFsLnRzIiwgIm5vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vdHlwZXMvb3B0aW9ucy5qcyIsICJub2RlX21vZHVsZXMvZmxhdHBpY2tyL2Rpc3QvZXNtL2wxMG4vZGVmYXVsdC5qcyIsICJub2RlX21vZHVsZXMvZmxhdHBpY2tyL2Rpc3QvZXNtL3V0aWxzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vdXRpbHMvZG9tLmpzIiwgIm5vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vdXRpbHMvZm9ybWF0dGluZy5qcyIsICJub2RlX21vZHVsZXMvZmxhdHBpY2tyL2Rpc3QvZXNtL3V0aWxzL2RhdGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vdXRpbHMvcG9seWZpbGxzLmpzIiwgIm5vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vaW5kZXguanMiLCAic3JjL2ZpZWxkcy9maWVsZE1hbmFnZXJzL011bHRpRmlsZUZpZWxkLnRzIiwgInNyYy9vcHRpb25Nb2RhbHMvZmllbGRzL011bHRpRmlsZU1vZGFsLnRzIiwgInNyYy9maWVsZHMvZmllbGRNYW5hZ2Vycy9NYW5hZ2Vycy50cyIsICJzcmMvdHlwZXMvZmllbGRUeXBlcy50cyIsICJzcmMvZmllbGRzL0ZpZWxkLnRzIiwgInNyYy9maWxlQ2xhc3MvZmlsZUNsYXNzQXR0cmlidXRlLnRzIiwgInNyYy9maWxlQ2xhc3MvZmlsZUNsYXNzLnRzIiwgInNyYy91dGlscy90ZXh0VXRpbHMudHMiLCAic3JjL3V0aWxzL2RhdGF2aWV3VXRpbHMudHMiLCAic3JjL2ZpbGVDbGFzcy9GaWxlQ2xhc3NBdHRyaWJ1dGVNb2RhbC50cyIsICJzcmMvZmlsZUNsYXNzL0ZpbGVDbGFzc1F1ZXJ5LnRzIiwgInNyYy9jb21tYW5kcy9nZXRWYWx1ZXMudHMiLCAic3JjL2NvbW1hbmRzL2dldEZpZWxkLnRzIiwgInNyYy9vcHRpb25Nb2RhbHMvY2hvb3NlU2VjdGlvbk1vZGFsLnRzIiwgInNyYy9jb21tYW5kcy9maWVsZE1vZGlmaWVyLnRzIiwgInNyYy9jb21tYW5kcy9maWxlRmllbGRzLnRzIiwgInNyYy9NZXRhZGF0YU1lbnVBcGkudHMiLCAic3JjL29wdGlvbnMvRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsLnRzIiwgInNyYy9vcHRpb25zL0ZpbGVDbGFzc09wdGlvbnNMaXN0LnRzIiwgInNyYy9vcHRpb25zL2xpbmtDb250ZXh0TWVudS50cyIsICJzcmMvb3B0aW9ucy9PcHRpb25zTGlzdC50cyIsICJzcmMvc2V0dGluZ3MvTWV0YWRhdGFNZW51U2V0dGluZ3MudHMiLCAic3JjL3NldHRpbmdzL01ldGFkYXRhTWVudVNldHRpbmdUYWIudHMiLCAic3JjL3N1Z2dlc3Rlci9Gb2xkZXJTdWdnZXN0ZXIudHMiLCAic3JjL3NldHRpbmdzL0ZpbGVDbGFzc1F1ZXJ5U2V0dGluZ01vZGFsLnRzIiwgInNyYy9zZXR0aW5ncy9GaWxlQ2xhc3NRdWVyeVNldHRpbmcudHMiLCAic3JjL3NldHRpbmdzL21pZ3JhdGVTZXR0aW5nVjF0b1YyLnRzIiwgInNyYy9zdWdnZXN0ZXIvbWV0YWRhdGFTdWdnZXN0ZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEZpbGVWaWV3LCBNYXJrZG93blZpZXcsIFBsdWdpbiwgVEZpbGUsIFZpZXcgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBvZmYgfSBmcm9tICdwcm9jZXNzJztcbmltcG9ydCB7IGdldEZpZWxkIH0gZnJvbSAnc3JjL2NvbW1hbmRzL2dldEZpZWxkJztcbmltcG9ydCBGaWVsZCBmcm9tICdzcmMvZmllbGRzL0ZpZWxkJztcbmltcG9ydCB7IEZpZWxkTWFuYWdlciBhcyBGTSB9IGZyb20gJ3NyYy9maWVsZHMvRmllbGRNYW5hZ2VyJztcbmltcG9ydCB7IEZpbGVDbGFzcyB9IGZyb20gJ3NyYy9maWxlQ2xhc3MvZmlsZUNsYXNzJztcbmltcG9ydCB7IEZpbGVDbGFzc0F0dHJpYnV0ZU1vZGFsIH0gZnJvbSAnc3JjL2ZpbGVDbGFzcy9GaWxlQ2xhc3NBdHRyaWJ1dGVNb2RhbCc7XG5pbXBvcnQgRmlsZUNsYXNzQXR0cmlidXRlU2VsZWN0TW9kYWwgZnJvbSAnc3JjL2ZpbGVDbGFzcy9GaWxlQ2xhc3NBdHRyaWJ1dGVTZWxlY3RNb2RhbCc7XG5pbXBvcnQgRmlsZUNsYXNzUXVlcnkgZnJvbSAnc3JjL2ZpbGVDbGFzcy9GaWxlQ2xhc3NRdWVyeSc7XG5pbXBvcnQgdHlwZSB7IElNZXRhZGF0YU1lbnVBcGkgfSBmcm9tICdzcmMvTWV0YWRhdGFNZW51QXBpJztcbmltcG9ydCB7IE1ldGFkYXRhTWVudUFwaSB9IGZyb20gJ3NyYy9NZXRhZGF0YU1lbnVBcGknO1xuaW1wb3J0IEZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbCBmcm9tICdzcmMvb3B0aW9ucy9GaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwnO1xuaW1wb3J0IEZpbGVDbGFzc09wdGlvbnNMaXN0IGZyb20gJ3NyYy9vcHRpb25zL0ZpbGVDbGFzc09wdGlvbnNMaXN0JztcbmltcG9ydCBsaW5rQ29udGV4dE1lbnUgZnJvbSBcInNyYy9vcHRpb25zL2xpbmtDb250ZXh0TWVudVwiO1xuaW1wb3J0IE9wdGlvbnNMaXN0IGZyb20gJ3NyYy9vcHRpb25zL09wdGlvbnNMaXN0JztcbmltcG9ydCB7IERFRkFVTFRfU0VUVElOR1MsIE1ldGFkYXRhTWVudVNldHRpbmdzIH0gZnJvbSBcInNyYy9zZXR0aW5ncy9NZXRhZGF0YU1lbnVTZXR0aW5nc1wiO1xuaW1wb3J0IE1ldGFkYXRhTWVudVNldHRpbmdUYWIgZnJvbSBcInNyYy9zZXR0aW5ncy9NZXRhZGF0YU1lbnVTZXR0aW5nVGFiXCI7XG5pbXBvcnQgeyBtaWdyYXRlU2V0dGluZ3NWMXRvVjIgfSBmcm9tICdzcmMvc2V0dGluZ3MvbWlncmF0ZVNldHRpbmdWMXRvVjInO1xuaW1wb3J0IFZhbHVlU3VnZ2VzdCBmcm9tIFwic3JjL3N1Z2dlc3Rlci9tZXRhZGF0YVN1Z2dlc3RlclwiO1xuaW1wb3J0IHsgRmllbGRNYW5hZ2VyIH0gZnJvbSAnc3JjL3R5cGVzL2ZpZWxkVHlwZXMnO1xuaW1wb3J0IHsgZ2VudWluZUtleXMgfSBmcm9tICdzcmMvdXRpbHMvZGF0YXZpZXdVdGlscyc7XG5pbXBvcnQgeyBmcm9udE1hdHRlckxpbmVGaWVsZCwgZ2V0TGluZUZpZWxkcyB9IGZyb20gJ3NyYy91dGlscy9wYXJzZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXRhZGF0YU1lbnUgZXh0ZW5kcyBQbHVnaW4ge1xuXHRwdWJsaWMgYXBpOiBJTWV0YWRhdGFNZW51QXBpO1xuXHRwdWJsaWMgc2V0dGluZ3M6IE1ldGFkYXRhTWVudVNldHRpbmdzO1xuXHRwdWJsaWMgaW5pdGlhbFByb3BlcnRpZXM6IEFycmF5PEZpZWxkPiA9IFtdO1xuXHRwdWJsaWMgaW5pdGlhbEZpbGVDbGFzc1F1ZXJpZXM6IEFycmF5PEZpbGVDbGFzc1F1ZXJ5PiA9IFtdO1xuXHRwdWJsaWMgc2V0dGluZ1RhYjogTWV0YWRhdGFNZW51U2V0dGluZ1RhYjtcblxuXHRhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc29sZS5sb2coJ01ldGFkYXRhIE1lbnUgbG9hZGVkJyk7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5zZXR0aW5nc1ZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0YXdhaXQgbWlncmF0ZVNldHRpbmdzVjF0b1YyKHRoaXMpXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXR0aW5ncy5wcmVzZXRGaWVsZHMuZm9yRWFjaChwcm9wID0+IHtcblx0XHRcdGNvbnN0IHByb3BlcnR5ID0gbmV3IEZpZWxkKCk7XG5cdFx0XHRPYmplY3QuYXNzaWduKHByb3BlcnR5LCBwcm9wKTtcblx0XHRcdHRoaXMuaW5pdGlhbFByb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLnNldHRpbmdzLmZpbGVDbGFzc1F1ZXJpZXMuZm9yRWFjaChxdWVyeSA9PiB7XG5cdFx0XHRjb25zdCBmaWxlQ2xhc3NRdWVyeSA9IG5ldyBGaWxlQ2xhc3NRdWVyeSgpO1xuXHRcdFx0T2JqZWN0LmFzc2lnbihmaWxlQ2xhc3NRdWVyeSwgcXVlcnkpO1xuXHRcdFx0dGhpcy5pbml0aWFsRmlsZUNsYXNzUXVlcmllcy5wdXNoKGZpbGVDbGFzc1F1ZXJ5KTtcblx0XHR9KVxuXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBNZXRhZGF0YU1lbnVTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyRWRpdG9yU3VnZ2VzdChuZXcgVmFsdWVTdWdnZXN0KHRoaXMuYXBwLCB0aGlzKSk7XG5cdFx0dGhpcy5hcGkgPSBuZXcgTWV0YWRhdGFNZW51QXBpKHRoaXMpLm1ha2UoKTtcblxuXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCAobGVhZikgPT4ge1xuXHRcdFx0XHRjb25zdCB2aWV3ID0gbGVhZj8udmlld1xuXHRcdFx0XHR0aGlzLmFkZENvbW1hbmRzKHZpZXcpXG5cdFx0XHR9KVxuXHRcdClcblxuXHRcdHRoaXMuYWRkQ29tbWFuZHModGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KSlcblxuXHRcdG5ldyBsaW5rQ29udGV4dE1lbnUodGhpcyk7XG5cdH07XG5cblx0cHJpdmF0ZSBhZGRGaWxlQ2xhc3NBdHRyaWJ1dGVPcHRpb25zKCkge1xuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogXCJmaWxlQ2xhc3NBdHRyX29wdGlvbnNcIixcblx0XHRcdG5hbWU6IFwiZmlsZUNsYXNzIGF0dHJpYnV0ZXMgb3B0aW9uc1wiLFxuXHRcdFx0aWNvbjogXCJnZWFyXCIsXG5cdFx0XHRjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcblx0XHRcdFx0Y29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldylcblx0XHRcdFx0aWYgKGNoZWNraW5nKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhKHZpZXc/LmZpbGUpICYmIGAke3ZpZXcuZmlsZS5wYXJlbnQucGF0aH0vYCA9PSB0aGlzLnNldHRpbmdzLmNsYXNzRmlsZXNQYXRoXG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgZmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsID0gbmV3IEZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbCh0aGlzLmFwcClcblx0XHRcdFx0Y29uc3Qgb3B0aW9uc0xpc3QgPSBuZXcgRmlsZUNsYXNzT3B0aW9uc0xpc3QodGhpcywgdmlldyEuZmlsZSwgZmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKTtcblx0XHRcdFx0b3B0aW9uc0xpc3QuY3JlYXRlRXh0cmFPcHRpb25MaXN0KCk7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBhZGRJbnNlcnRGaWxlQ2xhc3NBdHRyaWJ1dGUoKSB7XG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiBcImluc2VydF9maWxlQ2xhc3NBdHRyXCIsXG5cdFx0XHRuYW1lOiBcIkluc2VydCBhIG5ldyBmaWxlQ2xhc3MgYXR0cmlidXRlXCIsXG5cdFx0XHRpY29uOiBcImxpc3QtcGx1c1wiLFxuXHRcdFx0Y2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpXG5cdFx0XHRcdGlmIChjaGVja2luZykge1xuXHRcdFx0XHRcdHJldHVybiAhISh2aWV3Py5maWxlKSAmJiBgJHt2aWV3LmZpbGUucGFyZW50LnBhdGh9L2AgPT0gdGhpcy5zZXR0aW5ncy5jbGFzc0ZpbGVzUGF0aFxuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IGZpbGVDbGFzc0F0dHJpYnV0ZU1vZGFsID0gbmV3IEZpbGVDbGFzc0F0dHJpYnV0ZU1vZGFsKHRoaXMsIEZpbGVDbGFzcy5jcmVhdGVGaWxlQ2xhc3ModGhpcywgdmlldyEuZmlsZS5iYXNlbmFtZSkpXG5cdFx0XHRcdGZpbGVDbGFzc0F0dHJpYnV0ZU1vZGFsLm9wZW4oKVxuXHRcdFx0fSxcblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgYWRkSW5zZXJ0RmllbGRBdFBvc2l0aW9uQ29tbWFuZCgpIHtcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6IFwiaW5zZXJ0X2ZpZWxkX2F0X2N1cnNvclwiLFxuXHRcdFx0bmFtZTogXCJpbnNlcnQgZmllbGQgYXQgY3Vyc29yXCIsXG5cdFx0XHRpY29uOiBcImxpc3QtcGx1c1wiLFxuXHRcdFx0Y2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpXG5cdFx0XHRcdGlmIChjaGVja2luZykge1xuXHRcdFx0XHRcdHJldHVybiAhISh2aWV3Py5maWxlICYmIHZpZXcuZmlsZS5wYXJlbnQucGF0aCArIFwiL1wiICE9PSB0aGlzLnNldHRpbmdzLmNsYXNzRmlsZXNQYXRoKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IG9wdGlvbnNMaXN0ID0gbmV3IE9wdGlvbnNMaXN0KHRoaXMsIHZpZXchLmZpbGUsIFwiSW5zZXJ0RmllbGRDb21tYW5kXCIpO1xuXHRcdFx0XHRvcHRpb25zTGlzdC5jcmVhdGVFeHRyYU9wdGlvbkxpc3QoKTtcblx0XHRcdH1cblx0XHR9KVxuXHR9XG5cblx0cHJpdmF0ZSBhZGRGaWVsZENvbW1hbmQoKSB7XG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiBcImZpZWxkX29wdGlvbnNcIixcblx0XHRcdG5hbWU6IFwiZmllbGQgb3B0aW9uc1wiLFxuXHRcdFx0aWNvbjogXCJnZWFyXCIsXG5cdFx0XHRjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcblx0XHRcdFx0Y29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldylcblx0XHRcdFx0aWYgKGNoZWNraW5nKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhKHZpZXc/LmZpbGUgJiYgdmlldy5maWxlLnBhcmVudC5wYXRoICsgXCIvXCIgIT09IHRoaXMuc2V0dGluZ3MuY2xhc3NGaWxlc1BhdGgpXG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgZmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsID0gbmV3IEZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbCh0aGlzLmFwcClcblx0XHRcdFx0Y29uc3Qgb3B0aW9uc0xpc3QgPSBuZXcgT3B0aW9uc0xpc3QodGhpcywgdmlldyEuZmlsZSwgZmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKTtcblx0XHRcdFx0b3B0aW9uc0xpc3QuY3JlYXRlRXh0cmFPcHRpb25MaXN0KCk7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBhZGRNYW5hZ2VGaWVsZEF0Q3Vyc29yQ29tbWFuZCgpIHtcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6IFwiZmllbGRfYXRfY3Vyc29yX29wdGlvbnNcIixcblx0XHRcdG5hbWU6IFwiTWFuYWdlIGZpZWxkIGF0IGN1cnNvclwiLFxuXHRcdFx0aWNvbjogXCJ0ZXh0LWN1cnNvci1pbnB1dFwiLFxuXHRcdFx0Y2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdFx0XHRjb25zdCBlZGl0b3IgPSB2aWV3Py5lZGl0b3I7XG5cdFx0XHRcdGlmIChjaGVja2luZykge1xuXHRcdFx0XHRcdGNvbnN0IGluRmlsZSA9ICEhKHZpZXc/LmZpbGUgJiYgdmlldy5maWxlLnBhcmVudC5wYXRoICsgXCIvXCIgIT09IHRoaXMuc2V0dGluZ3MuY2xhc3NGaWxlc1BhdGgpXG5cdFx0XHRcdFx0cmV0dXJuIGluRmlsZSAmJiBlZGl0b3IgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IG9wdGlvbnNMaXN0ID0gbmV3IE9wdGlvbnNMaXN0KHRoaXMsIHZpZXchLmZpbGUsIFwiTWFuYWdlQXRDdXJzb3JDb21tYW5kXCIpXG5cdFx0XHRcdGNvbnN0IGZyb250bWF0dGVyID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodmlldyEuZmlsZSk/LmZyb250bWF0dGVyO1xuXHRcdFx0XHRpZiAoZnJvbnRtYXR0ZXIgJiYgZWRpdG9yXG5cdFx0XHRcdFx0JiYgZWRpdG9yLmdldEN1cnNvcigpLmxpbmUgPiBmcm9udG1hdHRlci5wb3NpdGlvbi5zdGFydC5saW5lXG5cdFx0XHRcdFx0JiYgZWRpdG9yLmdldEN1cnNvcigpLmxpbmUgPCBmcm9udG1hdHRlci5wb3NpdGlvbi5lbmQubGluZSkge1xuXHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGZyb250TWF0dGVyTGluZUZpZWxkKGVkaXRvci5nZXRMaW5lKGVkaXRvci5nZXRDdXJzb3IoKS5saW5lKSlcblx0XHRcdFx0XHRpZiAoYXR0cmlidXRlKSBvcHRpb25zTGlzdC5jcmVhdGVBbmRPcGVuRmllbGRNb2RhbChhdHRyaWJ1dGUpXG5cdFx0XHRcdH0gZWxzZSBpZiAoZWRpdG9yKSB7XG5cdFx0XHRcdFx0Y29uc3QgeyBhdHRyaWJ1dGUsIHZhbHVlcyB9ID0gZ2V0TGluZUZpZWxkcyhlZGl0b3IuZ2V0TGluZShlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZSkpLmZpbmQoZmllbGQgPT5cblx0XHRcdFx0XHRcdGVkaXRvci5nZXRDdXJzb3IoKS5jaCA8PSBmaWVsZC5pbmRleCArIGZpZWxkLmxlbmd0aFxuXHRcdFx0XHRcdFx0JiYgZWRpdG9yLmdldEN1cnNvcigpLmNoID49IGZpZWxkLmluZGV4KSB8fCB7fTtcblx0XHRcdFx0XHRpZiAoYXR0cmlidXRlKSBvcHRpb25zTGlzdC5jcmVhdGVBbmRPcGVuRmllbGRNb2RhbChhdHRyaWJ1dGUpXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0pXG5cdH1cblxuXHRwcml2YXRlIGFkZENvbW1hbmRzKHZpZXc6IFZpZXcgfCB1bmRlZmluZWQgfCBudWxsKSB7XG5cdFx0aWYgKHZpZXcgJiYgdmlldyBpbnN0YW5jZW9mIEZpbGVWaWV3KSB7XG5cdFx0XHRjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh2aWV3LmZpbGUucGF0aClcblx0XHRcdGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcblx0XHRcdFx0aWYgKGZpbGUucGFyZW50LnBhdGggKyBcIi9cIiA9PSB0aGlzLnNldHRpbmdzLmNsYXNzRmlsZXNQYXRoKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRGaWxlQ2xhc3NBdHRyaWJ1dGVPcHRpb25zKCk7XG5cdFx0XHRcdFx0dGhpcy5hZGRJbnNlcnRGaWxlQ2xhc3NBdHRyaWJ1dGUoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmFkZEZpZWxkQ29tbWFuZCgpO1xuXHRcdFx0XHRcdHRoaXMuYWRkSW5zZXJ0RmllbGRBdFBvc2l0aW9uQ29tbWFuZCgpO1xuXHRcdFx0XHRcdHRoaXMuYWRkTWFuYWdlRmllbGRBdEN1cnNvckNvbW1hbmQoKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9O1xuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzLnByZXNldEZpZWxkcyA9IHRoaXMuaW5pdGlhbFByb3BlcnRpZXM7XG5cdFx0dGhpcy5zZXR0aW5ncy5maWxlQ2xhc3NRdWVyaWVzID0gdGhpcy5pbml0aWFsRmlsZUNsYXNzUXVlcmllcztcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9O1xuXG5cdG9udW5sb2FkKCkge1xuXHRcdGNvbnNvbGUubG9nKCdNZXRhZGF0YSBNZW51IHVubG9hZGVkJyk7XG5cdH07XG59XG4iLCAiaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IHsgQXBwLCBNZW51LCBzZXRJY29uLCBUZXh0QXJlYUNvbXBvbmVudCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwgZnJvbSBcInNyYy9vcHRpb25zL0ZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbFwiO1xuaW1wb3J0IElucHV0TW9kYWwgZnJvbSBcInNyYy9vcHRpb25Nb2RhbHMvZmllbGRzL0lucHV0TW9kYWxcIjtcbmltcG9ydCB7IEZpZWxkSWNvbiwgRmllbGRUeXBlIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcIi4uL0ZpZWxkXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIgfSBmcm9tIFwiLi4vRmllbGRNYW5hZ2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0RmllbGQgZXh0ZW5kcyBGaWVsZE1hbmFnZXIge1xuXG4gICAgY29uc3RydWN0b3IoZmllbGQ6IEZpZWxkKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkLCBGaWVsZFR5cGUuSW5wdXQpXG4gICAgfVxuXG4gICAgZ2V0T3B0aW9uc1N0cigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZC5vcHRpb25zLnRlbXBsYXRlXG4gICAgfVxuXG4gICAgYWRkRmllbGRPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBhcHA6IEFwcCwgZmlsZTogVEZpbGUsIGxvY2F0aW9uOiBNZW51IHwgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IElucHV0TW9kYWwoYXBwLCBmaWxlLCB0aGlzLmZpZWxkLCB2YWx1ZSk7XG4gICAgICAgIG1vZGFsLnRpdGxlRWwuc2V0VGV4dChgQ2hhbmdlIFZhbHVlIGZvciA8JHtuYW1lfT5gKTtcbiAgICAgICAgaWYgKElucHV0RmllbGQuaXNNZW51KGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgbG9jYXRpb24uYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoYFVwZGF0ZSA8JHtuYW1lfT5gKTtcbiAgICAgICAgICAgICAgICBpdGVtLnNldEljb24oRmllbGRJY29uW0ZpZWxkVHlwZS5JbnB1dF0pO1xuICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljaygoKSA9PiBtb2RhbC5vcGVuKCkpO1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0U2VjdGlvbihcIm1ldGFkYXRhLW1lbnUuZmllbGRzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmIChJbnB1dEZpZWxkLmlzU3VnZ2VzdChsb2NhdGlvbikpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLm9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IGB1cGRhdGVfJHtuYW1lfWAsXG4gICAgICAgICAgICAgICAgYWN0aW9uTGFiZWw6IGA8c3Bhbj5VcGRhdGUgPGI+JHtuYW1lfTwvYj48L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IG1vZGFsLm9wZW4oKSxcbiAgICAgICAgICAgICAgICBpY29uOiBGaWVsZEljb25bRmllbGRUeXBlLklucHV0XVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGNyZWF0ZVNldHRpbmdDb250YWluZXIocGFyZW50Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGVDb250YWluZXIgPSBwYXJlbnRDb250YWluZXIuY3JlYXRlRGl2KCk7XG4gICAgICAgIHRlbXBsYXRlQ29udGFpbmVyLmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IFwiVGVtcGxhdGVcIiwgY2xzOiAnbWV0YWRhdGEtbWVudS1maWVsZC1vcHRpb24nIH0pXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlVmFsdWUgPSBuZXcgVGV4dEFyZWFDb21wb25lbnQodGVtcGxhdGVDb250YWluZXIpXG4gICAgICAgIHRlbXBsYXRlVmFsdWUuaW5wdXRFbC5jb2xzID0gNTA7XG4gICAgICAgIHRlbXBsYXRlVmFsdWUuaW5wdXRFbC5yb3dzID0gNDtcbiAgICAgICAgdGVtcGxhdGVWYWx1ZS5zZXRWYWx1ZSh0aGlzLmZpZWxkLm9wdGlvbnMudGVtcGxhdGUgfHwgXCJcIilcbiAgICAgICAgdGVtcGxhdGVWYWx1ZS5vbkNoYW5nZSgodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5maWVsZC5vcHRpb25zLnRlbXBsYXRlID0gdmFsdWU7XG5cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB2YWxpZGF0ZU9wdGlvbnMoKTogYm9vbGVhbiB7XG4gICAgICAgIC8vYWx3YXlzIHRydWUgc2luY2UgdGhlcmUgYXJlIG5vIG9wdGlvbnNcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBjcmVhdGVBbmRPcGVuRmllbGRNb2RhbChhcHA6IEFwcCwgZmlsZTogVEZpbGUsIHNlbGVjdGVkRmllbGROYW1lOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nLCBsaW5lTnVtYmVyPzogbnVtYmVyLCBpbkZyb250bWF0dGVyPzogYm9vbGVhbiwgYWZ0ZXI/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZpZWxkTW9kYWwgPSBuZXcgSW5wdXRNb2RhbChhcHAsIGZpbGUsIHRoaXMuZmllbGQsIHZhbHVlIHx8IFwiXCIsIGxpbmVOdW1iZXIsIGluRnJvbnRtYXR0ZXIsIGFmdGVyKTtcbiAgICAgICAgZmllbGRNb2RhbC50aXRsZUVsLnNldFRleHQoYEVudGVyIHZhbHVlIGZvciAke3NlbGVjdGVkRmllbGROYW1lfWApO1xuICAgICAgICBmaWVsZE1vZGFsLm9wZW4oKTtcbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGVEdkZpZWxkKFxuICAgICAgICBwbHVnaW46IE1ldGFkYXRhTWVudSxcbiAgICAgICAgZHY6IGFueSxcbiAgICAgICAgcDogYW55LFxuICAgICAgICBmaWVsZENvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgICAgIGF0dHJzPzogeyBjbHM/OiBzdHJpbmcsIGF0dHI/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LCBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB9XG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGZpZWxkVmFsdWUgPSBkdi5lbCgnc3BhbicsIHBbdGhpcy5maWVsZC5uYW1lXSwgYXR0cnMpXG4gICAgICAgIGNvbnN0IGlucHV0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKVxuICAgICAgICBpbnB1dC5zZXRBdHRyKFwiY2xhc3NcIiwgXCJtZXRhZGF0YS1tZW51LWR2LWlucHV0XCIpXG4gICAgICAgIGlucHV0Q29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0KVxuICAgICAgICBpbnB1dC52YWx1ZSA9IHBbdGhpcy5maWVsZC5uYW1lXVxuICAgICAgICAvKiBlbmQgc3BhY2VyICovXG4gICAgICAgIGNvbnN0IHNwYWNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgc3BhY2VyLnNldEF0dHIoXCJjbGFzc1wiLCBcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtc3BhY2VyXCIpXG4gICAgICAgIC8qIGJ1dHRvbiB0byBkaXNwbGF5IGlucHV0ICovXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIilcbiAgICAgICAgc2V0SWNvbihidXR0b24sIEZpZWxkSWNvbltGaWVsZFR5cGUuSW5wdXRdKVxuICAgICAgICBidXR0b24uc2V0QXR0cignY2xhc3MnLCBcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtYnV0dG9uXCIpXG4gICAgICAgIGlmICghYXR0cnM/Lm9wdGlvbnM/LmFsd2F5c09uKSB7XG4gICAgICAgICAgICBidXR0b24uaGlkZSgpXG4gICAgICAgICAgICBzcGFjZXIuc2hvdygpXG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5vbm1vdXNlb3ZlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uc2hvdygpXG4gICAgICAgICAgICAgICAgc3BhY2VyLmhpZGUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmllbGRDb250YWluZXIub25tb3VzZW91dCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uaGlkZSgpXG4gICAgICAgICAgICAgICAgc3BhY2VyLnNob3coKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsaWRhdGVJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKVxuICAgICAgICBzZXRJY29uKHZhbGlkYXRlSWNvbiwgXCJjaGVja21hcmtcIilcbiAgICAgICAgdmFsaWRhdGVJY29uLnNldEF0dHIoXCJjbGFzc1wiLCBcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtYnV0dG9uXCIpXG4gICAgICAgIHZhbGlkYXRlSWNvbi5vbmNsaWNrID0gKGUpID0+IHtcbiAgICAgICAgICAgIElucHV0RmllbGQucmVwbGFjZVZhbHVlcyhwbHVnaW4uYXBwLCBwW1wiZmlsZVwiXVtcInBhdGhcIl0sIHRoaXMuZmllbGQubmFtZSwgaW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgZmllbGRDb250YWluZXIucmVtb3ZlQ2hpbGQoaW5wdXRDb250YWluZXIpXG4gICAgICAgIH1cbiAgICAgICAgaW5wdXRDb250YWluZXI/LmFwcGVuZENoaWxkKHZhbGlkYXRlSWNvbilcbiAgICAgICAgY29uc3QgY2FuY2VsSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIilcbiAgICAgICAgY2FuY2VsSWNvbi5zZXRBdHRyKFwiY2xhc3NcIiwgXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLWJ1dHRvblwiKVxuICAgICAgICBzZXRJY29uKGNhbmNlbEljb24sIFwiY3Jvc3NcIik7XG4gICAgICAgIGNhbmNlbEljb24ub25jbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChpbnB1dENvbnRhaW5lcilcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbilcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGZpZWxkVmFsdWUpXG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChzcGFjZXIpXG4gICAgICAgIH1cbiAgICAgICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FuY2VsSWNvbilcbiAgICAgICAgaW5wdXQuZm9jdXMoKVxuXG4gICAgICAgIGlucHV0Lm9ua2V5ZG93biA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgICAgIElucHV0RmllbGQucmVwbGFjZVZhbHVlcyhwbHVnaW4uYXBwLCBwW1wiZmlsZVwiXVtcInBhdGhcIl0sIHRoaXMuZmllbGQubmFtZSwgaW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLnJlbW92ZUNoaWxkKGlucHV0Q29udGFpbmVyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLnJlbW92ZUNoaWxkKGlucHV0Q29udGFpbmVyKVxuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbilcbiAgICAgICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChmaWVsZFZhbHVlKVxuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKHNwYWNlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiBidXR0b24gb24gY2xpY2sgOiByZW1vdmUgYnV0dG9uIGFuZCBmaWVsZCBhbmQgZGlzcGxheSBpbnB1dCBmaWVsZCovXG4gICAgICAgIGJ1dHRvbi5vbmNsaWNrID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkLm9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gcGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocFtcImZpbGVcIl1bXCJwYXRoXCJdKVxuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRNb2RhbCA9IG5ldyBJbnB1dE1vZGFsKHBsdWdpbi5hcHAsIGZpbGUsIHRoaXMuZmllbGQsIHBbdGhpcy5maWVsZC5uYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0TW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChmaWVsZFZhbHVlKVxuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLnJlbW92ZUNoaWxkKGJ1dHRvbilcbiAgICAgICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChzcGFjZXIpXG4gICAgICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXRDb250YWluZXIpXG4gICAgICAgICAgICAgICAgaW5wdXQuZm9jdXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qIGluaXRpYWwgc3RhdGUgKi9cbiAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKVxuICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChmaWVsZFZhbHVlKVxuICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChzcGFjZXIpXG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAsIERyb3Bkb3duQ29tcG9uZW50LCBNb2RhbCwgc2V0SWNvbiwgVGV4dEFyZWFDb21wb25lbnQsIFRleHRDb21wb25lbnQsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBpbnNlcnRWYWx1ZXMgfSBmcm9tIFwic3JjL2NvbW1hbmRzL2luc2VydFZhbHVlc1wiO1xuaW1wb3J0IHsgcmVwbGFjZVZhbHVlcyB9IGZyb20gXCJzcmMvY29tbWFuZHMvcmVwbGFjZVZhbHVlc1wiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCJzcmMvZmllbGRzL0ZpZWxkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuICAgIHByaXZhdGUgdmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIGxpbmVOdW1iZXI6IG51bWJlcjtcbiAgICBwcml2YXRlIGluRnJvbnRtYXR0ZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBhZnRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIGZpZWxkOiBGaWVsZDtcbiAgICBwcml2YXRlIHRlbXBsYXRlVmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gICAgcHJpdmF0ZSByZW5kZXJlZFZhbHVlOiBUZXh0QXJlYUNvbXBvbmVudDtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgZmllbGQ6IEZpZWxkLCB2YWx1ZTogc3RyaW5nLCBsaW5lTnVtYmVyOiBudW1iZXIgPSAtMSwgaW5Gcm9udE1hdHRlcjogYm9vbGVhbiA9IGZhbHNlLCBhZnRlcjogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZU51bWJlcjtcbiAgICAgICAgdGhpcy5pbkZyb250bWF0dGVyID0gaW5Gcm9udE1hdHRlcjtcbiAgICAgICAgdGhpcy5hZnRlciA9IGFmdGVyO1xuICAgIH07XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IGlucHV0RGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIGlmICh0aGlzLmZpZWxkLm9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlRmllbGRSZWdleCA9IG5ldyBSZWdFeHAoYFxcXFx7XFxcXHsoPzxmaWVsZD5bXlxcXFx9XSs/KVxcXFx9XFxcXH1gLCBcImd1XCIpO1xuICAgICAgICAgICAgY29uc3QgdEYgPSB0aGlzLmZpZWxkLm9wdGlvbnMudGVtcGxhdGUubWF0Y2hBbGwodGVtcGxhdGVGaWVsZFJlZ2V4KVxuICAgICAgICAgICAgbGV0IG5leHQgPSB0Ri5uZXh0KCk7XG4gICAgICAgICAgICB3aGlsZSAoIW5leHQuZG9uZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0LnZhbHVlLmdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5leHQudmFsdWUuZ3JvdXBzLmZpZWxkXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtuYW1lLCBvcHRpb25zU3RyaW5nXSA9IHZhbHVlLnNwbGl0KFwiOlwiKS5tYXAodiA9PiB2LnRyaW0oKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVZhbHVlc1tuYW1lXSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0gSlNPTi5wYXJzZShvcHRpb25zU3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRUZW1wbGF0ZVNlbGVjdEl0ZW0oaW5wdXREaXYsIG5hbWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZFRlbXBsYXRlSW5wdXRJdGVtKGlucHV0RGl2LCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXh0ID0gdEYubmV4dCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJ1aWxkUmVzdWx0UHJldmlldyhpbnB1dERpdik7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkU2F2ZUJ0bihpbnB1dERpdik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkSW5wdXRFbChpbnB1dERpdik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSByZW5kZXJWYWx1ZSgpIHtcbiAgICAgICAgbGV0IHJlbmRlcmVkU3RyaW5nID0gdGhpcy5maWVsZC5vcHRpb25zLnRlbXBsYXRlLnNsaWNlKClcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy50ZW1wbGF0ZVZhbHVlcykuZm9yRWFjaChrID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkUmVnZXggPSBuZXcgUmVnRXhwKGBcXFxce1xcXFx7JHtrLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyl9KDpbXlxcXFx9XSopP1xcXFx9XFxcXH1gLCBcInVcIilcbiAgICAgICAgICAgIHJlbmRlcmVkU3RyaW5nID0gcmVuZGVyZWRTdHJpbmcucmVwbGFjZShmaWVsZFJlZ2V4LCB0aGlzLnRlbXBsYXRlVmFsdWVzW2tdKVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMucmVuZGVyZWRWYWx1ZS5zZXRWYWx1ZShyZW5kZXJlZFN0cmluZylcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1aWxkVGVtcGxhdGVJbnB1dEl0ZW0oaW5wdXREaXY6IEhUTUxEaXZFbGVtZW50LCBuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaW5wdXREaXYuY3JlYXRlRGl2KHsgdGV4dDogbmFtZSwgY2xzOiBcIm1ldGFkYXRhLW1lbnUtaW5wdXQtbGFiZWxcIiB9KTtcbiAgICAgICAgY29uc3QgaW5wdXRFbCA9IG5ldyBUZXh0Q29tcG9uZW50KGlucHV0RGl2KTtcbiAgICAgICAgaW5wdXRFbC5zZXRQbGFjZWhvbGRlcihgRW50ZXIgYSB2YWx1ZSBmb3IgJHtuYW1lfWApO1xuICAgICAgICBpbnB1dEVsLmlucHV0RWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXByb21wdC1pbnB1dFwiKTtcbiAgICAgICAgaW5wdXRFbC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlVmFsdWVzW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclZhbHVlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRUZW1wbGF0ZVNlbGVjdEl0ZW0oaW5wdXREaXY6IEhUTUxEaXZFbGVtZW50LCBuYW1lOiBzdHJpbmcsIG9wdGlvbnM6IHN0cmluZ1tdKSB7XG4gICAgICAgIGlucHV0RGl2LmNyZWF0ZURpdih7IHRleHQ6IG5hbWUsIGNsczogXCJtZXRhZGF0YS1tZW51LWlucHV0LWxhYmVsXCIgfSk7XG4gICAgICAgIGNvbnN0IHNlbGVjdEVsID0gbmV3IERyb3Bkb3duQ29tcG9uZW50KGlucHV0RGl2KTtcbiAgICAgICAgc2VsZWN0RWwuYWRkT3B0aW9uKFwiXCIsIFwiLS1zZWxlY3QtLVwiKVxuICAgICAgICBvcHRpb25zLmZvckVhY2gobyA9PiBzZWxlY3RFbC5hZGRPcHRpb24obywgbykpO1xuICAgICAgICBzZWxlY3RFbC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlVmFsdWVzW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclZhbHVlKCk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidWlsZFJlc3VsdFByZXZpZXcoaW5wdXREaXY6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIGlucHV0RGl2LmNyZWF0ZUVsKFwiaHJcIilcbiAgICAgICAgaW5wdXREaXYuY3JlYXRlRGl2KHsgdGV4dDogXCJSZXN1bHQgcHJldmlld1wiLCBjbHM6IFwibWV0YWRhdGEtbWVudS1pbnB1dC1sYWJlbFwiIH0pO1xuICAgICAgICBjb25zdCByZW5kZXJlZFZhbHVlQ29udGFpbmVyID0gaW5wdXREaXYuY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMucmVuZGVyZWRWYWx1ZSA9IG5ldyBUZXh0QXJlYUNvbXBvbmVudChyZW5kZXJlZFZhbHVlQ29udGFpbmVyKVxuICAgICAgICB0aGlzLnJlbmRlcmVkVmFsdWUuaW5wdXRFbC5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtcHJvbXB0LWlucHV0XCIpO1xuICAgICAgICB0aGlzLnJlbmRlcmVkVmFsdWUuaW5wdXRFbC5yb3dzID0gMztcbiAgICAgICAgdGhpcy5yZW5kZXJlZFZhbHVlLnNldFZhbHVlKHRoaXMudmFsdWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRTYXZlQnRuKGlucHV0RGl2OiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBpbnB1dERpdi5jcmVhdGVFbChcImhyXCIpXG4gICAgICAgIGNvbnN0IHNhdmVCdG5Db250YWluZXIgPSBpbnB1dERpdi5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS10ZXh0YXJlYS1idXR0b25zXCIgfSlcbiAgICAgICAgY29uc3Qgc2F2ZUJ0biA9IHNhdmVCdG5Db250YWluZXIuY3JlYXRlRWwoXCJidXR0b25cIilcbiAgICAgICAgc2V0SWNvbihzYXZlQnRuLCBcImNoZWNrbWFya1wiKTtcbiAgICAgICAgc2F2ZUJ0bi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGlucHV0VmFsdWUgPSB0aGlzLnJlbmRlcmVkVmFsdWUuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpbmVOdW1iZXIgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCByZXBsYWNlVmFsdWVzKHRoaXMuYXBwLCB0aGlzLmZpbGUsIHRoaXMuZmllbGQubmFtZSwgaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IGluc2VydFZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIGlucHV0VmFsdWUsIHRoaXMubGluZU51bWJlciwgdGhpcy5pbkZyb250bWF0dGVyLCB0aGlzLmFmdGVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1aWxkSW5wdXRFbChpbnB1dERpdjogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZm9ybSA9IGlucHV0RGl2LmNyZWF0ZUVsKFwiZm9ybVwiKTtcbiAgICAgICAgZm9ybS50eXBlID0gXCJzdWJtaXRcIjtcblxuICAgICAgICBjb25zdCBpbnB1dEVsID0gbmV3IFRleHRDb21wb25lbnQoZm9ybSk7XG4gICAgICAgIGlucHV0RWwuaW5wdXRFbC5mb2N1cygpO1xuXG4gICAgICAgIGlucHV0RWwuc2V0VmFsdWUoYCR7dGhpcy52YWx1ZX1gKTtcblxuICAgICAgICBpbnB1dEVsLmlucHV0RWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXByb21wdC1pbnB1dFwiKTtcblxuICAgICAgICBmb3JtLm9uc3VibWl0ID0gYXN5bmMgKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBsZXQgaW5wdXRWYWx1ZSA9IGlucHV0RWwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpbmVOdW1iZXIgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCByZXBsYWNlVmFsdWVzKHRoaXMuYXBwLCB0aGlzLmZpbGUsIHRoaXMuZmllbGQubmFtZSwgaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IGluc2VydFZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIGlucHV0VmFsdWUsIHRoaXMubGluZU51bWJlciwgdGhpcy5pbkZyb250bWF0dGVyLCB0aGlzLmFmdGVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH07XG4gICAgfTtcbn07IiwgImltcG9ydCB7IEFwcCwgTWFya2Rvd25WaWV3LCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5zZXJ0VmFsdWVzKFxuICAgIGFwcDogQXBwLFxuICAgIGZpbGVPckZpbGVQYXRoOiBURmlsZSB8IHN0cmluZyxcbiAgICBmaWVsZE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nLFxuICAgIGxpbmVOdW1iZXI/OiBudW1iZXIsXG4gICAgaW5Gcm9udG1hdHRlcj86IGJvb2xlYW4sXG4gICAgYWZ0ZXI6IGJvb2xlYW4gPSB0cnVlXG4pOiBQcm9taXNlPHZvaWQ+IHtcblxuICAgIGxldCBmaWxlOiBURmlsZTtcbiAgICBpZiAoZmlsZU9yRmlsZVBhdGggaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICBmaWxlID0gZmlsZU9yRmlsZVBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgX2ZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVPckZpbGVQYXRoKVxuICAgICAgICBpZiAoX2ZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiBfZmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICBmaWxlID0gX2ZpbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInBhdGggZG9lc24ndCBjb3JyZXNwb25kIHRvIGEgcHJvcGVyIGZpbGVcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXBwLnZhdWx0LnJlYWQoZmlsZSlcbiAgICBsZXQgbmV3Q29udGVudDogc3RyaW5nW10gPSBbXTtcblxuICAgIHJlc3VsdC5zcGxpdChcIlxcblwiKS5mb3JFYWNoKChsaW5lLCBfbGluZU51bWJlcikgPT4ge1xuICAgICAgICBpZiAoX2xpbmVOdW1iZXIgPT0gbGluZU51bWJlcikge1xuICAgICAgICAgICAgaWYgKGFmdGVyKSBuZXdDb250ZW50LnB1c2gobGluZSk7XG4gICAgICAgICAgICBuZXdDb250ZW50LnB1c2goYCR7ZmllbGROYW1lfSR7aW5Gcm9udG1hdHRlciA/IFwiOlwiIDogXCI6OlwifSAke3ZhbHVlfWApO1xuICAgICAgICAgICAgaWYgKCFhZnRlcikgbmV3Q29udGVudC5wdXNoKGxpbmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKGxpbmUpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhd2FpdCBhcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0NvbnRlbnQuam9pbignXFxuJykpO1xuICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk/LmVkaXRvclxuICAgIGlmIChlZGl0b3IpIHtcbiAgICAgICAgY29uc3QgbGluZU51bWJlciA9IGVkaXRvci5nZXRDdXJzb3IoKS5saW5lXG4gICAgICAgIGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZSwgY2g6IGVkaXRvci5nZXRMaW5lKGxpbmVOdW1iZXIpLmxlbmd0aCB9KVxuICAgIH1cbn0iLCAiaW1wb3J0IHsgQXBwLCBNYXJrZG93blZpZXcsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBmaWVsZENvbXBvbmVudHMsIGlubGluZUZpZWxkUmVnZXgsIGVuY29kZUxpbmssIGRlY29kZUxpbmsgfSBmcm9tIFwic3JjL3V0aWxzL3BhcnNlclwiO1xuXG5jb25zdCBlbnVtIExvY2F0aW9uIHtcbiAgICAnZnVsbExpbmUnID0gJ2Z1bGxMaW5lJyxcbiAgICAnYnJhY2tldHMnID0gJ2JyYWNrZXRzJyxcbiAgICAncGFyZW50aGVzaXMnID0gJ3BhcmVudGhlc2lzJ1xufVxuXG5jb25zdCBMb2NhdGlvbldyYXBwZXI6IFJlY29yZDxrZXlvZiB0eXBlb2YgTG9jYXRpb24sIHsgc3RhcnQ6IFwiXCIgfCBcIltcIiB8IFwiKFwiLCBlbmQ6IFwiXCIgfCBcIl1cIiB8IFwiKVwiIH0+ID0ge1xuICAgIFwiZnVsbExpbmVcIjogeyBzdGFydDogXCJcIiwgZW5kOiBcIlwiIH0sXG4gICAgXCJicmFja2V0c1wiOiB7IHN0YXJ0OiBcIltcIiwgZW5kOiBcIl1cIiB9LFxuICAgIFwicGFyZW50aGVzaXNcIjogeyBzdGFydDogXCIoXCIsIGVuZDogXCIpXCIgfVxufVxuXG50eXBlIEZpZWxkUmVwbGFjZSA9IHtcbiAgICBvbGRGaWVsZDogc3RyaW5nLFxuICAgIG5ld0ZpZWxkOiBzdHJpbmcsXG59XG5cbmV4cG9ydCBjb25zdCBtYXRjaElubGluZUZpZWxkcyA9IChyZWdleDogUmVnRXhwLCBsaW5lOiBzdHJpbmcsIGF0dHJpYnV0ZTogc3RyaW5nLCBpbnB1dDogc3RyaW5nLCBsb2NhdGlvbjoga2V5b2YgdHlwZW9mIExvY2F0aW9uID0gXCJmdWxsTGluZVwiKTogRmllbGRSZXBsYWNlW10gPT4ge1xuICAgIGNvbnN0IHNSID0gbGluZS5tYXRjaEFsbChyZWdleCk7XG4gICAgbGV0IG5leHQgPSBzUi5uZXh0KCk7XG4gICAgY29uc3QgbmV3RmllbGRzOiBGaWVsZFJlcGxhY2VbXSA9IFtdO1xuICAgIHdoaWxlICghbmV4dC5kb25lKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbmV4dC52YWx1ZTtcbiAgICAgICAgaWYgKG1hdGNoLmdyb3VwcyAmJiBPYmplY3Qua2V5cyhtYXRjaC5ncm91cHMpLmV2ZXJ5KGogPT4gZmllbGRDb21wb25lbnRzLmluY2x1ZGVzKGopKSkge1xuICAgICAgICAgICAgY29uc3QgeyBpbkxpc3QsIGluUXVvdGUsIHN0YXJ0U3R5bGUsIGVuZFN0eWxlLCBiZWZvcmVTZXBhcmF0b3JTcGFjZXIsIGFmdGVyU2VwYXJhdG9yU3BhY2VyLCB2YWx1ZXMgfSA9IG1hdGNoLmdyb3Vwc1xuICAgICAgICAgICAgY29uc3QgaW5wdXRBcnJheSA9IGlucHV0ID8gaW5wdXQucmVwbGFjZSgvKFxcLFxccyspL2csICcsJykuc3BsaXQoJywnKSA6IFtcIlwiXTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gaW5wdXRBcnJheS5sZW5ndGggPT0gMSA/IGlucHV0QXJyYXlbMF0gOiBgJHtpbnB1dEFycmF5LmpvaW4oJywgJyl9YDtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gTG9jYXRpb25XcmFwcGVyW2xvY2F0aW9uXS5zdGFydDtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IExvY2F0aW9uV3JhcHBlcltsb2NhdGlvbl0uZW5kO1xuICAgICAgICAgICAgbmV3RmllbGRzLnB1c2goe1xuICAgICAgICAgICAgICAgIG9sZEZpZWxkOiBtYXRjaFswXSxcbiAgICAgICAgICAgICAgICBuZXdGaWVsZDogYCR7aW5RdW90ZSB8fCBcIlwifSR7c3RhcnR9JHtpbkxpc3QgfHwgXCJcIn0ke3N0YXJ0U3R5bGV9JHthdHRyaWJ1dGV9JHtlbmRTdHlsZX0ke2JlZm9yZVNlcGFyYXRvclNwYWNlcn06OiR7YWZ0ZXJTZXBhcmF0b3JTcGFjZXJ9JHtuZXdWYWx1ZX0ke2VuZH1gLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBuZXh0ID0gc1IubmV4dCgpXG4gICAgfVxuICAgIHJldHVybiBuZXdGaWVsZHNcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcGxhY2VWYWx1ZXMoXG4gICAgYXBwOiBBcHAsXG4gICAgZmlsZU9yRmlsZVBhdGg6IFRGaWxlIHwgc3RyaW5nLFxuICAgIGF0dHJpYnV0ZTogc3RyaW5nLFxuICAgIGlucHV0OiBzdHJpbmdcbik6IFByb21pc2U8dm9pZD4ge1xuICAgIGxldCBmaWxlOiBURmlsZTtcbiAgICBpZiAoZmlsZU9yRmlsZVBhdGggaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICBmaWxlID0gZmlsZU9yRmlsZVBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgX2ZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVPckZpbGVQYXRoKVxuICAgICAgICBpZiAoX2ZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiBfZmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICBmaWxlID0gX2ZpbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInBhdGggZG9lc24ndCBjb3JyZXNwb25kIHRvIGEgcHJvcGVyIGZpbGVcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY29udGVudCA9IChhd2FpdCBhcHAudmF1bHQuY2FjaGVkUmVhZChmaWxlKSkuc3BsaXQoJ1xcbicpO1xuICAgIGNvbnN0IGZyb250bWF0dGVyID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk/LmZyb250bWF0dGVyO1xuICAgIGNvbnN0IHsgcG9zaXRpb246IHsgc3RhcnQsIGVuZCB9IH0gPSBmcm9udG1hdHRlciA/IGZyb250bWF0dGVyIDogeyBwb3NpdGlvbjogeyBzdGFydDogdW5kZWZpbmVkLCBlbmQ6IHVuZGVmaW5lZCB9IH07XG4gICAgY29uc3QgbmV3Q29udGVudCA9IGNvbnRlbnQubWFwKChsaW5lLCBpKSA9PiB7XG4gICAgICAgIGlmIChmcm9udG1hdHRlciAmJiBpID49IHN0YXJ0LmxpbmUgJiYgaSA8PSBlbmQubGluZSkge1xuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGAke2F0dHJpYnV0ZX06YCwgJ3UnKTtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBsaW5lLm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgICAgIGlmIChyICYmIHIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0QXJyYXkgPSBpbnB1dCA/IGlucHV0LnJlcGxhY2UoLyhcXCxcXHMrKS9nLCAnLCcpLnNwbGl0KCcsJykgOiBbXCJcIl07XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBpbnB1dEFycmF5Lmxlbmd0aCA9PSAxID8gaW5wdXRBcnJheVswXSA6IGBbJHtpbnB1dEFycmF5LmpvaW4oJywgJyl9XWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2F0dHJpYnV0ZX06ICR7bmV3VmFsdWV9YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkSW5wdXQgPSBlbmNvZGVMaW5rKGlucHV0KVxuICAgICAgICAgICAgbGV0IGVuY29kZWRMaW5lID0gZW5jb2RlTGluayhsaW5lKVxuICAgICAgICAgICAgY29uc3QgZnVsbExpbmVSZWdleCA9IG5ldyBSZWdFeHAoYF4ke2lubGluZUZpZWxkUmVnZXgoYXR0cmlidXRlKX1gLCBcInVcIik7XG4gICAgICAgICAgICBjb25zdCBmUiA9IGVuY29kZWRMaW5lLm1hdGNoKGZ1bGxMaW5lUmVnZXgpO1xuICAgICAgICAgICAgaWYgKGZSPy5ncm91cHMgJiYgT2JqZWN0LmtleXMoZlIuZ3JvdXBzKS5ldmVyeShqID0+IGZpZWxkQ29tcG9uZW50cy5pbmNsdWRlcyhqKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGluTGlzdCwgaW5RdW90ZSwgc3RhcnRTdHlsZSwgZW5kU3R5bGUsIGJlZm9yZVNlcGFyYXRvclNwYWNlciwgYWZ0ZXJTZXBhcmF0b3JTcGFjZXIsIHZhbHVlcyB9ID0gZlIuZ3JvdXBzXG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXRBcnJheSA9IGlucHV0ID8gaW5wdXQucmVwbGFjZSgvKFxcLFxccyspL2csICcsJykuc3BsaXQoJywnKSA6IFtcIlwiXTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGlucHV0QXJyYXkubGVuZ3RoID09IDEgPyBpbnB1dEFycmF5WzBdIDogYCR7aW5wdXRBcnJheS5qb2luKCcsICcpfWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2luUXVvdGUgfHwgXCJcIn0ke2luTGlzdCB8fCBcIlwifSR7c3RhcnRTdHlsZX0ke2F0dHJpYnV0ZX0ke2VuZFN0eWxlfSR7YmVmb3JlU2VwYXJhdG9yU3BhY2VyfTo6JHthZnRlclNlcGFyYXRvclNwYWNlcn0ke25ld1ZhbHVlfWA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0ZpZWxkczogRmllbGRSZXBsYWNlW10gPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCBpblNlbnRlbmNlUmVnZXhCcmFja2V0cyA9IG5ldyBSZWdFeHAoYFxcXFxbJHtpbmxpbmVGaWVsZFJlZ2V4KGF0dHJpYnV0ZSl9XFxcXF1gLCBcImd1XCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluU2VudGVuY2VSZWdleFBhciA9IG5ldyBSZWdFeHAoYFxcXFwoJHtpbmxpbmVGaWVsZFJlZ2V4KGF0dHJpYnV0ZSl9XFxcXClgLCBcImd1XCIpO1xuICAgICAgICAgICAgICAgIG5ld0ZpZWxkcy5wdXNoKC4uLm1hdGNoSW5saW5lRmllbGRzKGluU2VudGVuY2VSZWdleEJyYWNrZXRzLCBlbmNvZGVkTGluZSwgYXR0cmlidXRlLCBlbmNvZGVkSW5wdXQsIExvY2F0aW9uLmJyYWNrZXRzKSlcbiAgICAgICAgICAgICAgICBuZXdGaWVsZHMucHVzaCguLi5tYXRjaElubGluZUZpZWxkcyhpblNlbnRlbmNlUmVnZXhQYXIsIGVuY29kZWRMaW5lLCBhdHRyaWJ1dGUsIGVuY29kZWRJbnB1dCwgTG9jYXRpb24ucGFyZW50aGVzaXMpKVxuICAgICAgICAgICAgICAgIG5ld0ZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRSZWdleCA9IG5ldyBSZWdFeHAoZmllbGQub2xkRmllbGQucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKSwgXCJ1XCIpXG4gICAgICAgICAgICAgICAgICAgIGVuY29kZWRMaW5lID0gZW5jb2RlZExpbmUucmVwbGFjZShmaWVsZFJlZ2V4LCBmaWVsZC5uZXdGaWVsZCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlTGluayhlbmNvZGVkTGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIGF3YWl0IGFwcC52YXVsdC5tb2RpZnkoZmlsZSwgbmV3Q29udGVudC5qb2luKCdcXG4nKSk7XG4gICAgY29uc3QgZWRpdG9yID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KT8uZWRpdG9yXG4gICAgaWYgKGVkaXRvcikge1xuICAgICAgICBjb25zdCBsaW5lTnVtYmVyID0gZWRpdG9yLmdldEN1cnNvcigpLmxpbmVcbiAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGVkaXRvci5nZXRDdXJzb3IoKS5saW5lLCBjaDogZWRpdG9yLmdldExpbmUobGluZU51bWJlcikubGVuZ3RoIH0pXG4gICAgfVxufSIsICJleHBvcnQgY29uc3QgZmllbGRDb21wb25lbnRzID0gWydpblF1b3RlJywgJ2luTGlzdCcsICdzdGFydFN0eWxlJywgJ2F0dHJpYnV0ZScsICdlbmRTdHlsZScsICdiZWZvcmVTZXBhcmF0b3JTcGFjZXInLCAnYWZ0ZXJTZXBhcmF0b3JTcGFjZXInLCAndmFsdWVzJ11cblxuZXhwb3J0IGNvbnN0IGdlbmVyaWNGaWVsZFJlZ2V4ID0gXCIoPzxpblF1b3RlPlxcPihcXFxccyspPyk/KD88aW5MaXN0Pi0gKT8oPzxzdGFydFN0eWxlPltfXFxcXCp+YF0qKSg/PGF0dHJpYnV0ZT5bMC05XFxcXHdcXFxccHtMZXR0ZXJ9XFxcXHB7RW1vamlfUHJlc2VudGF0aW9ufV1bLTAtOVxcXFx3XFxcXHB7TGV0dGVyfVxcXFxwe0Vtb2ppX1ByZXNlbnRhdGlvbn1cXFxcc10qKSg/PGVuZFN0eWxlPltfXFxcXCp+YF0qKSg/PGJlZm9yZVNlcGFyYXRvclNwYWNlcj5cXFxccyopXCI7XG5cbmV4cG9ydCBjb25zdCBpbmxpbmVGaWVsZFJlZ2V4ID0gKGF0dHJpYnV0ZTogc3RyaW5nKSA9PiBgKD88aW5RdW90ZT5cXD4oXFxcXHMrKT8pPyg/PGluTGlzdD4tICk/KD88c3RhcnRTdHlsZT5bX1xcXFwqflxcYF0qKSg/PGF0dHJpYnV0ZT4ke2F0dHJpYnV0ZX0pKD88ZW5kU3R5bGU+W19cXFxcKn5cXGBdKikoPzxiZWZvcmVTZXBhcmF0b3JTcGFjZXI+XFxcXHMqKTo6KD88YWZ0ZXJTZXBhcmF0b3JTcGFjZXI+XFxcXHMqKSg/PHZhbHVlcz5bXlxcXFxdXSopYDtcblxuZXhwb3J0IGNvbnN0IGZ1bGxMaW5lUmVnZXggPSBuZXcgUmVnRXhwKGBeJHtnZW5lcmljRmllbGRSZWdleH06OlxccyooPzx2YWx1ZXM+LiopP2AsIFwidVwiKTtcblxuLy9zZWFyY2ggZm9yIHRoZW1cbmV4cG9ydCBjb25zdCBpblNlbnRlbmNlUmVnZXhCcmFja2V0cyA9IG5ldyBSZWdFeHAoYFxcXFxbJHtnZW5lcmljRmllbGRSZWdleH06OlxccyooPzx2YWx1ZXM+W15cXFxcXV0rKT9cXFxcXWAsIFwiZ3VcIik7XG5leHBvcnQgY29uc3QgaW5TZW50ZW5jZVJlZ2V4UGFyID0gbmV3IFJlZ0V4cChgXFxcXCgke2dlbmVyaWNGaWVsZFJlZ2V4fTo6XFxzKig/PHZhbHVlcz5bXlxcXFxdXSspP1xcXFwpYCwgXCJndVwiKTtcblxuZXhwb3J0IGNvbnN0IGVuY29kZUxpbmsgPSAodmFsdWU6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgLyogcmVwbGFjZSBsaW5rIGJyYWNrZXRzIGJ5IFwiaW1wb3NzaWJsZVwiIGNvbWJpbmF0aW9uIG9mIGNoYXJhY3RlcnMgc28gdGhhdCB0aGV5IHdvbid0IGJlIG1peGVkIHVwIHdpdGggaW5TZW50ZW5jZSBmaWVsZCBicmFja2V0cyB3aGVuIHNlYWNoaW5nIHdpdGggcmVnZXgqL1xuICAgIHJldHVybiB2YWx1ZSA/IHZhbHVlXG4gICAgICAgIC5yZXBsYWNlKC9cXFtcXFsvZywgXCJcdUQ4M0RcdUREMjdcdUQ4M0RcdURDMDBcIilcbiAgICAgICAgLnJlcGxhY2UoL1xcXVxcXS9nLCBcIlx1RDgzRFx1REMxM1x1RDgzRFx1REQ0Q1wiKSA6IHZhbHVlXG59XG5cbmV4cG9ydCBjb25zdCBkZWNvZGVMaW5rID0gKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgIC8qIHJlcGxhY2UgbGluayBicmFja2V0cyBieSBcImltcG9zc2libGVcIiBjb21iaW5hdGlvbiBvZiBjaGFyYWN0ZXJzIHNvIHRoYXQgdGhleSB3b24ndCBiZSBtaXhlZCB1cCB3aXRoIGluU2VudGVuY2UgZmllbGQgYnJhY2tldHMgd2hlbiBzZWFjaGluZyB3aXRoIHJlZ2V4Ki9cbiAgICByZXR1cm4gdmFsdWUgPyB2YWx1ZVxuICAgICAgICAucmVwbGFjZSgvXHVEODNEXHVERDI3XHVEODNEXHVEQzAwL2d1LCBcIltbXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cdUQ4M0RcdURDMTNcdUQ4M0RcdURENEMvZ3UsIFwiXV1cIikgOiB2YWx1ZVxufVxuXG5leHBvcnQgY29uc3QgZnJvbnRNYXR0ZXJMaW5lRmllbGQgPSAobGluZTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgICBjb25zdCBmcm9udE1hdHRlclJlZ2V4ID0gbmV3IFJlZ0V4cCgvKD88YXR0cmlidXRlPlswLTlcXHdcXHB7TGV0dGVyfVxccHtFbW9qaV9QcmVzZW50YXRpb259XVstMC05XFx3XFxwe0xldHRlcn1cXHB7RW1vamlfUHJlc2VudGF0aW9ufVxcc10qKSg/PGJlZm9yZVNlcGFyYXRvclNwYWNlcj5cXHMqKTooPzxhZnRlclNlcGFyYXRvclNwYWNlcj5cXHMqKSg/PHZhbHVlcz4uKikvdSlcbiAgICBjb25zdCBmUiA9IGxpbmUubWF0Y2goZnJvbnRNYXR0ZXJSZWdleCk7XG5cbiAgICBpZiAoZlI/Lmdyb3Vwcykge1xuICAgICAgICBjb25zdCB7IGF0dHJpYnV0ZSwgdmFsdWVzIH0gPSBmUj8uZ3JvdXBzXG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRMaW5lRmllbGRzID0gKGxpbmU6IHN0cmluZyk6IHsgYXR0cmlidXRlOiBzdHJpbmcsIHZhbHVlczogc3RyaW5nLCBpbmRleDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciB9W10gPT4ge1xuICAgIGNvbnN0IGZpZWxkczogeyBhdHRyaWJ1dGU6IHN0cmluZywgdmFsdWVzOiBzdHJpbmcsIGluZGV4OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyIH1bXSA9IFtdXG4gICAgY29uc3QgZlIgPSBsaW5lLm1hdGNoKGZ1bGxMaW5lUmVnZXgpO1xuICAgIGlmIChmUj8uZ3JvdXBzKSB7XG4gICAgICAgIGNvbnN0IHsgYXR0cmlidXRlLCB2YWx1ZXMgfSA9IGZSPy5ncm91cHNcbiAgICAgICAgZmllbGRzLnB1c2goeyBhdHRyaWJ1dGUsIHZhbHVlcywgaW5kZXg6IDAsIGxlbmd0aDogbGluZS5sZW5ndGggfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzUkJrID0gZW5jb2RlTGluayhsaW5lKS5tYXRjaEFsbChpblNlbnRlbmNlUmVnZXhCcmFja2V0cyk7XG4gICAgICAgIGxldCBuZXh0ID0gc1JCay5uZXh0KCk7XG4gICAgICAgIHdoaWxlICghbmV4dC5kb25lKSB7XG4gICAgICAgICAgICBpZiAobmV4dC52YWx1ZS5ncm91cHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGF0dHJpYnV0ZSwgdmFsdWVzIH0gPSBuZXh0LnZhbHVlLmdyb3VwcztcbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCh7IGF0dHJpYnV0ZSwgdmFsdWVzOiBkZWNvZGVMaW5rKHZhbHVlcyksIGluZGV4OiBuZXh0LnZhbHVlLmluZGV4IHx8IDAsIGxlbmd0aDogbmV4dC52YWx1ZVswXS5sZW5ndGggfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0ID0gc1JCay5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc1JCYyA9IGVuY29kZUxpbmsobGluZSkubWF0Y2hBbGwoaW5TZW50ZW5jZVJlZ2V4UGFyKTtcbiAgICAgICAgbmV4dCA9IHNSQmMubmV4dCgpO1xuICAgICAgICB3aGlsZSAoIW5leHQuZG9uZSkge1xuICAgICAgICAgICAgaWYgKG5leHQudmFsdWUuZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBhdHRyaWJ1dGUsIHZhbHVlcyB9ID0gbmV4dC52YWx1ZS5ncm91cHM7XG4gICAgICAgICAgICAgICAgZmllbGRzLnB1c2goeyBhdHRyaWJ1dGUsIHZhbHVlczogZGVjb2RlTGluayh2YWx1ZXMpLCBpbmRleDogbmV4dC52YWx1ZS5pbmRleCB8fCAwLCBsZW5ndGg6IG5leHQudmFsdWVbMF0ubGVuZ3RoIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dCA9IHNSQmMubmV4dCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpZWxkcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGlmIChhLmluZGV4IDwgYi5pbmRleCkgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYS5pbmRleCA+IGIuaW5kZXgpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gMFxuICAgIH0pXG4gICAgcmV0dXJuIGZpZWxkc1xufSAgICIsICJpbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBBcHAsIE1lbnUsIFRleHRDb21wb25lbnQsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5pbXBvcnQgeyBGaWxlQ2xhc3MgfSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9maWxlQ2xhc3NcIjtcbmltcG9ydCBGQ1NNIGZyb20gXCJzcmMvb3B0aW9ucy9GaWVsZENvbW1hbmRTdWdnZXN0TW9kYWxcIjtcbmltcG9ydCBJbnNlcnRGaWVsZFN1Z2dlc3RNb2RhbCBmcm9tIFwic3JjL29wdGlvbk1vZGFscy9pbnNlcnRGaWVsZFN1Z2dlc3RNb2RhbFwiO1xuaW1wb3J0IEZpZWxkU2V0dGluZ3NNb2RhbCBmcm9tIFwic3JjL3NldHRpbmdzL0ZpZWxkU2V0dGluZ3NNb2RhbFwiO1xuaW1wb3J0IHsgRmllbGRNYW5hZ2VyIGFzIEZNLCBGaWVsZFR5cGUgfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwiLi9GaWVsZFwiO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRNYW5hZ2VyIHtcbiAgICBmaWVsZDogRmllbGQ7XG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIFNldHRpbmdMb2NhdGlvbiB7XG4gICAgXCJQbHVnaW5TZXR0aW5nc1wiLFxuICAgIFwiRmlsZUNsYXNzQXR0cmlidXRlU2V0dGluZ3NcIlxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRmllbGRNYW5hZ2VyIHtcblxuICAgIGFic3RyYWN0IGFkZEZpZWxkT3B0aW9uKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBsb2NhdGlvbjogTWVudSB8IEZDU00pOiB2b2lkO1xuICAgIGFic3RyYWN0IHZhbGlkYXRlT3B0aW9ucygpOiBib29sZWFuO1xuICAgIGFic3RyYWN0IGNyZWF0ZVNldHRpbmdDb250YWluZXIocGFyZW50Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUsIGxvY2F0aW9uPzogU2V0dGluZ0xvY2F0aW9uKTogdm9pZDtcbiAgICBhYnN0cmFjdCBjcmVhdGVEdkZpZWxkKFxuICAgICAgICBwbHVnaW46IE1ldGFkYXRhTWVudSxcbiAgICAgICAgZHY6IGFueSxcbiAgICAgICAgcDogYW55LFxuICAgICAgICBmaWVsZENvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgICAgIGF0dHJzPzoge1xuICAgICAgICAgICAgY2xzPzogc3RyaW5nLFxuICAgICAgICAgICAgYXR0cj86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICAgICAgICAgICBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxuICAgICAgICB9XG4gICAgKTogUHJvbWlzZTx2b2lkPlxuICAgIGFic3RyYWN0IGdldE9wdGlvbnNTdHIoKTogc3RyaW5nO1xuICAgIGFic3RyYWN0IGNyZWF0ZUFuZE9wZW5GaWVsZE1vZGFsKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgc2VsZWN0ZWRGaWVsZE5hbWU6IHN0cmluZywgdmFsdWU/OiBzdHJpbmcsIGxpbmVOdW1iZXI/OiBudW1iZXIsIGluRnJvbnRtYXR0ZXI/OiBib29sZWFuLCBhZnRlcj86IGJvb2xlYW4pOiB2b2lkXG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZDogRmllbGQsIHR5cGU6IEZpZWxkVHlwZSkge1xuICAgICAgICBpZiAoZmllbGQudHlwZSAhPT0gdHlwZSkgdGhyb3cgRXJyb3IoYFRoaXMgZmllbGQgaXMgbm90IG9mIHR5cGUgJHt0eXBlfWApXG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZFxuICAgIH1cblxuICAgIHN0YXRpYyBidWlsZE1hcmtEb3duTGluayhhcHA6IEFwcCwgZmlsZTogVEZpbGUsIHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGRlc3RGaWxlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QocGF0aCwgZmlsZS5wYXRoKVxuICAgICAgICBpZiAoZGVzdEZpbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHAuZmlsZU1hbmFnZXIuZ2VuZXJhdGVNYXJrZG93bkxpbmsoXG4gICAgICAgICAgICAgICAgZGVzdEZpbGUsXG4gICAgICAgICAgICAgICAgZmlsZS5wYXRoLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBkZXN0RmlsZS5iYXNlbmFtZVxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiXG4gICAgfVxuXG4gICAgdmFsaWRhdGVOYW1lKHRleHRJbnB1dDogVGV4dENvbXBvbmVudCwgaW5zZXJ0QWZ0ZXI6IEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGVycm9yID0gZmFsc2U7XG4gICAgICAgIGlmICgvXlsjPi1dLy50ZXN0KHRoaXMuZmllbGQubmFtZSkpIHtcbiAgICAgICAgICAgIEZpZWxkU2V0dGluZ3NNb2RhbC5zZXRWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgICAgICAgICAgdGV4dElucHV0LCBpbnNlcnRBZnRlcixcbiAgICAgICAgICAgICAgICBcIkZpZWxkIG5hbWUgY2Fubm90IHN0YXJ0IHdpdGggIywgPiwgLVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5maWVsZC5uYW1lID09IFwiXCIpIHtcbiAgICAgICAgICAgIEZpZWxkU2V0dGluZ3NNb2RhbC5zZXRWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgICAgICAgICAgdGV4dElucHV0LCBpbnNlcnRBZnRlcixcbiAgICAgICAgICAgICAgICBcIkZpZWxkIG5hbWUgY2FuIG5vdCBiZSBFbXB0eVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gIWVycm9yXG4gICAgfVxuXG4gICAgYXN5bmMgdmFsaWRhdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcmVwbGFjZVZhbHVlcyhhcHA6IEFwcCwgcGF0aDogc3RyaW5nLCBmaWVsZE5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKVxuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGZpbGUuZXh0ZW5zaW9uID09IFwibWRcIikge1xuICAgICAgICAgICAgcmVwbGFjZVZhbHVlcyhhcHAsIGZpbGUsIGZpZWxkTmFtZSwgdmFsdWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGlzTWVudShsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGQ1NNKTogbG9jYXRpb24gaXMgTWVudSB7XG4gICAgICAgIHJldHVybiAobG9jYXRpb24gYXMgTWVudSkuYWRkSXRlbSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIGlzU3VnZ2VzdChsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGQ1NNKTogbG9jYXRpb24gaXMgRkNTTSB7XG4gICAgICAgIHJldHVybiAobG9jYXRpb24gYXMgRkNTTSkuZ2V0SXRlbXMgIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyBpc0luc2VydEZpZWxkQ29tbWFuZChsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGQ1NNKTogbG9jYXRpb24gaXMgXCJJbnNlcnRGaWVsZENvbW1hbmRcIiB7XG4gICAgICAgIHJldHVybiAobG9jYXRpb24gYXMgc3RyaW5nKSA9PT0gXCJJbnNlcnRGaWVsZENvbW1hbmRcIjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUFuZE9wZW5Nb2RhbChcbiAgICAgICAgcGx1Z2luOiBNZXRhZGF0YU1lbnUsXG4gICAgICAgIGZpbGU6IFRGaWxlLFxuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZyxcbiAgICAgICAgZmllbGQ6IEZpZWxkIHwgdW5kZWZpbmVkLFxuICAgICAgICB2YWx1ZT86IHN0cmluZyxcbiAgICAgICAgbGluZU51bWJlcj86IG51bWJlcixcbiAgICAgICAgaW5Gcm9udG1hdHRlcj86IGJvb2xlYW4sXG4gICAgICAgIGFmdGVyPzogYm9vbGVhblxuICAgICk6IHZvaWQge1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTWFuYWdlciA9IG5ldyBGTVtmaWVsZC50eXBlXShmaWVsZCk7XG4gICAgICAgICAgICBmaWVsZE1hbmFnZXIuY3JlYXRlQW5kT3BlbkZpZWxkTW9kYWwocGx1Z2luLmFwcCwgZmlsZSwgZmllbGROYW1lLCB2YWx1ZSwgbGluZU51bWJlciwgaW5Gcm9udG1hdHRlciwgYWZ0ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmllbGRNYW5hZ2VyID0gRmllbGRNYW5hZ2VyLmNyZWF0ZURlZmF1bHQoZmllbGROYW1lISk7XG4gICAgICAgICAgICBmaWVsZE1hbmFnZXIuY3JlYXRlQW5kT3BlbkZpZWxkTW9kYWwocGx1Z2luLmFwcCwgZmlsZSwgZmllbGROYW1lISwgdmFsdWUsIGxpbmVOdW1iZXIsIGluRnJvbnRtYXR0ZXIsIGFmdGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgb3BlbkZpZWxkTW9kYWwoXG4gICAgICAgIHBsdWdpbjogTWV0YWRhdGFNZW51LFxuICAgICAgICBmaWxlOiBURmlsZSxcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgICAgIGxpbmVOdW1iZXI6IG51bWJlcixcbiAgICAgICAgaW5Gcm9udG1hdHRlcjogYm9vbGVhbixcbiAgICAgICAgYWZ0ZXI6IGJvb2xlYW4sXG4gICAgICAgIGZpbGVDbGFzcz86IEZpbGVDbGFzc1xuICAgICkge1xuICAgICAgICBpZiAoIWZpZWxkTmFtZSkge1xuICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgSW5zZXJ0RmllbGRTdWdnZXN0TW9kYWwocGx1Z2luLCBmaWxlLCBsaW5lTnVtYmVyLCBpbkZyb250bWF0dGVyLCBhZnRlciwgZmlsZUNsYXNzKTtcbiAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmaWxlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ2xhc3NBdHRyaWJ1dGVzV2l0aE5hbWUgPSBmaWxlQ2xhc3MuYXR0cmlidXRlcy5maWx0ZXIoYXR0ciA9PiBhdHRyLm5hbWUgPT0gZmllbGROYW1lKTtcbiAgICAgICAgICAgICAgICBsZXQgZmllbGQ6IEZpZWxkIHwgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVDbGFzc0F0dHJpYnV0ZXNXaXRoTmFtZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc0F0dHJpYnV0ZSA9IGZpbGVDbGFzc0F0dHJpYnV0ZXNXaXRoTmFtZVswXTtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBmaWxlQ2xhc3NBdHRyaWJ1dGUuZ2V0RmllbGQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVBbmRPcGVuTW9kYWwocGx1Z2luLCBmaWxlLCBmaWVsZE5hbWUsIGZpZWxkLCB2YWx1ZSwgbGluZU51bWJlciwgaW5Gcm9udG1hdHRlciwgYWZ0ZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IHBsdWdpbi5zZXR0aW5ncy5wcmVzZXRGaWVsZHMuZmlsdGVyKF9maWVsZCA9PiBfZmllbGQubmFtZSA9PSBmaWVsZE5hbWUpWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQW5kT3Blbk1vZGFsKHBsdWdpbiwgZmlsZSwgZmllbGROYW1lLCBmaWVsZCwgdmFsdWUsIGxpbmVOdW1iZXIsIGluRnJvbnRtYXR0ZXIsIGFmdGVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZURlZmF1bHQobmFtZTogc3RyaW5nKTogRmllbGRNYW5hZ2VyIHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBGaWVsZC5jcmVhdGVEZWZhdWx0KG5hbWUpO1xuICAgICAgICByZXR1cm4gbmV3IEZNW2ZpZWxkLnR5cGVdKGZpZWxkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHN0cmluZ1RvQm9vbGVhbih2YWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCB0b0Jvb2xlYW5WYWx1ZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBpZiAoaXNCb29sZWFuKHZhbHVlKSkge1xuICAgICAgICAgICAgdG9Cb29sZWFuVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmICgvdHJ1ZS9pLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICB0b0Jvb2xlYW5WYWx1ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoL2ZhbHNlL2kudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRvQm9vbGVhblZhbHVlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInRoaXMgdmFsdWUgaXMgbm90IGEgYm9vbGVhblwiKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdG9Cb29sZWFuVmFsdWU7XG4gICAgfVxufSIsICJpbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBGdXp6eU1hdGNoLCBGdXp6eVN1Z2dlc3RNb2RhbCwgc2V0SWNvbiwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZFwiO1xuaW1wb3J0IHsgRmlsZUNsYXNzIH0gZnJvbSBcInNyYy9maWxlQ2xhc3MvZmlsZUNsYXNzXCI7XG5pbXBvcnQgeyBGaWVsZEljb24sIEZpZWxkTWFuYWdlciwgRmllbGRUeXBlLCBGaWVsZFR5cGVUYWdDbGFzcyB9IGZyb20gXCJzcmMvdHlwZXMvZmllbGRUeXBlc1wiO1xuaW1wb3J0IGFkZE5ld0ZpZWxkTW9kYWwgZnJvbSBcIi4vYWRkTmV3RmllbGRNb2RhbFwiO1xuXG5cbmludGVyZmFjZSBPcHRpb24ge1xuICAgIGFjdGlvbkxhYmVsOiBzdHJpbmcsXG4gICAgdHlwZT86IEZpZWxkVHlwZVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluc2VydEZpZWxkU3VnZ2VzdE1vZGFsIGV4dGVuZHMgRnV6enlTdWdnZXN0TW9kYWw8T3B0aW9uPiB7XG4gICAgcHJpdmF0ZSBsaW5lTnVtYmVyOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBwbHVnaW46IE1ldGFkYXRhTWVudTtcbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuICAgIHByaXZhdGUgaW5Gcm9udG1hdHRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIGFmdGVyOiBib29sZWFuO1xuICAgIHByaXZhdGUgZmlsZUNsYXNzPzogRmlsZUNsYXNzXG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IE1ldGFkYXRhTWVudSwgZmlsZTogVEZpbGUsIGxpbmVOdW1iZXI6IG51bWJlciwgaW5Gcm9udG1hdHRlcjogYm9vbGVhbiwgYWZ0ZXI6IGJvb2xlYW4sIGZpbGVDbGFzcz86IEZpbGVDbGFzcykge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZU51bWJlcjtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMuaW5Gcm9udG1hdHRlciA9IGluRnJvbnRtYXR0ZXI7XG4gICAgICAgIHRoaXMuYWZ0ZXIgPSBhZnRlcjtcbiAgICAgICAgdGhpcy5maWxlQ2xhc3MgPSBmaWxlQ2xhc3NcbiAgICB9O1xuXG4gICAgZ2V0SXRlbXMoKTogT3B0aW9uW10ge1xuICAgICAgICBpZiAodGhpcy5maWxlQ2xhc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBbeyBhY3Rpb25MYWJlbDogJysrTmV3KysnIH1dXG4gICAgICAgICAgICAgICAgLmNvbmNhdCh0aGlzLmZpbGVDbGFzcy5hdHRyaWJ1dGVzLm1hcChhdHRyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgYWN0aW9uTGFiZWw6IGF0dHIubmFtZSwgdHlwZTogYXR0ci50eXBlIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW3sgYWN0aW9uTGFiZWw6ICcrK05ldysrJyB9XVxuICAgICAgICAgICAgICAgIC5jb25jYXQodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJlc2V0RmllbGRzLm1hcChzZXR0aW5nID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgYWN0aW9uTGFiZWw6IHNldHRpbmcubmFtZSwgdHlwZTogc2V0dGluZy50eXBlIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0SXRlbVRleHQoaXRlbTogT3B0aW9uKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uYWN0aW9uTGFiZWw7XG4gICAgfVxuXG4gICAgcmVuZGVyU3VnZ2VzdGlvbihpdGVtOiBGdXp6eU1hdGNoPE9wdGlvbj4sIGVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICBlbC5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtY29tbWFuZC1zdWdnZXN0LWl0ZW1cIilcbiAgICAgICAgY29uc3QgaWNvbkNvbnRhaW5lciA9IGVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LWNvbW1hbmQtc3VnZ2VzdC1pY29uXCIgfSlcbiAgICAgICAgaXRlbS5pdGVtLnR5cGUgPyBzZXRJY29uKGljb25Db250YWluZXIsIEZpZWxkSWNvbltpdGVtLml0ZW0udHlwZV0pIDogc2V0SWNvbihpY29uQ29udGFpbmVyLCBcInBsdXMtd2l0aC1jaXJjbGVcIilcbiAgICAgICAgZWwuY3JlYXRlRGl2KHsgdGV4dDogaXRlbS5pdGVtLmFjdGlvbkxhYmVsLCBjbHM6IFwibWV0YWRhdGEtbWVudS1jb21tYW5kLXN1Z2dlc3QtYWN0aW9uLWxhYmVsXCIgfSlcbiAgICAgICAgZWwuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtY29tbWFuZC1zdWdnZXN0LXNwYWNlclwiIH0pXG4gICAgICAgIGlmIChpdGVtLml0ZW0udHlwZSkge1xuICAgICAgICAgICAgY29uc3QgdHlwZUNvbnRhaW5lciA9IGVsLmNyZWF0ZUVsKFwiZGl2XCIpXG4gICAgICAgICAgICB0eXBlQ29udGFpbmVyLnNldEF0dHIoXCJjbGFzc1wiLCBgbWV0YWRhdGEtbWVudS1zZXR0aW5nLWl0ZW0taW5mby10eXBlICR7RmllbGRUeXBlVGFnQ2xhc3NbaXRlbS5pdGVtLnR5cGVdfWApXG4gICAgICAgICAgICB0eXBlQ29udGFpbmVyLnNldFRleHQoaXRlbS5pdGVtLnR5cGUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNob29zZUl0ZW0oaXRlbTogT3B0aW9uLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmIChpdGVtLmFjdGlvbkxhYmVsID09PSBcIisrTmV3KytcIikge1xuICAgICAgICAgICAgY29uc3QgbmV3RmllbGRNb2RhbCA9IG5ldyBhZGROZXdGaWVsZE1vZGFsKHRoaXMucGx1Z2luLCB0aGlzLmxpbmVOdW1iZXIsIHRoaXMuZmlsZSwgdGhpcy5pbkZyb250bWF0dGVyLCB0aGlzLmFmdGVyKTtcbiAgICAgICAgICAgIG5ld0ZpZWxkTW9kYWwub3BlbigpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmlsZUNsYXNzKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlQ2xhc3NBdHRyaWJ1dGVzV2l0aE5hbWUgPSB0aGlzLmZpbGVDbGFzcy5hdHRyaWJ1dGVzLmZpbHRlcihhdHRyID0+IGF0dHIubmFtZSA9PSBpdGVtLmFjdGlvbkxhYmVsKTtcbiAgICAgICAgICAgIGxldCBmaWVsZDogRmllbGQgfCB1bmRlZmluZWRcbiAgICAgICAgICAgIGxldCB0eXBlOiBGaWVsZFR5cGUgfCB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChmaWxlQ2xhc3NBdHRyaWJ1dGVzV2l0aE5hbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc0F0dHJpYnV0ZSA9IGZpbGVDbGFzc0F0dHJpYnV0ZXNXaXRoTmFtZVswXTtcbiAgICAgICAgICAgICAgICBmaWVsZCA9IGZpbGVDbGFzc0F0dHJpYnV0ZS5nZXRGaWVsZCgpO1xuICAgICAgICAgICAgICAgIHR5cGUgPSBmaWxlQ2xhc3NBdHRyaWJ1dGUudHlwZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRNYW5hZ2VyID0gbmV3IEZpZWxkTWFuYWdlcltmaWVsZC50eXBlXShmaWVsZCk7XG4gICAgICAgICAgICAgICAgZmllbGRNYW5hZ2VyLmNyZWF0ZUFuZE9wZW5GaWVsZE1vZGFsKHRoaXMuYXBwLCB0aGlzLmZpbGUsIGl0ZW0uYWN0aW9uTGFiZWwsIFwiXCIsIHRoaXMubGluZU51bWJlciwgdGhpcy5pbkZyb250bWF0dGVyLCB0aGlzLmFmdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVzZXRGaWVsZHMuZmlsdGVyKF9maWVsZCA9PiBfZmllbGQubmFtZSA9PSBpdGVtLmFjdGlvbkxhYmVsKVswXTtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTWFuYWdlciA9IG5ldyBGaWVsZE1hbmFnZXJbZmllbGQudHlwZV0oZmllbGQpO1xuICAgICAgICAgICAgZmllbGRNYW5hZ2VyLmNyZWF0ZUFuZE9wZW5GaWVsZE1vZGFsKHRoaXMuYXBwLCB0aGlzLmZpbGUsIGl0ZW0uYWN0aW9uTGFiZWwsIFwiXCIsIHRoaXMubGluZU51bWJlciwgdGhpcy5pbkZyb250bWF0dGVyLCB0aGlzLmFmdGVyKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfTtcbiAgICB9XG59IiwgImltcG9ydCB7IE1vZGFsLCBUZXh0Q29tcG9uZW50LCBCdXR0b25Db21wb25lbnQsIEV4dHJhQnV0dG9uQ29tcG9uZW50LCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IHsgaW5zZXJ0VmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9pbnNlcnRWYWx1ZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgYWRkTmV3RmllbGRNb2RhbCBleHRlbmRzIE1vZGFsIHtcblxuICAgIHByaXZhdGUgbGluZU51bWJlcjogbnVtYmVyO1xuICAgIHByaXZhdGUgZmlsZTogVEZpbGU7XG4gICAgcHJpdmF0ZSBpbkZyb250bWF0dGVyOiBib29sZWFuO1xuICAgIHByaXZhdGUgYWZ0ZXI6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IE1ldGFkYXRhTWVudSwgbGluZU51bWJlcjogbnVtYmVyLCBmaWxlOiBURmlsZSwgaW5Gcm9udG1hdHRlcjogYm9vbGVhbiwgYWZ0ZXI6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCk7XG4gICAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMuaW5Gcm9udG1hdHRlciA9IGluRnJvbnRtYXR0ZXI7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMuYWZ0ZXIgPSBhZnRlcjtcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMudGl0bGVFbC5zZXRUZXh0KFwiSW5zZXJ0IG5ldyBmaWVsZFwiKTtcbiAgICAgICAgY29uc3QgYWRkTmV3RmllbGRDb250YWluZXIgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgY29uc3QgbmFtZUlucHV0Q29udGFpbmVyID0gYWRkTmV3RmllbGRDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtcHJvbXB0LWNvbnRhaW5lclwiIH0pO1xuICAgICAgICBuYW1lSW5wdXRDb250YWluZXIuc2V0VGV4dChcIkZpZWxkIE5hbWU6IFwiKTtcbiAgICAgICAgY29uc3QgbmFtZUlucHV0RWwgPSBuZXcgVGV4dENvbXBvbmVudChuYW1lSW5wdXRDb250YWluZXIpO1xuICAgICAgICBuYW1lSW5wdXRFbC5pbnB1dEVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1wcm9tcHQtaW5wdXRcIilcbiAgICAgICAgbmFtZUlucHV0RWwuc2V0UGxhY2Vob2xkZXIoXCJGaWVsZCBuYW1lXCIpO1xuICAgICAgICBjb25zdCB2YWx1ZUlucHV0Q29udGFpbmVyID0gYWRkTmV3RmllbGRDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtcHJvbXB0LWNvbnRhaW5lclwiIH0pO1xuICAgICAgICB2YWx1ZUlucHV0Q29udGFpbmVyLnNldFRleHQoXCJGaWVsZCB2YWx1ZTogXCIpO1xuICAgICAgICBjb25zdCB2YWx1ZUlucHV0RWwgPSBuZXcgVGV4dENvbXBvbmVudCh2YWx1ZUlucHV0Q29udGFpbmVyKTtcbiAgICAgICAgdmFsdWVJbnB1dEVsLmlucHV0RWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXByb21wdC1pbnB1dFwiKVxuICAgICAgICB2YWx1ZUlucHV0RWwuc2V0UGxhY2Vob2xkZXIoXCJGaWVsZCB2YWx1ZVwiKTtcbiAgICAgICAgY29uc3QgZm9vdGVyQnV0dG9ucyA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6ICdtZXRhZGF0YS1tZW51LXRleHRhcmVhLWJ1dHRvbnMnXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzYXZlQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChmb290ZXJCdXR0b25zKTtcbiAgICAgICAgc2F2ZUJ1dHRvbi5zZXRJY29uKFwiY2hlY2ttYXJrXCIpO1xuICAgICAgICBzYXZlQnV0dG9uLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgaW5zZXJ0VmFsdWVzKHRoaXMuYXBwLCB0aGlzLmZpbGUsIG5hbWVJbnB1dEVsLmdldFZhbHVlKCksIHZhbHVlSW5wdXRFbC5nZXRWYWx1ZSgpLCB0aGlzLmxpbmVOdW1iZXIsIHRoaXMuaW5Gcm9udG1hdHRlciwgdGhpcy5hZnRlcik7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKClcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChmb290ZXJCdXR0b25zKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLnNldEljb24oXCJjcm9zc1wiKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KTtcblxuXG4gICAgfTtcbn07IiwgImltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCB7IEFwcCwgQnV0dG9uQ29tcG9uZW50LCBEcm9wZG93bkNvbXBvbmVudCwgRXh0cmFCdXR0b25Db21wb25lbnQsIE1vZGFsLCBOb3RpY2UsIFNldHRpbmcsIFRleHRDb21wb25lbnQsIFRleHRBcmVhQ29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcInNyYy9maWVsZHMvRmllbGRcIjtcbmltcG9ydCBGaWVsZFNldHRpbmcgZnJvbSBcInNyYy9zZXR0aW5ncy9GaWVsZFNldHRpbmdcIjtcbmltcG9ydCB7IEZpZWxkTWFuYWdlciBhcyBGLCBTZXR0aW5nTG9jYXRpb24gfSBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZE1hbmFnZXJcIjtcbmltcG9ydCB7IEZpZWxkTWFuYWdlciwgRmllbGRUeXBlLCBGaWVsZFR5cGVMYWJlbE1hcHBpbmcsIEZpZWxkVHlwZVRvb2x0aXAgfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmllbGRTZXR0aW5nc01vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIHByaXZhdGUgbmFtZVByb21wdENvbXBvbmVudDogVGV4dENvbXBvbmVudDtcbiAgICBwcml2YXRlIHNhdmVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBmaWVsZDogRmllbGQ7XG4gICAgcHJpdmF0ZSBwbHVnaW46IE1ldGFkYXRhTWVudTtcbiAgICBwcml2YXRlIGluaXRpYWxGaWVsZDogRmllbGQ7XG4gICAgcHJpdmF0ZSBwYXJlbnRTZXR0aW5nPzogRmllbGRTZXR0aW5nO1xuICAgIHByaXZhdGUgbmV3OiBib29sZWFuID0gdHJ1ZTtcbiAgICBwcml2YXRlIHBhcmVudFNldHRpbmdDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgZmllbGRPcHRpb25zQ29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcbiAgICBwcml2YXRlIGZpZWxkTWFuYWdlcjogRjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE1ldGFkYXRhTWVudSwgcGFyZW50U2V0dGluZ0NvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHBhcmVudFNldHRpbmc/OiBGaWVsZFNldHRpbmcsIGZpZWxkPzogRmllbGQpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMucGFyZW50U2V0dGluZyA9IHBhcmVudFNldHRpbmc7XG4gICAgICAgIHRoaXMuaW5pdGlhbEZpZWxkID0gbmV3IEZpZWxkKCk7XG4gICAgICAgIHRoaXMucGFyZW50U2V0dGluZ0NvbnRhaW5lciA9IHBhcmVudFNldHRpbmdDb250YWluZXI7XG4gICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgdGhpcy5uZXcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgICAgIEZpZWxkLmNvcHlQcm9wZXJ0eSh0aGlzLmluaXRpYWxGaWVsZCwgdGhpcy5maWVsZClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBuZXdJZCA9IDE7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5pbml0aWFsUHJvcGVydGllcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChwcm9wLmlkKSAmJiBwYXJzZUludChwcm9wLmlkKSA+PSBuZXdJZCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdJZCA9IHBhcnNlSW50KHByb3AuaWQpICsgMTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmZpZWxkID0gbmV3IEZpZWxkKCk7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLmlkID0gbmV3SWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbEZpZWxkLmlkID0gbmV3SWQudG9TdHJpbmcoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5maWVsZE1hbmFnZXIgPSBuZXcgRmllbGRNYW5hZ2VyW3RoaXMuZmllbGQudHlwZV0odGhpcy5maWVsZCk7XG4gICAgfTtcblxuICAgIGFzeW5jIG9uT3BlbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQubmFtZSA9PSBcIlwiKSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChgQWRkIGEgZmllbGQgYW5kIGRlZmluZSBvcHRpb25zYCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChgTWFuYWdlIHNldHRpbmdzIG9wdGlvbnMgZm9yICR7dGhpcy5maWVsZC5uYW1lfWApO1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZUZvcm0oKTtcbiAgICB9O1xuXG4gICAgb25DbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmZpZWxkLCB0aGlzLmluaXRpYWxGaWVsZCk7XG4gICAgICAgIGlmICghdGhpcy5uZXcgJiYgdGhpcy5wYXJlbnRTZXR0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFNldHRpbmcuc2V0VGV4dENvbnRlbnRXaXRobmFtZSgpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zYXZlZCkge1xuICAgICAgICAgICAgbmV3IEZpZWxkU2V0dGluZyh0aGlzLnBhcmVudFNldHRpbmdDb250YWluZXIsIHRoaXMuZmllbGQsIHRoaXMuYXBwLCB0aGlzLnBsdWdpbik7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHByaXZhdGUgY3JlYXRlbmFtZUlucHV0Q29udGFpbmVyKHBhcmVudE5vZGU6IEhUTUxEaXZFbGVtZW50KTogVGV4dENvbXBvbmVudCB7XG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZUNvbnRhaW5lckxhYmVsID0gcGFyZW50Tm9kZS5jcmVhdGVEaXYoKTtcbiAgICAgICAgZmllbGROYW1lQ29udGFpbmVyTGFiZWwuc2V0VGV4dChgRmllbGQgTmFtZTpgKTtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBuZXcgVGV4dENvbXBvbmVudChwYXJlbnROb2RlKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZmllbGQubmFtZTtcbiAgICAgICAgaW5wdXQuc2V0VmFsdWUobmFtZSk7XG4gICAgICAgIGlucHV0LnNldFBsYWNlaG9sZGVyKFwiTmFtZSBvZiB0aGUgZmllbGRcIik7XG4gICAgICAgIGlucHV0Lm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmllbGQubmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQoYE1hbmFnZSBwcmVkZWZpbmVkIG9wdGlvbnMgZm9yICR7dGhpcy5maWVsZC5uYW1lfWApO1xuICAgICAgICAgICAgRmllbGRTZXR0aW5nc01vZGFsLnJlbW92ZVZhbGlkYXRpb25FcnJvcihpbnB1dCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY3JlYXRlVHlwZVNlbGVjdG9yQ29udGFpbmVyKHBhcmVudE5vZGU6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHR5cGVTZWxlY3RvckNvbnRhaW5lckxhYmVsID0gcGFyZW50Tm9kZS5jcmVhdGVEaXYoKTtcbiAgICAgICAgdHlwZVNlbGVjdG9yQ29udGFpbmVyTGFiZWwuc2V0VGV4dChgRmllbGQgdHlwZTpgKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gbmV3IERyb3Bkb3duQ29tcG9uZW50KHBhcmVudE5vZGUpO1xuICAgICAgICBPYmplY3Qua2V5cyhGaWVsZFR5cGVMYWJlbE1hcHBpbmcpLmZvckVhY2goKGY6IGtleW9mIHR5cGVvZiBGaWVsZFR5cGUpID0+IHNlbGVjdC5hZGRPcHRpb24oZiwgRmllbGRUeXBlVG9vbHRpcFtmXSkpXG4gICAgICAgIGlmICh0aGlzLmZpZWxkLnR5cGUpIHtcbiAgICAgICAgICAgIHNlbGVjdC5zZXRWYWx1ZSh0aGlzLmZpZWxkLnR5cGUpXG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0Lm9uQ2hhbmdlKCh0eXBlTGFiZWw6IGtleW9mIHR5cGVvZiBGaWVsZFR5cGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmllbGQgPSBuZXcgRmllbGQoKTtcbiAgICAgICAgICAgIEZpZWxkLmNvcHlQcm9wZXJ0eSh0aGlzLmZpZWxkLCB0aGlzLmluaXRpYWxGaWVsZCk7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLm5hbWUgPSB0aGlzLm5hbWVQcm9tcHRDb21wb25lbnQuZ2V0VmFsdWUoKVxuICAgICAgICAgICAgdGhpcy5maWVsZC50eXBlID0gRmllbGRUeXBlTGFiZWxNYXBwaW5nW3R5cGVMYWJlbF07XG4gICAgICAgICAgICBpZiAodGhpcy5maWVsZC50eXBlICE9PSB0aGlzLmluaXRpYWxGaWVsZC50eXBlICYmXG4gICAgICAgICAgICAgICAgIVt0aGlzLmZpZWxkLnR5cGUsIHRoaXMuaW5pdGlhbEZpZWxkLnR5cGVdLmV2ZXJ5KGZpZWxkVHlwZSA9PlxuICAgICAgICAgICAgICAgICAgICBbRmllbGRUeXBlLk11bHRpLCBGaWVsZFR5cGUuU2VsZWN0LCBGaWVsZFR5cGUuQ3ljbGVdLmluY2x1ZGVzKGZpZWxkVHlwZSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnMgPSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKHRoaXMuZmllbGRPcHRpb25zQ29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkT3B0aW9uc0NvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmZpZWxkT3B0aW9uc0NvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmllbGRNYW5hZ2VyID0gbmV3IEZpZWxkTWFuYWdlclt0aGlzLmZpZWxkLnR5cGVdKHRoaXMuZmllbGQpXG4gICAgICAgICAgICB0aGlzLmZpZWxkTWFuYWdlci5jcmVhdGVTZXR0aW5nQ29udGFpbmVyKHRoaXMuZmllbGRPcHRpb25zQ29udGFpbmVyLCB0aGlzLnBsdWdpbiwgU2V0dGluZ0xvY2F0aW9uLlBsdWdpblNldHRpbmdzKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlRm9ybSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtcHJvbXB0LWRpdlwiIH0pO1xuICAgICAgICBjb25zdCBtYWluRGl2ID0gZGl2LmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LXByb21wdC1mb3JtXCIgfSk7XG5cbiAgICAgICAgLyogU2VjdGlvbnMgKi9cbiAgICAgICAgY29uc3QgbmFtZUNvbnRhaW5lciA9IG1haW5EaXYuY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMubmFtZVByb21wdENvbXBvbmVudCA9IHRoaXMuY3JlYXRlbmFtZUlucHV0Q29udGFpbmVyKG5hbWVDb250YWluZXIpO1xuICAgICAgICBtYWluRGl2LmNyZWF0ZURpdih7IGNsczogJ21ldGFkYXRhLW1lbnUtc2VwYXJhdG9yJyB9KS5jcmVhdGVFbChcImhyXCIpO1xuXG4gICAgICAgIGNvbnN0IHR5cGVTZWxlY3RDb250YWluZXIgPSBtYWluRGl2LmNyZWF0ZURpdigpXG4gICAgICAgIHRoaXMuZmllbGRPcHRpb25zQ29udGFpbmVyID0gbWFpbkRpdi5jcmVhdGVEaXYoKVxuXG4gICAgICAgIC8qIGZvb3RlciBidXR0b25zKi9cbiAgICAgICAgY29uc3QgZm9vdGVyRWwgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgY29uc3QgZm9vdGVyQnV0dG9ucyA9IG5ldyBTZXR0aW5nKGZvb3RlckVsKTtcbiAgICAgICAgZm9vdGVyQnV0dG9ucy5hZGRCdXR0b24oKGIpID0+IHRoaXMuY3JlYXRlU2F2ZUJ1dHRvbihiKSk7XG4gICAgICAgIGZvb3RlckJ1dHRvbnMuYWRkRXh0cmFCdXR0b24oKGIpID0+IHRoaXMuY3JlYXRlQ2FuY2VsQnV0dG9uKGIpKTtcblxuICAgICAgICAvKiBpbml0IHN0YXRlICovXG4gICAgICAgIHRoaXMuY3JlYXRlVHlwZVNlbGVjdG9yQ29udGFpbmVyKHR5cGVTZWxlY3RDb250YWluZXIpXG4gICAgICAgIHRoaXMuZmllbGRNYW5hZ2VyLmNyZWF0ZVNldHRpbmdDb250YWluZXIodGhpcy5maWVsZE9wdGlvbnNDb250YWluZXIsIHRoaXMucGx1Z2luLCBTZXR0aW5nTG9jYXRpb24uUGx1Z2luU2V0dGluZ3MpXG4gICAgfTtcblxuICAgIHByaXZhdGUgdmFsaWRhdGVGaWVsZHMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkTWFuYWdlci52YWxpZGF0ZU5hbWUoXG4gICAgICAgICAgICB0aGlzLm5hbWVQcm9tcHRDb21wb25lbnQsXG4gICAgICAgICAgICB0aGlzLm5hbWVQcm9tcHRDb21wb25lbnQuaW5wdXRFbFxuICAgICAgICApICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkTWFuYWdlci52YWxpZGF0ZU9wdGlvbnMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVNhdmVCdXR0b24oYjogQnV0dG9uQ29tcG9uZW50KTogQnV0dG9uQ29tcG9uZW50IHtcbiAgICAgICAgYi5zZXRUb29sdGlwKFwiU2F2ZVwiKTtcbiAgICAgICAgYi5zZXRJY29uKFwiY2hlY2ttYXJrXCIpO1xuICAgICAgICBiLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGVycm9yID0gIXRoaXMudmFsaWRhdGVGaWVsZHMoKTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJGaXggZXJyb3JzIGJlZm9yZSBzYXZpbmcuXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnNhdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRFeGlzdGluZ0ZpZWxkID0gdGhpcy5wbHVnaW4uaW5pdGlhbFByb3BlcnRpZXMuZmlsdGVyKHAgPT4gcC5pZCA9PSB0aGlzLmZpZWxkLmlkKVswXTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50RXhpc3RpbmdGaWVsZCkge1xuICAgICAgICAgICAgICAgIEZpZWxkLmNvcHlQcm9wZXJ0eShjdXJyZW50RXhpc3RpbmdGaWVsZCwgdGhpcy5maWVsZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmluaXRpYWxQcm9wZXJ0aWVzLnB1c2godGhpcy5maWVsZCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgRmllbGQuY29weVByb3BlcnR5KHRoaXMuaW5pdGlhbEZpZWxkLCB0aGlzLmZpZWxkKVxuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50U2V0dGluZykgRmllbGQuY29weVByb3BlcnR5KHRoaXMucGFyZW50U2V0dGluZy5maWVsZCwgdGhpcy5maWVsZCk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFNldHRpbmc/LnNldFRleHRDb250ZW50V2l0aG5hbWUoKVxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVDYW5jZWxCdXR0b24oYjogRXh0cmFCdXR0b25Db21wb25lbnQpOiBFeHRyYUJ1dHRvbkNvbXBvbmVudCB7XG4gICAgICAgIGIuc2V0SWNvbihcImNyb3NzXCIpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkNhbmNlbFwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvKiByZXNldCBvcHRpb25zIGZyb20gc2V0dGluZ3MgKi9cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsRmllbGQubmFtZSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5maWVsZCwgdGhpcy5pbml0aWFsRmllbGQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBiO1xuICAgIH07XG5cbiAgICAvKiB1dGlscyBmdW5jdGlvbnMgKi9cblxuICAgIHB1YmxpYyBzdGF0aWMgc2V0VmFsaWRhdGlvbkVycm9yKHRleHRJbnB1dDogVGV4dENvbXBvbmVudCwgaW5zZXJ0QWZ0ZXI6IEVsZW1lbnQsIG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgdGV4dElucHV0LmlucHV0RWwuYWRkQ2xhc3MoXCJpcy1pbnZhbGlkXCIpO1xuICAgICAgICBpZiAobWVzc2FnZSAmJiB0ZXh0SW5wdXQuaW5wdXRFbC5wYXJlbnRFbGVtZW50Py5sYXN0RWxlbWVudENoaWxkKSB7XG5cbiAgICAgICAgICAgIGxldCBtRGl2ID0gdGV4dElucHV0LmlucHV0RWwucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgIFwiLmludmFsaWQtZmVlZGJhY2tcIlxuICAgICAgICAgICAgKSBhcyBIVE1MRGl2RWxlbWVudDtcblxuICAgICAgICAgICAgaWYgKCFtRGl2KSB7XG4gICAgICAgICAgICAgICAgbURpdiA9IGNyZWF0ZURpdih7IGNsczogXCJpbnZhbGlkLWZlZWRiYWNrXCIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtRGl2LmlubmVyVGV4dCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICBtRGl2Lmluc2VydEFmdGVyKGluc2VydEFmdGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgc3RhdGljIHJlbW92ZVZhbGlkYXRpb25FcnJvcih0ZXh0SW5wdXQ6IFRleHRDb21wb25lbnQgfCBUZXh0QXJlYUNvbXBvbmVudCkge1xuICAgICAgICBpZiAodGV4dElucHV0LmlucHV0RWwuaGFzQ2xhc3MoXCJpcy1pbnZhbGlkXCIpICYmIHRleHRJbnB1dC5pbnB1dEVsLnBhcmVudEVsZW1lbnQ/Lmxhc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgICAgIHRleHRJbnB1dC5pbnB1dEVsLnJlbW92ZUNsYXNzKFwiaXMtaW52YWxpZFwiKVxuICAgICAgICAgICAgdGV4dElucHV0LmlucHV0RWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChcbiAgICAgICAgICAgICAgICB0ZXh0SW5wdXQuaW5wdXRFbC5wYXJlbnRFbGVtZW50Lmxhc3RFbGVtZW50Q2hpbGRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgfTtcbn07IiwgImltcG9ydCB7IEFwcCwgU2V0dGluZywgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZFwiO1xuaW1wb3J0IHsgRmllbGRNYW5hZ2VyLCBGaWVsZFR5cGVUYWdDbGFzcyB9IGZyb20gXCJzcmMvdHlwZXMvZmllbGRUeXBlc1wiO1xuaW1wb3J0IEZpZWxkU2V0dGluZ3NNb2RhbCBmcm9tIFwic3JjL3NldHRpbmdzL0ZpZWxkU2V0dGluZ3NNb2RhbFwiO1xuaW1wb3J0IHsgRmllbGRNYW5hZ2VyIGFzIEYgfSBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZE1hbmFnZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmllbGRTZXR0aW5nIGV4dGVuZHMgU2V0dGluZyB7XG4gICAgcHVibGljIGZpZWxkOiBGaWVsZDtcbiAgICBwcml2YXRlIGFwcDogQXBwO1xuICAgIHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG4gICAgcHJpdmF0ZSBjb250YWluZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBmaWVsZE5hbWVDb250YWluZXI6IEhUTUxTcGFuRWxlbWVudDtcbiAgICBwcml2YXRlIHR5cGVDb250YWluZXI6IEhUTUxTcGFuRWxlbWVudDtcbiAgICBwcml2YXRlIGZpZWxkT3B0aW9uc0NvbnRhaW5lcjogSFRNTFNwYW5FbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBwcm9wZXJ0eTogRmllbGQsIGFwcDogQXBwLCBwbHVnaW46IE1ldGFkYXRhTWVudSkge1xuICAgICAgICBzdXBlcihjb250YWluZXJFbCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgICAgdGhpcy5maWVsZCA9IHByb3BlcnR5O1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMuc2V0VGV4dENvbnRlbnRXaXRobmFtZSgpO1xuICAgICAgICB0aGlzLmFkZEVkaXRCdXR0b24oKTtcbiAgICAgICAgdGhpcy5hZGREZWxldGVCdXR0b24oKTtcbiAgICB9O1xuXG4gICAgcHVibGljIHNldFRleHRDb250ZW50V2l0aG5hbWUoKTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgbWFuYWdlciA9IG5ldyBGaWVsZE1hbmFnZXJbdGhpcy5maWVsZC50eXBlXSh0aGlzLmZpZWxkKSBhcyBGO1xuICAgICAgICB0aGlzLmluZm9FbC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIHRoaXMuaW5mb0VsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1zZXR0aW5nLWl0ZW1cIilcbiAgICAgICAgdGhpcy5maWVsZE5hbWVDb250YWluZXIgPSB0aGlzLmluZm9FbC5jcmVhdGVFbChcImRpdlwiLCBcIm1ldGFkYXRhLW1lbnUtc2V0dGluZy1pdGVtLW5hbWVcIilcbiAgICAgICAgdGhpcy5maWVsZE5hbWVDb250YWluZXIuc2V0VGV4dCh0aGlzLmZpZWxkLm5hbWUpXG4gICAgICAgIHRoaXMudHlwZUNvbnRhaW5lciA9IHRoaXMuaW5mb0VsLmNyZWF0ZUVsKFwiZGl2XCIpXG4gICAgICAgIHRoaXMudHlwZUNvbnRhaW5lci5zZXRBdHRyKFwiY2xhc3NcIiwgYG1ldGFkYXRhLW1lbnUtc2V0dGluZy1pdGVtLWluZm8tdHlwZSAke0ZpZWxkVHlwZVRhZ0NsYXNzW3RoaXMuZmllbGQudHlwZV19YClcbiAgICAgICAgdGhpcy50eXBlQ29udGFpbmVyLnNldFRleHQodGhpcy5maWVsZC50eXBlKVxuICAgICAgICB0aGlzLmZpZWxkT3B0aW9uc0NvbnRhaW5lciA9IHRoaXMuaW5mb0VsLmNyZWF0ZUVsKFwiZGl2XCIpXG4gICAgICAgIHRoaXMuZmllbGRPcHRpb25zQ29udGFpbmVyLnNldFRleHQoYCR7bWFuYWdlci5nZXRPcHRpb25zU3RyKCl9YClcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBhZGRFZGl0QnV0dG9uKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgYi5zZXRJY29uKFwicGVuY2lsXCIpXG4gICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJFZGl0XCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbW9kYWwgPSBuZXcgRmllbGRTZXR0aW5nc01vZGFsKHRoaXMuYXBwLCB0aGlzLnBsdWdpbiwgdGhpcy5jb250YWluZXJFbCwgdGhpcywgdGhpcy5maWVsZCk7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgYWRkRGVsZXRlQnV0dG9uKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgYi5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkRlbGV0ZVwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEV4aXN0aW5nUHJvcGVydHkgPSB0aGlzLnBsdWdpbi5pbml0aWFsUHJvcGVydGllcy5maWx0ZXIocCA9PiBwLmlkID09IHRoaXMuZmllbGQuaWQpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEV4aXN0aW5nUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmluaXRpYWxQcm9wZXJ0aWVzLnJlbW92ZShjdXJyZW50RXhpc3RpbmdQcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ0VsLnBhcmVudEVsZW1lbnQ/LnJlbW92ZUNoaWxkKHRoaXMuc2V0dGluZ0VsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGdldFZhbHVlc0xpc3RGcm9tTm90ZShub3RlUGF0aDogc3RyaW5nLCBhcHA6IEFwcCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgbGV0IHZhbHVlczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChub3RlUGF0aCk7XG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKVxuICAgICAgICAgICAgcmVzdWx0LnNwbGl0KCdcXG4nKS5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgvXiguKikkLy50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKGxpbmUudHJpbSgpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9O1xuICAgIH07XG59OyIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBUb2dnbGVDb21wb25lbnQsIFRGaWxlLCBCdXR0b25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IGluc2VydFZhbHVlcyB9IGZyb20gXCJzcmMvY29tbWFuZHMvaW5zZXJ0VmFsdWVzXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcInNyYy9maWVsZHMvRmllbGRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9vbGVhbk1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXG4gICAgcHJpdmF0ZSBmaWxlOiBURmlsZTtcbiAgICBwcml2YXRlIHZhbHVlOiBib29sZWFuO1xuICAgIHByaXZhdGUgbGluZU51bWJlcjogbnVtYmVyO1xuICAgIHByaXZhdGUgaW5Gcm9udG1hdHRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIGFmdGVyOiBib29sZWFuO1xuICAgIHByaXZhdGUgZmllbGQ6IEZpZWxkO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBmaWVsZDogRmllbGQsIHZhbHVlOiBib29sZWFuLCBsaW5lTnVtYmVyOiBudW1iZXIgPSAtMSwgaW5Gcm9udE1hdHRlcjogYm9vbGVhbiA9IGZhbHNlLCBhZnRlcjogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMuaW5Gcm9udG1hdHRlciA9IGluRnJvbnRNYXR0ZXI7XG4gICAgICAgIHRoaXMuYWZ0ZXIgPSBhZnRlcjtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkXG4gICAgfTtcblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgaW5wdXREaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBcIm1ldGFkYXRhLW1lbnUtdG9nZ2xlclwiXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJ1aWxkVG9nZ2xlRWwoaW5wdXREaXYpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGJ1aWxkVG9nZ2xlRWwoaW5wdXREaXY6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZUVsID0gbmV3IFRvZ2dsZUNvbXBvbmVudChpbnB1dERpdik7XG4gICAgICAgIGNvbnN0IGZvb3RlciA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LXZhbHVlLWdyaWQtZm9vdGVyXCIgfSk7XG4gICAgICAgIGNvbnN0IHNhdmVCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGZvb3Rlcik7XG4gICAgICAgIHRvZ2dsZUVsLnNldFZhbHVlKHRoaXMudmFsdWUpO1xuICAgICAgICB0b2dnbGVFbC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBzYXZlQnV0dG9uLmJ1dHRvbkVsLmZvY3VzKCk7XG4gICAgICAgIH0pXG4gICAgICAgIHNhdmVCdXR0b24uc2V0SWNvbihcImNoZWNrbWFya1wiKTtcbiAgICAgICAgc2F2ZUJ1dHRvbi5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZS50b1N0cmluZygpXG4gICAgICAgICAgICBpZiAodGhpcy5saW5lTnVtYmVyID09IC0xKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcmVwbGFjZVZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgaW5zZXJ0VmFsdWVzKHRoaXMuYXBwLCB0aGlzLmZpbGUsIHRoaXMuZmllbGQubmFtZSwgdmFsdWUsIHRoaXMubGluZU51bWJlciwgdGhpcy5pbkZyb250bWF0dGVyLCB0aGlzLmFmdGVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG59OyIsICJpbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBBcHAsIE1lbnUsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5pbXBvcnQgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsIGZyb20gXCJzcmMvb3B0aW9ucy9GaWVsZENvbW1hbmRTdWdnZXN0TW9kYWxcIjtcbmltcG9ydCBCb29sZWFuTW9kYWwgZnJvbSBcInNyYy9vcHRpb25Nb2RhbHMvZmllbGRzL0Jvb2xlYW5Nb2RhbFwiO1xuaW1wb3J0IHsgRmllbGRUeXBlLCBGaWVsZEljb24gfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwiLi4vRmllbGRcIjtcbmltcG9ydCB7IEZpZWxkTWFuYWdlciB9IGZyb20gXCIuLi9GaWVsZE1hbmFnZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9vbGVhbkZpZWxkIGV4dGVuZHMgRmllbGRNYW5hZ2VyIHtcblxuICAgIGNvbnN0cnVjdG9yKGZpZWxkOiBGaWVsZCkge1xuICAgICAgICBzdXBlcihmaWVsZCwgRmllbGRUeXBlLkJvb2xlYW4pXG4gICAgfVxuXG4gICAgYWRkRmllbGRPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBhcHA6IEFwcCwgZmlsZTogVEZpbGUsIGxvY2F0aW9uOiBNZW51IHwgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGJWYWx1ZSA9IEJvb2xlYW5GaWVsZC5zdHJpbmdUb0Jvb2xlYW4odmFsdWUpO1xuICAgICAgICBpZiAoQm9vbGVhbkZpZWxkLmlzTWVudShsb2NhdGlvbikpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKGA8JHtuYW1lfT4gJHtiVmFsdWUgPyBcIlx1MjcwNSBcdTI1QjcgXHUyNzRDXCIgOiBcIlx1Mjc0QyBcdTI1QjcgXHUyNzA1XCJ9YCk7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKEZpZWxkSWNvbltGaWVsZFR5cGUuQm9vbGVhbl0pO1xuICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljaygoKSA9PiByZXBsYWNlVmFsdWVzKGFwcCwgZmlsZSwgbmFtZSwgKCFiVmFsdWUpLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgICAgICBpdGVtLnNldFNlY3Rpb24oXCJtZXRhZGF0YS1tZW51LmZpZWxkc1wiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSBpZiAoQm9vbGVhbkZpZWxkLmlzU3VnZ2VzdChsb2NhdGlvbikpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLm9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IGB1cGRhdGVfJHtuYW1lfWAsXG4gICAgICAgICAgICAgICAgYWN0aW9uTGFiZWw6IGA8c3Bhbj48Yj4ke25hbWV9PC9iPiAke2JWYWx1ZSA/IFwiXHUyNzA1IFx1MjVCNyBcdTI3NENcIiA6IFwiXHUyNzRDIFx1MjVCNyBcdTI3MDVcIn08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IHJlcGxhY2VWYWx1ZXMoYXBwLCBmaWxlLCBuYW1lLCAoIWJWYWx1ZSkudG9TdHJpbmcoKSksXG4gICAgICAgICAgICAgICAgaWNvbjogRmllbGRJY29uW0ZpZWxkVHlwZS5Cb29sZWFuXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBnZXRPcHRpb25zU3RyKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlwiXG4gICAgfVxuXG4gICAgY3JlYXRlU2V0dGluZ0NvbnRhaW5lcihwYXJlbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50LCBwbHVnaW46IE1ldGFkYXRhTWVudSk6IHZvaWQge1xuICAgICAgICAvL25vIG5lZWQgb2Ygc2V0dGluZ3MgZm9yIGJvb2xlYW4gZmllbGRcbiAgICB9XG5cbiAgICBhc3luYyB2YWxpZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJWYWx1ZSA9IEJvb2xlYW5GaWVsZC5zdHJpbmdUb0Jvb2xlYW4odmFsdWUpXG4gICAgICAgICAgICByZXR1cm4gaXNCb29sZWFuKGJWYWx1ZSlcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFsaWRhdGVPcHRpb25zKCk6IGJvb2xlYW4ge1xuICAgICAgICAvL2Fsd2F5cyB0cnVlIHNpbmNlIHRoZXJlIGFyZSBubyBvcHRpb25zXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgY3JlYXRlQW5kT3BlbkZpZWxkTW9kYWwoYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBzZWxlY3RlZEZpZWxkTmFtZTogc3RyaW5nLCB2YWx1ZT86IHN0cmluZywgbGluZU51bWJlcj86IG51bWJlciwgaW5Gcm9udG1hdHRlcj86IGJvb2xlYW4sIGFmdGVyPzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBjb25zdCBiVmFsdWUgPSBCb29sZWFuRmllbGQuc3RyaW5nVG9Cb29sZWFuKHZhbHVlIHx8IFwiZmFsc2VcIik7XG4gICAgICAgIGNvbnN0IGZpZWxkTW9kYWwgPSBuZXcgQm9vbGVhbk1vZGFsKGFwcCwgZmlsZSwgdGhpcy5maWVsZCwgYlZhbHVlLCBsaW5lTnVtYmVyLCBpbkZyb250bWF0dGVyLCBhZnRlcilcbiAgICAgICAgZmllbGRNb2RhbC50aXRsZUVsLnNldFRleHQoYFNldCB2YWx1ZSBmb3IgJHtzZWxlY3RlZEZpZWxkTmFtZX1gKTtcbiAgICAgICAgZmllbGRNb2RhbC5vcGVuKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlRHZGaWVsZChcbiAgICAgICAgcGx1Z2luOiBNZXRhZGF0YU1lbnUsXG4gICAgICAgIGR2OiBhbnksXG4gICAgICAgIHA6IGFueSxcbiAgICAgICAgZmllbGRDb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgICAgICBhdHRycz86IHsgY2xzPzogc3RyaW5nLCBhdHRyPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiwgb3B0aW9ucz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfVxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBjaGVja2JveDogSFRNTElucHV0RWxlbWVudCA9IGR2LmVsKFwiaW5wdXRcIiwgXCJcIiwgeyAuLi5hdHRycywgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIiB9KVxuICAgICAgICBjaGVja2JveC5jaGVja2VkID0gcFt0aGlzLmZpZWxkLm5hbWVdXG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGNoZWNrYm94KVxuICAgICAgICBjaGVja2JveC5vbmNoYW5nZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgQm9vbGVhbkZpZWxkLnJlcGxhY2VWYWx1ZXMocGx1Z2luLmFwcCwgcFtcImZpbGVcIl1bXCJwYXRoXCJdLCB0aGlzLmZpZWxkLm5hbWUsIGNoZWNrYm94LmNoZWNrZWQudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwgImltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCB7IEFwcCwgTWVudSwgc2V0SWNvbiwgVGV4dENvbXBvbmVudCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IHJlcGxhY2VWYWx1ZXMgfSBmcm9tIFwic3JjL2NvbW1hbmRzL3JlcGxhY2VWYWx1ZXNcIjtcbmltcG9ydCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwgZnJvbSBcInNyYy9vcHRpb25zL0ZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbFwiO1xuaW1wb3J0IE51bWJlcnRNb2RhbCBmcm9tIFwic3JjL29wdGlvbk1vZGFscy9maWVsZHMvTnVtYmVyTW9kYWxcIjtcbmltcG9ydCBGaWVsZFNldHRpbmdzTW9kYWwgZnJvbSBcInNyYy9zZXR0aW5ncy9GaWVsZFNldHRpbmdzTW9kYWxcIjtcbmltcG9ydCB7IEZpZWxkSWNvbiwgRmllbGRUeXBlIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcIi4uL0ZpZWxkXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIgfSBmcm9tIFwiLi4vRmllbGRNYW5hZ2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE51bWJlckZpZWxkIGV4dGVuZHMgRmllbGRNYW5hZ2VyIHtcblxuICAgIHByaXZhdGUgbnVtYmVyVmFsaWRhdG9yRmllbGQ6IEhUTUxEaXZFbGVtZW50O1xuICAgIHByaXZhdGUgbnVtYmVyU3RlcFZhbHVlOiBUZXh0Q29tcG9uZW50O1xuICAgIHByaXZhdGUgbnVtYmVyTWluVmFsdWU6IFRleHRDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSBudW1iZXJNYXhWYWx1ZTogVGV4dENvbXBvbmVudDtcblxuICAgIGNvbnN0cnVjdG9yKGZpZWxkOiBGaWVsZCkge1xuICAgICAgICBzdXBlcihmaWVsZCwgRmllbGRUeXBlLk51bWJlcilcbiAgICB9XG5cbiAgICBnZXRPcHRpb25zU3RyKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZmllbGQub3B0aW9ucykuZm9yRWFjaCgoaykgPT4geyBpZiAodGhpcy5maWVsZC5vcHRpb25zW2tdKSBvcHRpb25zLnB1c2goYCR7a306ICR7dGhpcy5maWVsZC5vcHRpb25zW2tdfWApIH0pXG4gICAgICAgIHJldHVybiBvcHRpb25zLmpvaW4oXCIgfCBcIilcbiAgICB9XG5cbiAgICBjYW5EZWNyZW1lbnQodmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB7IHN0ZXAsIG1pbiB9ID0gdGhpcy5maWVsZC5vcHRpb25zO1xuICAgICAgICBjb25zdCBmU3RlcCA9IHBhcnNlRmxvYXQoc3RlcCk7XG4gICAgICAgIGNvbnN0IGZNaW4gPSBwYXJzZUZsb2F0KG1pbik7XG4gICAgICAgIHJldHVybiAhKFxuICAgICAgICAgICAgaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpIHx8XG4gICAgICAgICAgICAhaXNOYU4oZk1pbikgJiZcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAhaXNOYU4oZlN0ZXApICYmIChcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCh2YWx1ZSkgLSBmU3RlcCA8IGZNaW4gfHxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCh2YWx1ZSkgLSAxIDwgZk1pblxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGNhbkluY3JlbWVudCh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHsgc3RlcCwgbWF4IH0gPSB0aGlzLmZpZWxkLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZTdGVwID0gcGFyc2VGbG9hdChzdGVwKTtcbiAgICAgICAgY29uc3QgZk1heCA9IHBhcnNlRmxvYXQobWF4KTtcbiAgICAgICAgcmV0dXJuICEoXG4gICAgICAgICAgICBpc05hTihwYXJzZUZsb2F0KHZhbHVlKSkgfHxcbiAgICAgICAgICAgICFpc05hTihmTWF4KSAmJlxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICFpc05hTihmU3RlcCkgJiYgKFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHZhbHVlKSArIGZTdGVwID4gZk1heCB8fFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHZhbHVlKSArIDEgPiBmTWF4XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfVxuXG4gICAgYXN5bmMgdmFsaWRhdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMuZmllbGQub3B0aW9ucztcbiAgICAgICAgY29uc3QgZk1pbiA9IHBhcnNlRmxvYXQobWluKTtcbiAgICAgICAgY29uc3QgZk1heCA9IHBhcnNlRmxvYXQobWF4KTtcbiAgICAgICAgY29uc3QgZlZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAhaXNOYU4oZlZhbHVlKSAmJiAoaXNOYU4oZk1pbikgfHwgZlZhbHVlID49IGZNaW4pICYmIChpc05hTihmTWF4KSB8fCBmVmFsdWUgPD0gZk1heClcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGFkZEZpZWxkT3B0aW9uKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBsb2NhdGlvbjogTWVudSB8IEZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbCk6IHZvaWQge1xuICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBOdW1iZXJ0TW9kYWwoYXBwLCBmaWxlLCB0aGlzLmZpZWxkLCB2YWx1ZSk7XG4gICAgICAgIG1vZGFsLnRpdGxlRWwuc2V0VGV4dChgQ2hhbmdlIFZhbHVlIGZvciA8JHtuYW1lfT5gKTtcbiAgICAgICAgaWYgKE51bWJlckZpZWxkLmlzTWVudShsb2NhdGlvbikpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKGBVcGRhdGUgPCR7bmFtZX0+YCk7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKEZpZWxkSWNvbltGaWVsZFR5cGUuTnVtYmVyXSk7XG4gICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKCgpID0+IG1vZGFsLm9wZW4oKSk7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRTZWN0aW9uKFwibWV0YWRhdGEtbWVudS5maWVsZHNcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc3QgeyBtaW4sIG1heCwgc3RlcCB9ID0gdGhpcy5maWVsZC5vcHRpb25zXG5cbiAgICAgICAgICAgIGNvbnN0IGZNaW4gPSBwYXJzZUZsb2F0KG1pbilcbiAgICAgICAgICAgIGNvbnN0IGZNYXggPSBwYXJzZUZsb2F0KG1heClcbiAgICAgICAgICAgIGNvbnN0IGZTdGVwID0gcGFyc2VGbG9hdChzdGVwKVxuICAgICAgICAgICAgY29uc3QgZlZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSlcbiAgICAgICAgICAgIGlmIChmU3RlcCkge1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oZk1pbikgJiYgZlZhbHVlIC0gZlN0ZXAgPiBmTWluKVxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNldEljb24oRmllbGRJY29uW0ZpZWxkVHlwZS5OdW1iZXJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoYDwke25hbWV9PiBcdTIxOThcdUZFMEYgJHtmVmFsdWUgLSBmU3RlcH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljaygoKSA9PiByZXBsYWNlVmFsdWVzKGFwcCwgZmlsZSwgbmFtZSwgKGZWYWx1ZSAtIGZTdGVwKS50b1N0cmluZygpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFNlY3Rpb24oXCJtZXRhZGF0YS1tZW51LmZpZWxkc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGZNYXgpICYmIGZWYWx1ZSArIGZTdGVwIDwgZk1heClcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKEZpZWxkSWNvbltGaWVsZFR5cGUuTnVtYmVyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKGA8JHtuYW1lfT4gXHUyMTk3XHVGRTBGICR7ZlZhbHVlICsgZlN0ZXB9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2soKCkgPT4gcmVwbGFjZVZhbHVlcyhhcHAsIGZpbGUsIG5hbWUsIChmVmFsdWUgKyBmU3RlcCkudG9TdHJpbmcoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRTZWN0aW9uKFwibWV0YWRhdGEtbWVudS5maWVsZHNcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoTnVtYmVyRmllbGQuaXNTdWdnZXN0KGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgbG9jYXRpb24ub3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZDogYHVwZGF0ZV8ke25hbWV9YCxcbiAgICAgICAgICAgICAgICBhY3Rpb25MYWJlbDogYDxzcGFuPlVwZGF0ZSA8Yj4ke25hbWV9PC9iPjwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4gbW9kYWwub3BlbigpLFxuICAgICAgICAgICAgICAgIGljb246IEZpZWxkSWNvbltGaWVsZFR5cGUuTnVtYmVyXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGNyZWF0ZU51bWJlckNvbnRhaW5lcihwYXJlbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG51bWJlclN0ZXBWYWx1ZUNvbnRhaW5lciA9IHBhcmVudENvbnRhaW5lci5jcmVhdGVEaXYoKTtcbiAgICAgICAgbnVtYmVyU3RlcFZhbHVlQ29udGFpbmVyLmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IFwiU3RlcCAob3B0aW9uYWwpXCIsIGNsczogJ21ldGFkYXRhLW1lbnUtZmllbGQtb3B0aW9uJyB9KVxuICAgICAgICB0aGlzLm51bWJlclN0ZXBWYWx1ZSA9IG5ldyBUZXh0Q29tcG9uZW50KG51bWJlclN0ZXBWYWx1ZUNvbnRhaW5lcilcbiAgICAgICAgdGhpcy5udW1iZXJTdGVwVmFsdWUuc2V0VmFsdWUodGhpcy5maWVsZC5vcHRpb25zLnN0ZXAgfHwgXCJcIilcblxuICAgICAgICBjb25zdCBudW1iZXJNaW5WYWx1ZUNvbnRhaW5lciA9IHBhcmVudENvbnRhaW5lci5jcmVhdGVEaXYoKTtcbiAgICAgICAgbnVtYmVyTWluVmFsdWVDb250YWluZXIuY3JlYXRlRWwoXCJzcGFuXCIsIHsgdGV4dDogXCJNaW4gdmFsdWUgKG9wdGlvbmFsKVwiLCBjbHM6ICdtZXRhZGF0YS1tZW51LWZpZWxkLW9wdGlvbicgfSlcbiAgICAgICAgdGhpcy5udW1iZXJNaW5WYWx1ZSA9IG5ldyBUZXh0Q29tcG9uZW50KG51bWJlck1pblZhbHVlQ29udGFpbmVyKVxuICAgICAgICB0aGlzLm51bWJlck1pblZhbHVlLnNldFZhbHVlKHRoaXMuZmllbGQub3B0aW9ucy5taW4gfHwgXCJcIilcblxuICAgICAgICBjb25zdCBudW1iZXJNYXhWYWx1ZUNvbnRhaW5lciA9IHBhcmVudENvbnRhaW5lci5jcmVhdGVEaXYoKTtcbiAgICAgICAgbnVtYmVyTWF4VmFsdWVDb250YWluZXIuY3JlYXRlRWwoXCJzcGFuXCIsIHsgdGV4dDogXCJNYXggdmFsdWUgKG9wdGlvbmFsKVwiLCBjbHM6ICdtZXRhZGF0YS1tZW51LWZpZWxkLW9wdGlvbicgfSlcbiAgICAgICAgdGhpcy5udW1iZXJNYXhWYWx1ZSA9IG5ldyBUZXh0Q29tcG9uZW50KG51bWJlck1heFZhbHVlQ29udGFpbmVyKVxuICAgICAgICB0aGlzLm51bWJlck1heFZhbHVlLnNldFZhbHVlKHRoaXMuZmllbGQub3B0aW9ucy5tYXggfHwgXCJcIilcbiAgICAgICAgdGhpcy5udW1iZXJTdGVwVmFsdWUub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgdGhpcy5maWVsZC5vcHRpb25zLnN0ZXAgPSB2YWx1ZTtcbiAgICAgICAgICAgIEZpZWxkU2V0dGluZ3NNb2RhbC5yZW1vdmVWYWxpZGF0aW9uRXJyb3IodGhpcy5udW1iZXJTdGVwVmFsdWUpO1xuICAgICAgICB9KVxuICAgICAgICB0aGlzLm51bWJlck1pblZhbHVlLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmllbGQub3B0aW9ucy5taW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIEZpZWxkU2V0dGluZ3NNb2RhbC5yZW1vdmVWYWxpZGF0aW9uRXJyb3IodGhpcy5udW1iZXJNaW5WYWx1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMubnVtYmVyTWF4VmFsdWUub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgdGhpcy5maWVsZC5vcHRpb25zLm1heCA9IHZhbHVlO1xuICAgICAgICAgICAgRmllbGRTZXR0aW5nc01vZGFsLnJlbW92ZVZhbGlkYXRpb25FcnJvcih0aGlzLm51bWJlck1heFZhbHVlKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjcmVhdGVTZXR0aW5nQ29udGFpbmVyKHBhcmVudENvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQsIHBsdWdpbjogTWV0YWRhdGFNZW51KTogdm9pZCB7XG4gICAgICAgIHRoaXMubnVtYmVyVmFsaWRhdG9yRmllbGQgPSBwYXJlbnRDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtbnVtYmVyLW9wdGlvbnNcIiB9KVxuICAgICAgICB0aGlzLmNyZWF0ZU51bWJlckNvbnRhaW5lcih0aGlzLm51bWJlclZhbGlkYXRvckZpZWxkKVxuICAgICAgICB0aGlzLm51bWJlclZhbGlkYXRvckZpZWxkLmNyZWF0ZURpdih7IGNsczogJ21ldGFkYXRhLW1lbnUtc2VwYXJhdG9yJyB9KS5jcmVhdGVFbChcImhyXCIpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlT3B0aW9ucygpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGVycm9yID0gZmFsc2VcbiAgICAgICAgaWYgKHRoaXMuZmllbGQub3B0aW9ucy5zdGVwICYmIGlzTmFOKHBhcnNlRmxvYXQodGhpcy5maWVsZC5vcHRpb25zLnN0ZXApKSkge1xuICAgICAgICAgICAgRmllbGRTZXR0aW5nc01vZGFsLnNldFZhbGlkYXRpb25FcnJvcihcbiAgICAgICAgICAgICAgICB0aGlzLm51bWJlclN0ZXBWYWx1ZSwgdGhpcy5udW1iZXJTdGVwVmFsdWUuaW5wdXRFbCxcbiAgICAgICAgICAgICAgICBcIlZhbHVlcyBtdXN0IGJlIG51bWVyaWMuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZmllbGQub3B0aW9ucy5taW4gJiYgaXNOYU4ocGFyc2VGbG9hdCh0aGlzLmZpZWxkLm9wdGlvbnMubWluKSkpIHtcbiAgICAgICAgICAgIEZpZWxkU2V0dGluZ3NNb2RhbC5zZXRWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgICAgICAgICAgdGhpcy5udW1iZXJNaW5WYWx1ZSwgdGhpcy5udW1iZXJNaW5WYWx1ZS5pbnB1dEVsLFxuICAgICAgICAgICAgICAgIFwiVmFsdWVzIG11c3QgYmUgbnVtZXJpYy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5maWVsZC5vcHRpb25zLm1heCAmJiBpc05hTihwYXJzZUZsb2F0KHRoaXMuZmllbGQub3B0aW9ucy5tYXgpKSkge1xuICAgICAgICAgICAgRmllbGRTZXR0aW5nc01vZGFsLnNldFZhbGlkYXRpb25FcnJvcihcbiAgICAgICAgICAgICAgICB0aGlzLm51bWJlck1heFZhbHVlLCB0aGlzLm51bWJlck1heFZhbHVlLmlucHV0RWwsXG4gICAgICAgICAgICAgICAgXCJWYWx1ZXMgbXVzdCBiZSBudW1lcmljLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhZXJyb3JcbiAgICB9XG5cbiAgICBjcmVhdGVBbmRPcGVuRmllbGRNb2RhbChhcHA6IEFwcCwgZmlsZTogVEZpbGUsIHNlbGVjdGVkRmllbGROYW1lOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nLCBsaW5lTnVtYmVyPzogbnVtYmVyLCBpbkZyb250bWF0dGVyPzogYm9vbGVhbiwgYWZ0ZXI/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZpZWxkTW9kYWwgPSBuZXcgTnVtYmVydE1vZGFsKGFwcCwgZmlsZSwgdGhpcy5maWVsZCwgdmFsdWUgfHwgXCJcIiwgbGluZU51bWJlciwgaW5Gcm9udG1hdHRlciwgYWZ0ZXIpO1xuICAgICAgICBmaWVsZE1vZGFsLnRpdGxlRWwuc2V0VGV4dChgRW50ZXIgdmFsdWUgZm9yICR7c2VsZWN0ZWRGaWVsZE5hbWV9YCk7XG4gICAgICAgIGZpZWxkTW9kYWwub3BlbigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlRHZCdXR0b25zKGRlY3JlbWVudEJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQsIGluY3JlbWVudEJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuRGVjcmVtZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVjcmVtZW50QnRuLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVjcmVtZW50QnRuLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNhbkluY3JlbWVudCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGluY3JlbWVudEJ0bi5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluY3JlbWVudEJ0bi5hZGRDbGFzcygnZGlzYWJsZWQnKTs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGVEdkZpZWxkKFxuICAgICAgICBwbHVnaW46IE1ldGFkYXRhTWVudSxcbiAgICAgICAgZHY6IGFueSxcbiAgICAgICAgcDogYW55LFxuICAgICAgICBmaWVsZENvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgICAgIGF0dHJzPzogeyBjbHM/OiBzdHJpbmcsIGF0dHI/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LCBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB9XG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG5cbiAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGR2LmVsKCdzcGFuJywgcFt0aGlzLmZpZWxkLm5hbWVdLCBhdHRycylcbiAgICAgICAgY29uc3QgaW5wdXRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgaW5wdXQuc2V0QXR0cihcImNsYXNzXCIsIFwibWV0YWRhdGEtbWVudS1kdi1pbnB1dFwiKTtcbiAgICAgICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICBpbnB1dC52YWx1ZSA9IHBbdGhpcy5maWVsZC5uYW1lXTtcbiAgICAgICAgLyogZW5kIHNwYWNlciAqL1xuICAgICAgICBjb25zdCB0cmlwbGVTcGFjZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0cmlwbGVTcGFjZXIuc2V0QXR0cihcImNsYXNzXCIsIFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC10cmlwbGUtc3BhY2VyXCIpO1xuXG4gICAgICAgIC8qIGJ1dHRvbiB0byBkaXNwbGF5IGlucHV0ICovXG4gICAgICAgIGNvbnN0IGVkaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBzZXRJY29uKGVkaXRCdXR0b24sIEZpZWxkSWNvbltGaWVsZFR5cGUuTnVtYmVyXSk7XG4gICAgICAgIGVkaXRCdXR0b24uc2V0QXR0cignY2xhc3MnLCBcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtYnV0dG9uXCIpO1xuXG5cbiAgICAgICAgLyogYnV0dG9uIHRvIGRpc3BsYXkgaW5wdXQgKi9cbiAgICAgICAgY29uc3QgZGVjcmVtZW50QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgc2V0SWNvbihkZWNyZW1lbnRCdXR0b24sIFwibGVmdC1hcnJvd1wiKTtcbiAgICAgICAgZGVjcmVtZW50QnV0dG9uLnNldEF0dHIoJ2NsYXNzJywgXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLWJ1dHRvblwiKTtcblxuXG4gICAgICAgIC8qIGJ1dHRvbiB0byBkaXNwbGF5IGlucHV0ICovXG4gICAgICAgIGNvbnN0IGluY3JlbWVudEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHNldEljb24oaW5jcmVtZW50QnV0dG9uLCBcInJpZ2h0LWFycm93XCIpXG4gICAgICAgIGluY3JlbWVudEJ1dHRvbi5zZXRBdHRyKCdjbGFzcycsIFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC1idXR0b25cIik7XG5cbiAgICAgICAgaWYgKCFhdHRycz8ub3B0aW9ucz8uYWx3YXlzT24pIHtcbiAgICAgICAgICAgIGVkaXRCdXR0b24uaGlkZSgpO1xuICAgICAgICAgICAgZGVjcmVtZW50QnV0dG9uLmhpZGUoKTtcbiAgICAgICAgICAgIGluY3JlbWVudEJ1dHRvbi5oaWRlKCk7XG4gICAgICAgICAgICB0cmlwbGVTcGFjZXIuc2hvdygpO1xuXG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5vbm1vdXNlb3ZlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBlZGl0QnV0dG9uLnNob3coKTtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnRCdXR0b24uc2hvdygpO1xuICAgICAgICAgICAgICAgIGluY3JlbWVudEJ1dHRvbi5zaG93KCk7XG4gICAgICAgICAgICAgICAgdHJpcGxlU3BhY2VyLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLm9ubW91c2VvdXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZWRpdEJ1dHRvbi5oaWRlKCk7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50QnV0dG9uLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnRCdXR0b24uaGlkZSgpO1xuICAgICAgICAgICAgICAgIHRyaXBsZVNwYWNlci5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWxpZGF0ZUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKVxuICAgICAgICBzZXRJY29uKHZhbGlkYXRlSWNvbiwgXCJjaGVja21hcmtcIilcbiAgICAgICAgdmFsaWRhdGVJY29uLnNldEF0dHIoXCJjbGFzc1wiLCBcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtYnV0dG9uXCIpXG4gICAgICAgIHZhbGlkYXRlSWNvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGF3YWl0IHRoaXMudmFsaWRhdGVWYWx1ZShpbnB1dC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gcGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocFtcImZpbGVcIl1bXCJwYXRoXCJdKVxuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlcGxhY2VWYWx1ZXMocGx1Z2luLmFwcCwgZmlsZSwgdGhpcy5maWVsZC5uYW1lLCBpbnB1dC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVEdkJ1dHRvbnMoZGVjcmVtZW50QnV0dG9uLCBpbmNyZW1lbnRCdXR0b24sIGlucHV0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChpbnB1dENvbnRhaW5lcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnB1dENvbnRhaW5lcj8uYXBwZW5kQ2hpbGQodmFsaWRhdGVJY29uKVxuICAgICAgICBjb25zdCBjYW5jZWxJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIilcbiAgICAgICAgY2FuY2VsSWNvbi5zZXRBdHRyKFwiY2xhc3NcIiwgXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLWJ1dHRvblwiKVxuICAgICAgICBzZXRJY29uKGNhbmNlbEljb24sIFwiY3Jvc3NcIik7XG4gICAgICAgIGNhbmNlbEljb24ub25jbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChpbnB1dENvbnRhaW5lcik7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChkZWNyZW1lbnRCdXR0b24pO1xuICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChlZGl0QnV0dG9uKTtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGluY3JlbWVudEJ1dHRvbik7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZCh0cmlwbGVTcGFjZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0Q29udGFpbmVyLmFwcGVuZENoaWxkKGNhbmNlbEljb24pO1xuICAgICAgICBpbnB1dC5mb2N1cygpO1xuXG4gICAgICAgIGlucHV0Lm9ua2V5dXAgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRlVmFsdWUoaW5wdXQudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuYWRkQ2xhc3MoJ2lzLWludmFsaWQnKTtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUljb24uYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlucHV0LnJlbW92ZUNsYXNzKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGVJY29uLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQub25rZXlkb3duID0gYXN5bmMgKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF3YWl0IHRoaXMudmFsaWRhdGVWYWx1ZShpbnB1dC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IHBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBbXCJmaWxlXCJdW1wicGF0aFwiXSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiBmaWxlLmV4dGVuc2lvbiA9PSBcIm1kXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlcGxhY2VWYWx1ZXMocGx1Z2luLmFwcCwgZmlsZSwgdGhpcy5maWVsZC5uYW1lLCBpbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUR2QnV0dG9ucyhkZWNyZW1lbnRCdXR0b24sIGluY3JlbWVudEJ1dHRvbiwgaW5wdXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmllbGRDb250YWluZXIucmVtb3ZlQ2hpbGQoaW5wdXRDb250YWluZXIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLnJlbW92ZUNoaWxkKGlucHV0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChkZWNyZW1lbnRCdXR0b24pO1xuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGZpZWxkVmFsdWUpO1xuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGVkaXRCdXR0b24pO1xuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGluY3JlbWVudEJ1dHRvbik7XG4gICAgICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQodHJpcGxlU3BhY2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiBlZGl0QnV0dG9uIG9uIGNsaWNrIDogcmVtb3ZlIGJ1dHRvbiBhbmQgZmllbGQgYW5kIGRpc3BsYXkgaW5wdXQgZmllbGQqL1xuICAgICAgICBlZGl0QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChmaWVsZFZhbHVlKTtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLnJlbW92ZUNoaWxkKGVkaXRCdXR0b24pO1xuICAgICAgICAgICAgZmllbGRDb250YWluZXIucmVtb3ZlQ2hpbGQoZGVjcmVtZW50QnV0dG9uKTtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLnJlbW92ZUNoaWxkKGluY3JlbWVudEJ1dHRvbik7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZCh0cmlwbGVTcGFjZXIpO1xuICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXRDb250YWluZXIpO1xuICAgICAgICAgICAgaW5wdXQuZm9jdXMoKVxuICAgICAgICB9XG5cbiAgICAgICAgLyogZGVjcmVtZW50IGJ1dHRvbiBvbiBjbGljazogZGVjcmVtZW50IGJ5IHN0ZXAgb3IgYnkgMSAqL1xuICAgICAgICBkZWNyZW1lbnRCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbkRlY3JlbWVudChwW3RoaXMuZmllbGQubmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdGVwIH0gPSB0aGlzLmZpZWxkLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgY29uc3QgZlN0ZXAgPSBwYXJzZUZsb2F0KHN0ZXApXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IHBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBbXCJmaWxlXCJdW1wicGF0aFwiXSlcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGZpbGUuZXh0ZW5zaW9uID09IFwibWRcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9ICghIWZTdGVwID8gcFt0aGlzLmZpZWxkLm5hbWVdIC0gZlN0ZXAgOiBwW3RoaXMuZmllbGQubmFtZV0gLSAxKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXBsYWNlVmFsdWVzKHBsdWdpbi5hcHAsIGZpbGUsIHRoaXMuZmllbGQubmFtZSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUR2QnV0dG9ucyhkZWNyZW1lbnRCdXR0b24sIGluY3JlbWVudEJ1dHRvbiwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGluY3JlbWVudCBidXR0b24gb24gY2xpY2s6IGluY3JlbWVudCBieSBzdGVwIG9yIGJ5IDEgKi9cbiAgICAgICAgaW5jcmVtZW50QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5jYW5JbmNyZW1lbnQocFt0aGlzLmZpZWxkLm5hbWVdKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc3RlcCB9ID0gdGhpcy5maWVsZC5vcHRpb25zO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZTdGVwID0gcGFyc2VGbG9hdChzdGVwKVxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBwbHVnaW4uYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwW1wiZmlsZVwiXVtcInBhdGhcIl0pXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiBmaWxlLmV4dGVuc2lvbiA9PSBcIm1kXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSAoISFmU3RlcCA/IHBbdGhpcy5maWVsZC5uYW1lXSArIGZTdGVwIDogcFt0aGlzLmZpZWxkLm5hbWVdICsgMSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZVZhbHVlcyhwbHVnaW4uYXBwLCBmaWxlLCB0aGlzLmZpZWxkLm5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVEdkJ1dHRvbnMoZGVjcmVtZW50QnV0dG9uLCBpbmNyZW1lbnRCdXR0b24sIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpbml0aWFsIHN0YXRlICovXG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGRlY3JlbWVudEJ1dHRvbik7XG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGZpZWxkVmFsdWUpO1xuICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChlZGl0QnV0dG9uKTtcbiAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoaW5jcmVtZW50QnV0dG9uKTtcbiAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQodHJpcGxlU3BhY2VyKTtcbiAgICAgICAgdGhpcy50b2dnbGVEdkJ1dHRvbnMoZGVjcmVtZW50QnV0dG9uLCBpbmNyZW1lbnRCdXR0b24sIHBbdGhpcy5maWVsZC5uYW1lXSk7XG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBUZXh0Q29tcG9uZW50LCBURmlsZSwgQnV0dG9uQ29tcG9uZW50LCBNYXJrZG93bkVkaXRWaWV3LCBNYXJrZG93blZpZXcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IGluc2VydFZhbHVlcyB9IGZyb20gXCJzcmMvY29tbWFuZHMvaW5zZXJ0VmFsdWVzXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcInNyYy9maWVsZHMvRmllbGRcIjtcbmltcG9ydCBOdW1iZXJGaWVsZCBmcm9tIFwic3JjL2ZpZWxkcy9maWVsZE1hbmFnZXJzL051bWJlckZpZWxkXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIgfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnVtYmVydE1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXG4gICAgcHJpdmF0ZSBmaWxlOiBURmlsZTtcbiAgICBwcml2YXRlIHZhbHVlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBsaW5lTnVtYmVyOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBpbkZyb250bWF0dGVyOiBib29sZWFuO1xuICAgIHByaXZhdGUgYWZ0ZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBmaWVsZDogRmllbGQ7XG4gICAgcHJpdmF0ZSBmaWVsZE1hbmFnZXI6IE51bWJlckZpZWxkO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBmaWVsZDogRmllbGQsIHZhbHVlOiBzdHJpbmcsIGxpbmVOdW1iZXI6IG51bWJlciA9IC0xLCBpbkZyb250TWF0dGVyOiBib29sZWFuID0gZmFsc2UsIGFmdGVyOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLmluRnJvbnRtYXR0ZXIgPSBpbkZyb250TWF0dGVyO1xuICAgICAgICB0aGlzLmFmdGVyID0gYWZ0ZXI7XG4gICAgICAgIHRoaXMuZmllbGRNYW5hZ2VyID0gbmV3IEZpZWxkTWFuYWdlclt0aGlzLmZpZWxkLnR5cGVdKHRoaXMuZmllbGQpXG4gICAgfTtcblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgaW5wdXREaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgdGhpcy5idWlsZElucHV0RWwoaW5wdXREaXYpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGRlY3JlbWVudChpbnB1dEVsOiBUZXh0Q29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgc3RlcCB9ID0gdGhpcy5maWVsZC5vcHRpb25zO1xuICAgICAgICBjb25zdCBmU3RlcCA9IHBhcnNlRmxvYXQoc3RlcCk7XG4gICAgICAgIGlmICghaXNOYU4oZlN0ZXApKSB7XG4gICAgICAgICAgICBpbnB1dEVsLnNldFZhbHVlKChwYXJzZUZsb2F0KGlucHV0RWwuZ2V0VmFsdWUoKSkgLSBmU3RlcCkudG9TdHJpbmcoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dEVsLnNldFZhbHVlKChwYXJzZUZsb2F0KGlucHV0RWwuZ2V0VmFsdWUoKSkgLSAxKS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaW5jcmVtZW50KGlucHV0RWw6IFRleHRDb21wb25lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBzdGVwIH0gPSB0aGlzLmZpZWxkLm9wdGlvbnNcbiAgICAgICAgY29uc3QgZlN0ZXAgPSBwYXJzZUZsb2F0KHN0ZXApXG4gICAgICAgIGlmICghaXNOYU4oZlN0ZXApKSB7XG4gICAgICAgICAgICBpbnB1dEVsLnNldFZhbHVlKChwYXJzZUZsb2F0KGlucHV0RWwuZ2V0VmFsdWUoKSkgKyBmU3RlcCkudG9TdHJpbmcoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dEVsLnNldFZhbHVlKChwYXJzZUZsb2F0KGlucHV0RWwuZ2V0VmFsdWUoKSkgKyAxKS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlQnV0dG9uc1N0YXRlKG1pbnVzQnRuOiBCdXR0b25Db21wb25lbnQsIHBsdXNCdG46IEJ1dHRvbkNvbXBvbmVudCwgaW5wdXRFbDogVGV4dENvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICBtaW51c0J0bi5zZXREaXNhYmxlZCghdGhpcy5maWVsZE1hbmFnZXIuY2FuRGVjcmVtZW50KGlucHV0RWwuZ2V0VmFsdWUoKSkpO1xuICAgICAgICBwbHVzQnRuLnNldERpc2FibGVkKCF0aGlzLmZpZWxkTWFuYWdlci5jYW5JbmNyZW1lbnQoaW5wdXRFbC5nZXRWYWx1ZSgpKSk7XG4gICAgICAgIGlmICh0aGlzLmZpZWxkTWFuYWdlci5jYW5EZWNyZW1lbnQoaW5wdXRFbC5nZXRWYWx1ZSgpKSkge1xuICAgICAgICAgICAgbWludXNCdG4uc2V0Q3RhKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtaW51c0J0bi5yZW1vdmVDdGEoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5maWVsZE1hbmFnZXIuY2FuSW5jcmVtZW50KGlucHV0RWwuZ2V0VmFsdWUoKSkpIHtcbiAgICAgICAgICAgIHBsdXNCdG4uc2V0Q3RhKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbHVzQnRuLnJlbW92ZUN0YSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidWlsZElucHV0RWwoaW5wdXREaXY6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgc3RlcCB9ID0gdGhpcy5maWVsZC5vcHRpb25zXG5cbiAgICAgICAgY29uc3QgZm9ybSA9IGlucHV0RGl2LmNyZWF0ZUVsKFwiZm9ybVwiKTtcbiAgICAgICAgZm9ybS50eXBlID0gXCJzdWJtaXRcIjtcblxuICAgICAgICBjb25zdCBmaWVsZENvbnRhaW5lciA9IGZvcm0uY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwibWV0YWRhdGEtbWVudS1tb2RhbC12YWx1ZS13aXRoLWJ0blwiIH0pXG5cbiAgICAgICAgY29uc3QgaW5wdXRFbCA9IG5ldyBUZXh0Q29tcG9uZW50KGZpZWxkQ29udGFpbmVyKTtcbiAgICAgICAgaW5wdXRFbC5pbnB1dEVsLmZvY3VzKCk7XG4gICAgICAgIGlucHV0RWwuc2V0VmFsdWUoYCR7dGhpcy52YWx1ZX1gKTtcblxuICAgICAgICBjb25zdCBtaW51c0J0biA9IG5ldyBCdXR0b25Db21wb25lbnQoZmllbGRDb250YWluZXIpO1xuICAgICAgICBtaW51c0J0bi5zZXRCdXR0b25UZXh0KGAtICR7ISFzdGVwID8gc3RlcCA6IDF9YCk7XG4gICAgICAgIG1pbnVzQnRuLnNldERpc2FibGVkKCF0aGlzLmZpZWxkTWFuYWdlci5jYW5EZWNyZW1lbnQoaW5wdXRFbC5nZXRWYWx1ZSgpKSk7XG5cbiAgICAgICAgY29uc3QgcGx1c0J0biA9IG5ldyBCdXR0b25Db21wb25lbnQoZmllbGRDb250YWluZXIpO1xuICAgICAgICBwbHVzQnRuLnNldEJ1dHRvblRleHQoYCsgJHshIXN0ZXAgPyBzdGVwIDogMX1gKTtcbiAgICAgICAgcGx1c0J0bi5zZXREaXNhYmxlZCghdGhpcy5maWVsZE1hbmFnZXIuY2FuSW5jcmVtZW50KGlucHV0RWwuZ2V0VmFsdWUoKSkpO1xuXG4gICAgICAgIGNvbnN0IGVycm9yRmllbGQgPSBmb3JtLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtbW9kYWwtdmFsdWUtd2l0aC1idG4tZXJyb3ItZmllbGRcIiB9KVxuICAgICAgICBlcnJvckZpZWxkLmhpZGUoKVxuXG4gICAgICAgIGNvbnN0IGZvb3RlciA9IGZvcm0uY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1ncmlkLWZvb3RlclwiIH0pXG5cbiAgICAgICAgY29uc3QgdmFsaWRhdGVCdG4gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGZvb3Rlcik7XG4gICAgICAgIHZhbGlkYXRlQnRuLnNldEljb24oXCJjaGVja21hcmtcIik7XG5cbiAgICAgICAgY29uc3QgY2FuY2VsQnRuID0gbmV3IEJ1dHRvbkNvbXBvbmVudChmb290ZXIpO1xuICAgICAgICBjYW5jZWxCdG4uc2V0SWNvbihcImNyb3NzXCIpO1xuXG5cbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25zU3RhdGUobWludXNCdG4sIHBsdXNCdG4sIGlucHV0RWwpO1xuXG4gICAgICAgIC8vZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgaW5wdXRFbC5vbkNoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICBpbnB1dEVsLmlucHV0RWwucmVtb3ZlQ2xhc3MoXCJpcy1pbnZhbGlkXCIpXG4gICAgICAgICAgICBlcnJvckZpZWxkLmhpZGUoKTtcbiAgICAgICAgICAgIGVycm9yRmllbGQuc2V0VGV4dChcIlwiKTtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uc1N0YXRlKG1pbnVzQnRuLCBwbHVzQnRuLCBpbnB1dEVsKVxuICAgICAgICB9KVxuXG4gICAgICAgIHBsdXNCdG4ub25DbGljaygoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5pbmNyZW1lbnQoaW5wdXRFbCk7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbnNTdGF0ZShtaW51c0J0biwgcGx1c0J0biwgaW5wdXRFbCk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgbWludXNCdG4ub25DbGljaygoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5kZWNyZW1lbnQoaW5wdXRFbCk7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbnNTdGF0ZShtaW51c0J0biwgcGx1c0J0biwgaW5wdXRFbCk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgY2FuY2VsQnRuLm9uQ2xpY2soKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICB9KVxuXG4gICAgICAgIGZvcm0ub25zdWJtaXQgPSBhc3luYyAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGxldCBpbnB1dFZhbHVlID0gaW5wdXRFbC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmZpZWxkTWFuYWdlci52YWxpZGF0ZVZhbHVlKGlucHV0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy5maWVsZC5vcHRpb25zXG4gICAgICAgICAgICAgICAgZXJyb3JGaWVsZC5zaG93KCk7XG4gICAgICAgICAgICAgICAgZXJyb3JGaWVsZC5zZXRUZXh0KGB2YWx1ZSBtdXN0IGJlIG51bWVyaWMke21pbiA/IFwiIGFuZCA+PSBcIiArIG1pbiA6IFwiXCJ9ICR7bWF4ID8gXCIgYW5kIDw9IFwiICsgbWF4IDogXCJcIn1gKVxuICAgICAgICAgICAgICAgIGlucHV0RWwuaW5wdXRFbC5zZXRBdHRyKFwiY2xhc3NcIiwgXCJpcy1pbnZhbGlkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5saW5lTnVtYmVyID09IC0xKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcmVwbGFjZVZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIGlucHV0VmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBpbnNlcnRWYWx1ZXModGhpcy5hcHAsIHRoaXMuZmlsZSwgdGhpcy5maWVsZC5uYW1lLCBpbnB1dFZhbHVlLCB0aGlzLmxpbmVOdW1iZXIsIHRoaXMuaW5Gcm9udG1hdHRlciwgdGhpcy5hZnRlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9O1xuICAgIH07XG59OyIsICJpbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBBcHAsIE1lbnUsIHNldEljb24sIFRleHRDb21wb25lbnQsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsIGZyb20gXCJzcmMvb3B0aW9ucy9GaWVsZENvbW1hbmRTdWdnZXN0TW9kYWxcIjtcbmltcG9ydCBTZWxlY3RNb2RhbCBmcm9tIFwic3JjL29wdGlvbk1vZGFscy9maWVsZHMvU2VsZWN0TW9kYWxcIjtcbmltcG9ydCBGaWVsZFNldHRpbmcgZnJvbSBcInNyYy9zZXR0aW5ncy9GaWVsZFNldHRpbmdcIjtcbmltcG9ydCB7IEZpZWxkSWNvbiwgRmllbGRUeXBlIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcIi4uL0ZpZWxkXCI7XG5pbXBvcnQgQWJzdHJhY3RMaXN0QmFzZWRGaWVsZCBmcm9tIFwiLi9BYnN0cmFjdExpc3RCYXNlZEZpZWxkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdEZpZWxkIGV4dGVuZHMgQWJzdHJhY3RMaXN0QmFzZWRGaWVsZCB7XG5cbiAgICB2YWx1ZXNQcm9tcHRDb21wb25lbnRzOiBBcnJheTxUZXh0Q29tcG9uZW50PiA9IFtdO1xuICAgIHByZXNldFZhbHVlc0ZpZWxkczogSFRNTERpdkVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZDogRmllbGQpIHtcbiAgICAgICAgc3VwZXIoZmllbGQsIEZpZWxkVHlwZS5TZWxlY3QpXG4gICAgfVxuXG4gICAgYWRkRmllbGRPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBhcHA6IEFwcCwgZmlsZTogVEZpbGUsIGxvY2F0aW9uOiBNZW51IHwgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IFNlbGVjdE1vZGFsKGFwcCwgZmlsZSwgdmFsdWUsIHRoaXMuZmllbGQpO1xuICAgICAgICBtb2RhbC50aXRsZUVsLnNldFRleHQoXCJTZWxlY3QgdmFsdWVcIik7XG4gICAgICAgIGlmIChTZWxlY3RGaWVsZC5pc01lbnUobG9jYXRpb24pKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShgVXBkYXRlICR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICBpdGVtLnNldEljb24oRmllbGRJY29uW0ZpZWxkVHlwZS5TZWxlY3RdKTtcbiAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2soKCkgPT4gbW9kYWwub3BlbigpKTtcbiAgICAgICAgICAgICAgICBpdGVtLnNldFNlY3Rpb24oXCJtZXRhZGF0YS1tZW51LmZpZWxkc1wiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKFNlbGVjdEZpZWxkLmlzU3VnZ2VzdChsb2NhdGlvbikpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLm9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IGB1cGRhdGVfJHtuYW1lfWAsXG4gICAgICAgICAgICAgICAgYWN0aW9uTGFiZWw6IGA8c3Bhbj5VcGRhdGUgPGI+JHtuYW1lfTwvYj48L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IG1vZGFsLm9wZW4oKSxcbiAgICAgICAgICAgICAgICBpY29uOiBGaWVsZEljb25bRmllbGRUeXBlLlNlbGVjdF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBjcmVhdGVBbmRPcGVuRmllbGRNb2RhbChhcHA6IEFwcCwgZmlsZTogVEZpbGUsIHNlbGVjdGVkRmllbGROYW1lOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nLCBsaW5lTnVtYmVyPzogbnVtYmVyLCBpbkZyb250bWF0dGVyPzogYm9vbGVhbiwgYWZ0ZXI/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZpZWxkTW9kYWwgPSBuZXcgU2VsZWN0TW9kYWwoYXBwLCBmaWxlLCB2YWx1ZSB8fCBcIlwiLCB0aGlzLmZpZWxkLCBsaW5lTnVtYmVyLCBpbkZyb250bWF0dGVyLCBhZnRlcik7XG4gICAgICAgIGZpZWxkTW9kYWwudGl0bGVFbC5zZXRUZXh0KGBTZWxlY3Qgb3B0aW9uIGZvciAke3NlbGVjdGVkRmllbGROYW1lfWApO1xuICAgICAgICBmaWVsZE1vZGFsLm9wZW4oKTtcbiAgICB9XG5cblxuICAgIGFzeW5jIGNyZWF0ZUR2RmllbGQoXG4gICAgICAgIHBsdWdpbjogTWV0YWRhdGFNZW51LFxuICAgICAgICBkdjogYW55LFxuICAgICAgICBwOiBhbnksXG4gICAgICAgIGZpZWxkQ29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICAgICAgYXR0cnM/OiB7IGNscz86IHN0cmluZywgYXR0cj86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sIG9wdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH1cbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgdmFsdWVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpOztcbiAgICAgICAgY29uc3QgdmFsdWVMYWJlbCA9IGR2LmVsKFwic3BhblwiLCBwW3RoaXMuZmllbGQubmFtZV0gfHwgXCJcIik7XG4gICAgICAgIHZhbHVlQ29udGFpbmVyLmFwcGVuZENoaWxkKHZhbHVlTGFiZWwpO1xuICAgICAgICBjb25zdCBkcm9wRG93bkJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHNldEljb24oZHJvcERvd25CdXR0b24sIFwiZG93bi1jaGV2cm9uLWdseXBoXCIpO1xuICAgICAgICBkcm9wRG93bkJ1dHRvbi5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtYnV0dG9uXCIpO1xuICAgICAgICB2YWx1ZUNvbnRhaW5lci5hcHBlbmRDaGlsZChkcm9wRG93bkJ1dHRvbik7XG5cblxuICAgICAgICBjb25zdCBzZWxlY3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuICAgICAgICBzZWxlY3Quc2V0QXR0cihcImNsYXNzXCIsIFwibWV0YWRhdGEtbWVudS1kdi1zZWxlY3RcIik7XG4gICAgICAgIHNlbGVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxlY3QpO1xuICAgICAgICBjb25zdCBkaXNtaXNzQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgc2V0SWNvbihkaXNtaXNzQnRuLCBcImNyb3NzXCIpO1xuICAgICAgICBkaXNtaXNzQnRuLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC1idXR0b25cIik7XG4gICAgICAgIHNlbGVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChkaXNtaXNzQnRuKTtcbiAgICAgICAgY29uc3QgbnVsbE9wdGlvbiA9IG5ldyBPcHRpb24oXCItLXNlbGVjdC0tXCIsIHVuZGVmaW5lZCk7XG4gICAgICAgIHNlbGVjdC5hZGQobnVsbE9wdGlvbik7XG4gICAgICAgIGNvbnN0IGxpc3ROb3RlVmFsdWVzID0gYXdhaXQgRmllbGRTZXR0aW5nLmdldFZhbHVlc0xpc3RGcm9tTm90ZSh0aGlzLmZpZWxkLnZhbHVlc0xpc3ROb3RlUGF0aCwgcGx1Z2luLmFwcClcbiAgICAgICAgaWYgKGxpc3ROb3RlVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGlzdE5vdGVWYWx1ZXMuZm9yRWFjaChvID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBuZXcgT3B0aW9uKG8sIG8pO1xuICAgICAgICAgICAgICAgIGlmIChwW3RoaXMuZmllbGQubmFtZV0gPT09IG8gfHxcbiAgICAgICAgICAgICAgICAgICAgcFt0aGlzLmZpZWxkLm5hbWVdICYmXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHBbdGhpcy5maWVsZC5uYW1lXSkuaW5jbHVkZXMoXCJwYXRoXCIpICYmXG4gICAgICAgICAgICAgICAgICAgIGBbWyR7cFt0aGlzLmZpZWxkLm5hbWVdLnBhdGgucmVwbGFjZShcIi5tZFwiLCBcIlwiKX1dXWAgPT09IG9cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZWN0LmFkZChvcHRpb24pO1xuICAgICAgICAgICAgICAgIHNlbGVjdC5vbmNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdC52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHNlbGVjdC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChzZWxlY3RDb250YWluZXIpXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKHZhbHVlQ29udGFpbmVyKVxuICAgICAgICAgICAgICAgICAgICBTZWxlY3RGaWVsZC5yZXBsYWNlVmFsdWVzKHBsdWdpbi5hcHAsIHBbXCJmaWxlXCJdW1wicGF0aFwiXSwgdGhpcy5maWVsZC5uYW1lLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmZpZWxkLm9wdGlvbnMpLmZvckVhY2gobyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gbmV3IE9wdGlvbih0aGlzLmZpZWxkLm9wdGlvbnNbb10sIG8pO1xuICAgICAgICAgICAgICAgIGlmIChwW3RoaXMuZmllbGQubmFtZV0gPT09IHRoaXMuZmllbGQub3B0aW9uc1tvXSB8fFxuICAgICAgICAgICAgICAgICAgICBwW3RoaXMuZmllbGQubmFtZV0gJiZcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMocFt0aGlzLmZpZWxkLm5hbWVdKS5pbmNsdWRlcyhcInBhdGhcIikgJiZcbiAgICAgICAgICAgICAgICAgICAgYFtbJHtwW3RoaXMuZmllbGQubmFtZV0ucGF0aC5yZXBsYWNlKFwiLm1kXCIsIFwiXCIpfV1dYCA9PT0gdGhpcy5maWVsZC5vcHRpb25zW29dXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGVjdC5hZGQob3B0aW9uKTtcbiAgICAgICAgICAgICAgICBzZWxlY3Qub25jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdWYWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3QudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmZpZWxkLm9wdGlvbnNbc2VsZWN0LnZhbHVlXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLnJlbW92ZUNoaWxkKHNlbGVjdENvbnRhaW5lcilcbiAgICAgICAgICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQodmFsdWVDb250YWluZXIpXG4gICAgICAgICAgICAgICAgICAgIFNlbGVjdEZpZWxkLnJlcGxhY2VWYWx1ZXMocGx1Z2luLmFwcCwgcFtcImZpbGVcIl1bXCJwYXRoXCJdLCB0aGlzLmZpZWxkLm5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgZHJvcERvd25CdXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLnJlbW92ZUNoaWxkKHZhbHVlQ29udGFpbmVyKTtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGVjdENvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBkaXNtaXNzQnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChzZWxlY3RDb250YWluZXIpO1xuICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQodmFsdWVDb250YWluZXIpXG4gICAgICAgIH1cblxuICAgICAgICAvKiBpbml0aWFsIHN0YXRlICovXG4gICAgICAgIGlmICghYXR0cnM/Lm9wdGlvbnM/LmFsd2F5c09uKSB7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZCh2YWx1ZUNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxlY3RDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBEcm9wZG93bkNvbXBvbmVudCwgVEZpbGUsIEJ1dHRvbkNvbXBvbmVudCwgU3VnZ2VzdE1vZGFsIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcInNyYy9maWVsZHMvRmllbGRcIjtcbmltcG9ydCB7IHJlcGxhY2VWYWx1ZXMgfSBmcm9tIFwic3JjL2NvbW1hbmRzL3JlcGxhY2VWYWx1ZXNcIjtcbmltcG9ydCBGaWVsZFNldHRpbmcgZnJvbSBcInNyYy9zZXR0aW5ncy9GaWVsZFNldHRpbmdcIjtcbmltcG9ydCB7IGluc2VydFZhbHVlcyB9IGZyb20gXCJzcmMvY29tbWFuZHMvaW5zZXJ0VmFsdWVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbHVlU3VnZ2VzdE1vZGFsIGV4dGVuZHMgU3VnZ2VzdE1vZGFsPHN0cmluZz57XG4gICAgcHJpdmF0ZSBmaWxlOiBURmlsZTtcbiAgICBwcml2YXRlIHZhbHVlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBmaWVsZDogRmllbGQ7XG4gICAgcHJpdmF0ZSBuZXdWYWx1ZTogc3RyaW5nIHwgbnVsbDtcbiAgICBwcml2YXRlIGxpbmVOdW1iZXI6IG51bWJlcjtcbiAgICBwcml2YXRlIGluRnJvbnRtYXR0ZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBhZnRlcjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgdmFsdWU6IHN0cmluZywgZmllbGQ6IEZpZWxkLCBsaW5lTnVtYmVyOiBudW1iZXIgPSAtMSwgaW5Gcm9udE1hdHRlcjogYm9vbGVhbiA9IGZhbHNlLCBhZnRlcjogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm5ld1ZhbHVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZU51bWJlcjtcbiAgICAgICAgdGhpcy5pbkZyb250bWF0dGVyID0gaW5Gcm9udE1hdHRlcjtcbiAgICAgICAgdGhpcy5hZnRlciA9IGFmdGVyO1xuICAgIH07XG5cbiAgICBhc3luYyBnZXRTdWdnZXN0aW9ucyhxdWVyeTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICBjb25zdCBsaXN0Tm90ZVZhbHVlcyA9IGF3YWl0IEZpZWxkU2V0dGluZy5nZXRWYWx1ZXNMaXN0RnJvbU5vdGUodGhpcy5maWVsZC52YWx1ZXNMaXN0Tm90ZVBhdGgsIHRoaXMuYXBwKVxuICAgICAgICBsZXQgb3B0aW9uczogc3RyaW5nW10gPSBbXVxuICAgICAgICBpZiAobGlzdE5vdGVWYWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LnZhbHVlcyh0aGlzLmZpZWxkLm9wdGlvbnMpLmZpbHRlcihvID0+IG8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBsaXN0Tm90ZVZhbHVlcy5maWx0ZXIobyA9PiBvLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHF1ZXJ5ID8gWy4uLm9wdGlvbnMsIFwiLS1lbXB0eS0tXCJdIDogW1wiLS1lbXB0eS0tXCIsIC4uLm9wdGlvbnNdXG4gICAgfVxuXG4gICAgcmVuZGVyU3VnZ2VzdGlvbih2YWx1ZTogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgZWwuc2V0VGV4dCh2YWx1ZSlcbiAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzLnZhbHVlKSBlbC5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtdmFsdWUtc2VsZWN0ZWRcIilcbiAgICB9XG5cbiAgICBhc3luYyBvbkNob29zZVN1Z2dlc3Rpb24oaXRlbTogc3RyaW5nLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIHRoaXMubmV3VmFsdWUgPSBpdGVtID09PSBcIi0tZW1wdHktLVwiID8gXCJcIiA6IGl0ZW1cbiAgICAgICAgaWYgKHRoaXMubGluZU51bWJlciA9PSAtMSkge1xuICAgICAgICAgICAgYXdhaXQgcmVwbGFjZVZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIHRoaXMubmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgaW5zZXJ0VmFsdWVzKHRoaXMuYXBwLCB0aGlzLmZpbGUsIHRoaXMuZmllbGQubmFtZSwgdGhpcy5uZXdWYWx1ZSwgdGhpcy5saW5lTnVtYmVyLCB0aGlzLmluRnJvbnRtYXR0ZXIsIHRoaXMuYWZ0ZXIpO1xuICAgICAgICB9O1xuICAgIH1cbn0iLCAiaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcIi4uL0ZpZWxkXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIsIFNldHRpbmdMb2NhdGlvbiB9IGZyb20gXCIuLi9GaWVsZE1hbmFnZXJcIjtcbmltcG9ydCB7IFRleHRDb21wb25lbnQsIEJ1dHRvbkNvbXBvbmVudCwgc2V0SWNvbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEZpZWxkU2V0dGluZ3NNb2RhbCBmcm9tIFwic3JjL3NldHRpbmdzL0ZpZWxkU2V0dGluZ3NNb2RhbFwiO1xuaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IEZpZWxkU2V0dGluZyBmcm9tIFwic3JjL3NldHRpbmdzL0ZpZWxkU2V0dGluZ1wiO1xuaW1wb3J0IHsgRmlsZVN1Z2dlc3QgfSBmcm9tIFwic3JjL3N1Z2dlc3Rlci9GaWxlU3VnZ2VzdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0TGlzdEJhc2VkRmllbGQgZXh0ZW5kcyBGaWVsZE1hbmFnZXIge1xuXG4gICAgYWJzdHJhY3QgdmFsdWVzUHJvbXB0Q29tcG9uZW50czogQXJyYXk8VGV4dENvbXBvbmVudD47XG4gICAgYWJzdHJhY3QgcHJlc2V0VmFsdWVzRmllbGRzOiBIVE1MRGl2RWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKGZpZWxkOiBGaWVsZCwgdHlwZTogRmllbGRUeXBlKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkLCB0eXBlKVxuICAgIH1cblxuICAgIC8vU2V0dGluZ3NcbiAgICBwcml2YXRlIHNldFZhbHVlTGlzdFRleHQoaGVhZGVyOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgICAgICBoZWFkZXIuc2V0VGV4dChgUHJlc2V0IG9wdGlvbnM6ICR7T2JqZWN0LnZhbHVlcyh0aGlzLmZpZWxkLm9wdGlvbnMpLmpvaW4oJywgJyl9YCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY3JlYXRlTGlzdE5vdGVDb250YWluZXIocGFyZW50Tm9kZTogSFRNTERpdkVsZW1lbnQsIHBsdWdpbjogTWV0YWRhdGFNZW51KTogdm9pZCB7XG4gICAgICAgIHBhcmVudE5vZGUuY3JlYXRlRGl2KHsgY2xzOiAnbWV0YWRhdGEtbWVudS1zZXBhcmF0b3InIH0pLmNyZWF0ZUVsKFwiaHJcIik7XG4gICAgICAgIGNvbnN0IGxpc3ROb3RlQ29udGFpbmVyTGFiZWwgPSBwYXJlbnROb2RlLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LXNldHRpbmctZmlsZUNsYXNzLXNlYXJjaFwiIH0pO1xuICAgICAgICBsaXN0Tm90ZUNvbnRhaW5lckxhYmVsLnNldFRleHQoYFBhdGggb2YgdGhlIG5vdGUgY29udGFpbmluZyB0aGUgdmFsdWVzOmApO1xuXG4gICAgICAgIGNvbnN0IGlucHV0ID0gbmV3IFRleHRDb21wb25lbnQobGlzdE5vdGVDb250YWluZXJMYWJlbCk7XG5cbiAgICAgICAgbmV3IEZpbGVTdWdnZXN0KFxuICAgICAgICAgICAgcGx1Z2luLmFwcCxcbiAgICAgICAgICAgIGlucHV0LmlucHV0RWwsXG4gICAgICAgICAgICBwbHVnaW4sXG4gICAgICAgICAgICBcIi9cIlxuICAgICAgICApXG4gICAgICAgIGNvbnN0IGxpc3ROb3RlUGF0aCA9IHRoaXMuZmllbGQudmFsdWVzTGlzdE5vdGVQYXRoO1xuICAgICAgICBpbnB1dC5zZXRWYWx1ZShsaXN0Tm90ZVBhdGgpO1xuICAgICAgICBpbnB1dC5zZXRQbGFjZWhvbGRlcihcIlBhdGgvb2YvdGhlL25vdGUubWRcIik7XG4gICAgICAgIGlucHV0Lm9uQ2hhbmdlKHZhbHVlID0+IHRoaXMuZmllbGQudmFsdWVzTGlzdE5vdGVQYXRoID0gdmFsdWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlUHJlc2V0VmFsdWUoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgbGV0IG5ld1ZhbHVlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgICAgICBmb3IgKGxldCBfa2V5IGluIHRoaXMuZmllbGQub3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gX2tleSkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlc1tfa2V5XSA9IHRoaXMuZmllbGQub3B0aW9uc1tfa2V5XTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZmllbGQub3B0aW9ucyA9IG5ld1ZhbHVlcztcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVWYWx1ZUNvbnRhaW5lcihwYXJlbnROb2RlOiBIVE1MRGl2RWxlbWVudCwgaGVhZGVyOiBIVE1MRGl2RWxlbWVudCwga2V5OiBzdHJpbmcpOiBUZXh0Q29tcG9uZW50IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZmllbGQub3B0aW9ucztcbiAgICAgICAgY29uc3QgcHJlc2V0VmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICAgIGNvbnN0IHZhbHVlQ29udGFpbmVyID0gcGFyZW50Tm9kZS5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiAnbWV0YWRhdGEtbWVudS1wcm9tcHQtY29udGFpbmVyJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gbmV3IFRleHRDb21wb25lbnQodmFsdWVDb250YWluZXIpO1xuICAgICAgICB0aGlzLnZhbHVlc1Byb21wdENvbXBvbmVudHMucHVzaChpbnB1dClcbiAgICAgICAgaW5wdXQuc2V0VmFsdWUocHJlc2V0VmFsdWUpO1xuICAgICAgICBpbnB1dC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUxpc3RUZXh0KGhlYWRlcik7XG4gICAgICAgICAgICBGaWVsZFNldHRpbmdzTW9kYWwucmVtb3ZlVmFsaWRhdGlvbkVycm9yKGlucHV0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHZhbHVlUmVtb3ZlQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudCh2YWx1ZUNvbnRhaW5lcik7XG4gICAgICAgIHZhbHVlUmVtb3ZlQnV0dG9uLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdDtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVByZXNldFZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUxpc3RUZXh0KGhlYWRlcik7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh2YWx1ZUNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNQcm9tcHRDb21wb25lbnRzLnJlbW92ZShpbnB1dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKGtleSAhPSBPYmplY3Qua2V5cyh0aGlzLmZpZWxkLm9wdGlvbnMpWzBdKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZVVwZ3JhZGVCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KHZhbHVlQ29udGFpbmVyKTtcbiAgICAgICAgICAgIHNldEljb24odmFsdWVVcGdyYWRlQnV0dG9uLmJ1dHRvbkVsLCBcInVwLWNoZXZyb24tZ2x5cGhcIik7XG4gICAgICAgICAgICB2YWx1ZVVwZ3JhZGVCdXR0b24ub25DbGljaygoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhpc1ZhbHVlID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0SW5kZXggPSB0aGlzLnZhbHVlc1Byb21wdENvbXBvbmVudHMuaW5kZXhPZihpbnB1dClcbiAgICAgICAgICAgICAgICBjb25zdCB1cHBlckNvbXBvbmVudCA9IGlucHV0SW5kZXggIT09IC0xID8gdGhpcy52YWx1ZXNQcm9tcHRDb21wb25lbnRzW2lucHV0SW5kZXggLSAxXSA6IHRoaXMudmFsdWVzUHJvbXB0Q29tcG9uZW50cy5sYXN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHVwcGVyQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwcGVyVmFsdWUgPSB1cHBlckNvbXBvbmVudC5pbnB1dEVsLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cHBlcktleSA9IE9iamVjdC5rZXlzKG9wdGlvbnMpLmZpbHRlcihrID0+IG9wdGlvbnNba10gPT0gdXBwZXJWYWx1ZSlbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cHBlcktleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJDb21wb25lbnQuc2V0VmFsdWUodGhpc1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbdXBwZXJLZXldID0gdGhpc1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0VmFsdWUodXBwZXJWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW2tleV0gPSB1cHBlclZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH07XG5cbiAgICBhc3luYyB2YWxpZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQub3B0aW9ucyAmJiBPYmplY3QudmFsdWVzKHRoaXMuZmllbGQub3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5maWVsZC5vcHRpb25zKS5pbmNsdWRlcyh2YWx1ZS50cmltKCkpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZC52YWx1ZXNMaXN0Tm90ZVBhdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3ROb3RlVmFsdWVzID0gYXdhaXQgRmllbGRTZXR0aW5nLmdldFZhbHVlc0xpc3RGcm9tTm90ZSh0aGlzLmZpZWxkLnZhbHVlc0xpc3ROb3RlUGF0aCwgYXBwKVxuICAgICAgICAgICAgcmV0dXJuIGxpc3ROb3RlVmFsdWVzLmNvbnRhaW5zKHZhbHVlLnRyaW0oKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBnZXRPcHRpb25zU3RyKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmZpZWxkLnZhbHVlc0xpc3ROb3RlUGF0aCkgcmV0dXJuIHRoaXMuZmllbGQudmFsdWVzTGlzdE5vdGVQYXRoXG4gICAgICAgIGVsc2UgaWYgKE9iamVjdC52YWx1ZXModGhpcy5maWVsZC5vcHRpb25zKS5sZW5ndGgpIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZmllbGQub3B0aW9ucykuam9pbihcIiwgXCIpXG4gICAgICAgIGVsc2UgcmV0dXJuIFwiXCJcbiAgICB9XG5cbiAgICB2YWxpZGF0ZU9wdGlvbnMoKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBlcnJvciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhbHVlc1Byb21wdENvbXBvbmVudHMuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgICAgICBpZiAoL1ssXS9ndS50ZXN0KGlucHV0LmlucHV0RWwudmFsdWUpICYmIGlucHV0LmlucHV0RWwucGFyZW50RWxlbWVudD8ubGFzdEVsZW1lbnRDaGlsZCkge1xuICAgICAgICAgICAgICAgIEZpZWxkU2V0dGluZ3NNb2RhbC5zZXRWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LCBpbnB1dC5pbnB1dEVsLnBhcmVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgXCJWYWx1ZXMgY2Fubm90IGNvbnRhaW4gYSBjb21tYVwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGlucHV0LmlucHV0RWwudmFsdWUgPT0gXCJcIiAmJiBpbnB1dC5pbnB1dEVsLnBhcmVudEVsZW1lbnQ/Lmxhc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBGaWVsZFNldHRpbmdzTW9kYWwuc2V0VmFsaWRhdGlvbkVycm9yKFxuICAgICAgICAgICAgICAgICAgICBpbnB1dCwgaW5wdXQuaW5wdXRFbC5wYXJlbnRFbGVtZW50Lmxhc3RFbGVtZW50Q2hpbGQsXG4gICAgICAgICAgICAgICAgICAgIFwiVmFsdWVzIGNhbid0IGJlIG51bGwuXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gIWVycm9yXG4gICAgfVxuXG4gICAgY3JlYXRlQWRkQnV0dG9uKHZhbHVlc0xpc3Q6IEhUTUxEaXZFbGVtZW50LCB2YWx1ZXNMaXN0Qm9keTogSFRNTERpdkVsZW1lbnQsIHZhbHVlc0xpc3RIZWFkZXI6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHZhbHVlc0xpc3RGb290ZXIgPSB2YWx1ZXNMaXN0LmNyZWF0ZURpdigpO1xuICAgICAgICBjb25zdCBhZGRWYWx1ZSA9IHZhbHVlc0xpc3RGb290ZXIuY3JlYXRlRWwoJ2J1dHRvbicpO1xuICAgICAgICBhZGRWYWx1ZS50eXBlID0gJ2J1dHRvbic7XG4gICAgICAgIGFkZFZhbHVlLnRleHRDb250ZW50ID0gJ0FkZCc7XG4gICAgICAgIGFkZFZhbHVlLm9uQ2xpY2tFdmVudChhc3luYyAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQ7XG4gICAgICAgICAgICBjb25zdCBuZXdLZXkgPSBhd2FpdCB0aGlzLmZpZWxkLmluc2VydE5ld1ZhbHVlKFwiXCIpXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVZhbHVlQ29udGFpbmVyKHZhbHVlc0xpc3RCb2R5LCB2YWx1ZXNMaXN0SGVhZGVyLCBuZXdLZXkpXG4gICAgICAgIH0pO1xuICAgICAgICB2YWx1ZXNMaXN0LmNyZWF0ZURpdih7IGNsczogJ21ldGFkYXRhLW1lbnUtc2VwYXJhdG9yJyB9KS5jcmVhdGVFbChcImhyXCIpO1xuICAgIH1cblxuICAgIGNyZWF0ZVNldHRpbmdDb250YWluZXIocGFyZW50Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUsIGxvY2F0aW9uPzogU2V0dGluZ0xvY2F0aW9uKTogdm9pZCB7XG4gICAgICAgIGlmIChsb2NhdGlvbiA9PT0gU2V0dGluZ0xvY2F0aW9uLlBsdWdpblNldHRpbmdzKSB0aGlzLmNyZWF0ZUxpc3ROb3RlQ29udGFpbmVyKHBhcmVudENvbnRhaW5lciwgcGx1Z2luKTtcbiAgICAgICAgdGhpcy5wcmVzZXRWYWx1ZXNGaWVsZHMgPSBwYXJlbnRDb250YWluZXIuY3JlYXRlRGl2KClcbiAgICAgICAgdGhpcy5wcmVzZXRWYWx1ZXNGaWVsZHMuY3JlYXRlRGl2KHsgY2xzOiAnbWV0YWRhdGEtbWVudS1zZXBhcmF0b3InIH0pLmNyZWF0ZUVsKFwiaHJcIik7XG4gICAgICAgIGNvbnN0IHZhbHVlc0xpc3QgPSB0aGlzLnByZXNldFZhbHVlc0ZpZWxkcy5jcmVhdGVEaXYoKTtcbiAgICAgICAgY29uc3QgdmFsdWVzTGlzdEhlYWRlciA9IHZhbHVlc0xpc3QuY3JlYXRlRGl2KCk7XG4gICAgICAgIHZhbHVlc0xpc3RIZWFkZXIuY3JlYXRlRWwoXCJoMlwiKTtcbiAgICAgICAgdmFsdWVzTGlzdEhlYWRlci5zZXRUZXh0KGBQcmVzZXQgb3B0aW9uczogJHtPYmplY3QudmFsdWVzKHRoaXMuZmllbGQub3B0aW9ucykuam9pbignLCAnKX1gKTtcbiAgICAgICAgY29uc3QgdmFsdWVzTGlzdEJvZHkgPSB2YWx1ZXNMaXN0LmNyZWF0ZURpdigpO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmZpZWxkLm9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzUHJvbXB0Q29tcG9uZW50cy5wdXNoKHRoaXMuY3JlYXRlVmFsdWVDb250YWluZXIodmFsdWVzTGlzdEJvZHksIHZhbHVlc0xpc3RIZWFkZXIsIGtleSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jcmVhdGVBZGRCdXR0b24odmFsdWVzTGlzdCwgdmFsdWVzTGlzdEJvZHksIHZhbHVlc0xpc3RIZWFkZXIpXG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlRHZGaWVsZChcbiAgICAgICAgcGx1Z2luOiBNZXRhZGF0YU1lbnUsXG4gICAgICAgIGR2OiBhbnksXG4gICAgICAgIHA6IGFueSxcbiAgICAgICAgZmllbGRDb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgICAgICBhdHRycz86IHsgY2xzPzogc3RyaW5nLCBhdHRyPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiwgb3B0aW9ucz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfVxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBmaWVsZFZhbHVlID0gZHYuZWwoXCJzcGFuXCIsIHBbdGhpcy5maWVsZC5uYW1lXSk7XG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGZpZWxkVmFsdWUpO1xuICAgIH1cbn0iLCAiLy8gQ3JlZGl0cyBnbyB0byBMaWFtJ3MgUGVyaW9kaWMgTm90ZXMgUGx1Z2luOiBodHRwczovL2dpdGh1Yi5jb20vbGlhbWNhaW4vb2JzaWRpYW4tcGVyaW9kaWMtbm90ZXNcblxuaW1wb3J0IHsgQXBwLCBUQWJzdHJhY3RGaWxlLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgVGV4dElucHV0U3VnZ2VzdCB9IGZyb20gXCIuL3N1Z2dlc3RcIjtcbmltcG9ydCB7IGdldF90ZmlsZXNfZnJvbV9mb2xkZXIgfSBmcm9tIFwiLi4vdXRpbHMvZmlsZVV0aWxzXCI7XG5pbXBvcnQgVGVtcGxhdGVyUGx1Z2luIGZyb20gXCJtYWluXCI7XG5cbmV4cG9ydCBjbGFzcyBGaWxlU3VnZ2VzdCBleHRlbmRzIFRleHRJbnB1dFN1Z2dlc3Q8VEZpbGU+IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGFwcDogQXBwLFxuICAgICAgICBwdWJsaWMgaW5wdXRFbDogSFRNTElucHV0RWxlbWVudCxcbiAgICAgICAgcHJpdmF0ZSBwbHVnaW46IFRlbXBsYXRlclBsdWdpbixcbiAgICAgICAgcHVibGljIGZvbGRlcjogc3RyaW5nXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgaW5wdXRFbCk7XG4gICAgfVxuXG4gICAgZ2V0U3VnZ2VzdGlvbnMoaW5wdXRfc3RyOiBzdHJpbmcpOiBURmlsZVtdIHtcbiAgICAgICAgY29uc3QgYWxsX2ZpbGVzID0gW11cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGFsbF9maWxlcy5wdXNoKC4uLmdldF90ZmlsZXNfZnJvbV9mb2xkZXIodGhpcy5hcHAsIHRoaXMuZm9sZGVyKSlcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcblxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpbGVzOiBURmlsZVtdID0gW107XG4gICAgICAgIGNvbnN0IGxvd2VyX2lucHV0X3N0ciA9IGlucHV0X3N0ci50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGFsbF9maWxlcy5mb3JFYWNoKChmaWxlOiBUQWJzdHJhY3RGaWxlKSA9PiB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmXG4gICAgICAgICAgICAgICAgZmlsZS5leHRlbnNpb24gPT09IFwibWRcIiAmJlxuICAgICAgICAgICAgICAgIGZpbGUucGF0aC50b0xvd2VyQ2FzZSgpLmNvbnRhaW5zKGxvd2VyX2lucHV0X3N0cilcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmaWxlcztcbiAgICB9XG5cbiAgICByZW5kZXJTdWdnZXN0aW9uKGZpbGU6IFRGaWxlLCBlbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgZWwuc2V0VGV4dChmaWxlLnBhdGgpO1xuICAgIH1cblxuICAgIHNlbGVjdFN1Z2dlc3Rpb24oZmlsZTogVEZpbGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbnB1dEVsLnZhbHVlID0gZmlsZS5wYXRoO1xuICAgICAgICB0aGlzLmlucHV0RWwudHJpZ2dlcihcImlucHV0XCIpO1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxufVxuIiwgIi8vIENyZWRpdHMgZ28gdG8gTGlhbSdzIFBlcmlvZGljIE5vdGVzIFBsdWdpbjogaHR0cHM6Ly9naXRodWIuY29tL2xpYW1jYWluL29ic2lkaWFuLXBlcmlvZGljLW5vdGVzXG5cbmltcG9ydCB7IEFwcCwgSVN1Z2dlc3RPd25lciwgU2NvcGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IGNyZWF0ZVBvcHBlciwgSW5zdGFuY2UgYXMgUG9wcGVySW5zdGFuY2UgfSBmcm9tIFwiQHBvcHBlcmpzL2NvcmVcIjtcblxuY29uc3Qgd3JhcEFyb3VuZCA9ICh2YWx1ZTogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgIHJldHVybiAoKHZhbHVlICUgc2l6ZSkgKyBzaXplKSAlIHNpemU7XG59O1xuXG5jbGFzcyBTdWdnZXN0PFQ+IHtcbiAgICBwcml2YXRlIG93bmVyOiBJU3VnZ2VzdE93bmVyPFQ+O1xuICAgIHByaXZhdGUgdmFsdWVzOiBUW107XG4gICAgcHJpdmF0ZSBzdWdnZXN0aW9uczogSFRNTERpdkVsZW1lbnRbXTtcbiAgICBwcml2YXRlIHNlbGVjdGVkSXRlbTogbnVtYmVyO1xuICAgIHByaXZhdGUgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG93bmVyOiBJU3VnZ2VzdE93bmVyPFQ+LFxuICAgICAgICBjb250YWluZXJFbDogSFRNTEVsZW1lbnQsXG4gICAgICAgIHNjb3BlOiBTY29wZVxuICAgICkge1xuICAgICAgICB0aGlzLm93bmVyID0gb3duZXI7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcblxuICAgICAgICBjb250YWluZXJFbC5vbihcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIFwiLnN1Z2dlc3Rpb24taXRlbVwiLFxuICAgICAgICAgICAgdGhpcy5vblN1Z2dlc3Rpb25DbGljay5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRhaW5lckVsLm9uKFxuICAgICAgICAgICAgXCJtb3VzZW1vdmVcIixcbiAgICAgICAgICAgIFwiLnN1Z2dlc3Rpb24taXRlbVwiLFxuICAgICAgICAgICAgdGhpcy5vblN1Z2dlc3Rpb25Nb3VzZW92ZXIuYmluZCh0aGlzKVxuICAgICAgICApO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIkFycm93VXBcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50LmlzQ29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0odGhpcy5zZWxlY3RlZEl0ZW0gLSAxLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIkFycm93RG93blwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghZXZlbnQuaXNDb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkSXRlbSh0aGlzLnNlbGVjdGVkSXRlbSArIDEsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUucmVnaXN0ZXIoW10sIFwiRW50ZXJcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50LmlzQ29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51c2VTZWxlY3RlZEl0ZW0oZXZlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25TdWdnZXN0aW9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIGVsOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnN1Z2dlc3Rpb25zLmluZGV4T2YoZWwpO1xuICAgICAgICB0aGlzLnNldFNlbGVjdGVkSXRlbShpdGVtLCBmYWxzZSk7XG4gICAgICAgIHRoaXMudXNlU2VsZWN0ZWRJdGVtKGV2ZW50KTtcbiAgICB9XG5cbiAgICBvblN1Z2dlc3Rpb25Nb3VzZW92ZXIoX2V2ZW50OiBNb3VzZUV2ZW50LCBlbDogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuc3VnZ2VzdGlvbnMuaW5kZXhPZihlbCk7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJdGVtKGl0ZW0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBzZXRTdWdnZXN0aW9ucyh2YWx1ZXM6IFRbXSkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25FbHM6IEhUTUxEaXZFbGVtZW50W10gPSBbXTtcblxuICAgICAgICB2YWx1ZXMuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25FbCA9IHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRGl2KFwic3VnZ2VzdGlvbi1pdGVtXCIpO1xuICAgICAgICAgICAgdGhpcy5vd25lci5yZW5kZXJTdWdnZXN0aW9uKHZhbHVlLCBzdWdnZXN0aW9uRWwpO1xuICAgICAgICAgICAgc3VnZ2VzdGlvbkVscy5wdXNoKHN1Z2dlc3Rpb25FbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB0aGlzLnN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbkVscztcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0oMCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHVzZVNlbGVjdGVkSXRlbShldmVudDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy52YWx1ZXNbdGhpcy5zZWxlY3RlZEl0ZW1dO1xuICAgICAgICBpZiAoY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm93bmVyLnNlbGVjdFN1Z2dlc3Rpb24oY3VycmVudFZhbHVlLCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRTZWxlY3RlZEl0ZW0oc2VsZWN0ZWRJbmRleDogbnVtYmVyLCBzY3JvbGxJbnRvVmlldzogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkSW5kZXggPSB3cmFwQXJvdW5kKFxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCxcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHByZXZTZWxlY3RlZFN1Z2dlc3Rpb24gPSB0aGlzLnN1Z2dlc3Rpb25zW3RoaXMuc2VsZWN0ZWRJdGVtXTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRTdWdnZXN0aW9uID0gdGhpcy5zdWdnZXN0aW9uc1tub3JtYWxpemVkSW5kZXhdO1xuXG4gICAgICAgIHByZXZTZWxlY3RlZFN1Z2dlc3Rpb24/LnJlbW92ZUNsYXNzKFwiaXMtc2VsZWN0ZWRcIik7XG4gICAgICAgIHNlbGVjdGVkU3VnZ2VzdGlvbj8uYWRkQ2xhc3MoXCJpcy1zZWxlY3RlZFwiKTtcblxuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG5vcm1hbGl6ZWRJbmRleDtcblxuICAgICAgICBpZiAoc2Nyb2xsSW50b1ZpZXcpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkU3VnZ2VzdGlvbi5zY3JvbGxJbnRvVmlldyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUZXh0SW5wdXRTdWdnZXN0PFQ+IGltcGxlbWVudHMgSVN1Z2dlc3RPd25lcjxUPiB7XG4gICAgcHJvdGVjdGVkIGFwcDogQXBwO1xuICAgIHByb3RlY3RlZCBpbnB1dEVsOiBIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudDtcblxuICAgIHByaXZhdGUgcG9wcGVyOiBQb3BwZXJJbnN0YW5jZTtcbiAgICBwcml2YXRlIHNjb3BlOiBTY29wZTtcbiAgICBwcml2YXRlIHN1Z2dlc3RFbDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBzdWdnZXN0OiBTdWdnZXN0PFQ+O1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGlucHV0RWw6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLmlucHV0RWwgPSBpbnB1dEVsO1xuICAgICAgICB0aGlzLnNjb3BlID0gbmV3IFNjb3BlKCk7XG5cbiAgICAgICAgdGhpcy5zdWdnZXN0RWwgPSBjcmVhdGVEaXYoXCJzdWdnZXN0aW9uLWNvbnRhaW5lclwiKTtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbiA9IHRoaXMuc3VnZ2VzdEVsLmNyZWF0ZURpdihcInN1Z2dlc3Rpb25cIik7XG4gICAgICAgIHRoaXMuc3VnZ2VzdCA9IG5ldyBTdWdnZXN0KHRoaXMsIHN1Z2dlc3Rpb24sIHRoaXMuc2NvcGUpO1xuXG4gICAgICAgIHRoaXMuc2NvcGUucmVnaXN0ZXIoW10sIFwiRXNjYXBlXCIsIHRoaXMuY2xvc2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCB0aGlzLm9uSW5wdXRDaGFuZ2VkLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMub25JbnB1dENoYW5nZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnN1Z2dlc3RFbC5vbihcbiAgICAgICAgICAgIFwibW91c2Vkb3duXCIsXG4gICAgICAgICAgICBcIi5zdWdnZXN0aW9uLWNvbnRhaW5lclwiLFxuICAgICAgICAgICAgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBvbklucHV0Q2hhbmdlZCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaW5wdXRTdHIgPSB0aGlzLmlucHV0RWwudmFsdWU7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gdGhpcy5nZXRTdWdnZXN0aW9ucyhpbnB1dFN0cik7XG5cbiAgICAgICAgaWYgKCFzdWdnZXN0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN1Z2dlc3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdC5zZXRTdWdnZXN0aW9ucyhzdWdnZXN0aW9ucyk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgdGhpcy5vcGVuKCg8YW55PnRoaXMuYXBwKS5kb20uYXBwQ29udGFpbmVyRWwsIHRoaXMuaW5wdXRFbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGlucHV0RWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICg8YW55PnRoaXMuYXBwKS5rZXltYXAucHVzaFNjb3BlKHRoaXMuc2NvcGUpO1xuXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnN1Z2dlc3RFbCk7XG4gICAgICAgIHRoaXMucG9wcGVyID0gY3JlYXRlUG9wcGVyKGlucHV0RWwsIHRoaXMuc3VnZ2VzdEVsLCB7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IFwiYm90dG9tLXN0YXJ0XCIsXG4gICAgICAgICAgICBtb2RpZmllcnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FtZVdpZHRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZuOiAoeyBzdGF0ZSwgaW5zdGFuY2UgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogcG9zaXRpb25pbmcgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCB0d2ljZSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXJzdCBwYXNzIC0gcG9zaXRpb25pbmcgaXQgYWNjb3JkaW5nIHRvIHRoZSB3aWR0aCBvZiB0aGUgcG9wcGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWNvbmQgcGFzcyAtIHBvc2l0aW9uIGl0IHdpdGggdGhlIHdpZHRoIGJvdW5kIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBlYXJseSBleGl0IHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFdpZHRoID0gYCR7c3RhdGUucmVjdHMucmVmZXJlbmNlLndpZHRofXB4YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zdHlsZXMucG9wcGVyLndpZHRoID09PSB0YXJnZXRXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnN0eWxlcy5wb3BwZXIud2lkdGggPSB0YXJnZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwaGFzZTogXCJiZWZvcmVXcml0ZVwiLFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlczogW1wiY29tcHV0ZVN0eWxlc1wiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICg8YW55PnRoaXMuYXBwKS5rZXltYXAucG9wU2NvcGUodGhpcy5zY29wZSk7XG5cbiAgICAgICAgdGhpcy5zdWdnZXN0LnNldFN1Z2dlc3Rpb25zKFtdKTtcbiAgICAgICAgaWYgKHRoaXMucG9wcGVyKSB0aGlzLnBvcHBlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuc3VnZ2VzdEVsLmRldGFjaCgpO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGdldFN1Z2dlc3Rpb25zKGlucHV0U3RyOiBzdHJpbmcpOiBUW107XG4gICAgYWJzdHJhY3QgcmVuZGVyU3VnZ2VzdGlvbihpdGVtOiBULCBlbDogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgIGFic3RyYWN0IHNlbGVjdFN1Z2dlc3Rpb24oaXRlbTogVCk6IHZvaWQ7XG59XG4iLCAiZXhwb3J0IHZhciB0b3AgPSAndG9wJztcbmV4cG9ydCB2YXIgYm90dG9tID0gJ2JvdHRvbSc7XG5leHBvcnQgdmFyIHJpZ2h0ID0gJ3JpZ2h0JztcbmV4cG9ydCB2YXIgbGVmdCA9ICdsZWZ0JztcbmV4cG9ydCB2YXIgYXV0byA9ICdhdXRvJztcbmV4cG9ydCB2YXIgYmFzZVBsYWNlbWVudHMgPSBbdG9wLCBib3R0b20sIHJpZ2h0LCBsZWZ0XTtcbmV4cG9ydCB2YXIgc3RhcnQgPSAnc3RhcnQnO1xuZXhwb3J0IHZhciBlbmQgPSAnZW5kJztcbmV4cG9ydCB2YXIgY2xpcHBpbmdQYXJlbnRzID0gJ2NsaXBwaW5nUGFyZW50cyc7XG5leHBvcnQgdmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbmV4cG9ydCB2YXIgcG9wcGVyID0gJ3BvcHBlcic7XG5leHBvcnQgdmFyIHJlZmVyZW5jZSA9ICdyZWZlcmVuY2UnO1xuZXhwb3J0IHZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG5leHBvcnQgdmFyIHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovW10uY29uY2F0KGJhc2VQbGFjZW1lbnRzLCBbYXV0b10pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCwgcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTsgLy8gbW9kaWZpZXJzIHRoYXQgbmVlZCB0byByZWFkIHRoZSBET01cblxuZXhwb3J0IHZhciBiZWZvcmVSZWFkID0gJ2JlZm9yZVJlYWQnO1xuZXhwb3J0IHZhciByZWFkID0gJ3JlYWQnO1xuZXhwb3J0IHZhciBhZnRlclJlYWQgPSAnYWZ0ZXJSZWFkJzsgLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcblxuZXhwb3J0IHZhciBiZWZvcmVNYWluID0gJ2JlZm9yZU1haW4nO1xuZXhwb3J0IHZhciBtYWluID0gJ21haW4nO1xuZXhwb3J0IHZhciBhZnRlck1haW4gPSAnYWZ0ZXJNYWluJzsgLy8gbW9kaWZpZXIgd2l0aCB0aGUgcHVycG9zZSB0byB3cml0ZSB0byB0aGUgRE9NIChvciB3cml0ZSBpbnRvIGEgZnJhbWV3b3JrIHN0YXRlKVxuXG5leHBvcnQgdmFyIGJlZm9yZVdyaXRlID0gJ2JlZm9yZVdyaXRlJztcbmV4cG9ydCB2YXIgd3JpdGUgPSAnd3JpdGUnO1xuZXhwb3J0IHZhciBhZnRlcldyaXRlID0gJ2FmdGVyV3JpdGUnO1xuZXhwb3J0IHZhciBtb2RpZmllclBoYXNlcyA9IFtiZWZvcmVSZWFkLCByZWFkLCBhZnRlclJlYWQsIGJlZm9yZU1haW4sIG1haW4sIGFmdGVyTWFpbiwgYmVmb3JlV3JpdGUsIHdyaXRlLCBhZnRlcldyaXRlXTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZU5hbWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICBpZiAobm9kZS50b1N0cmluZygpICE9PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cgOiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlKSB7XG4gIC8vIElFIDExIGhhcyBubyBTaGFkb3dSb290XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH07IiwgImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7IC8vIFRoaXMgbW9kaWZpZXIgdGFrZXMgdGhlIHN0eWxlcyBwcmVwYXJlZCBieSB0aGUgYGNvbXB1dGVTdHlsZXNgIG1vZGlmaWVyXG4vLyBhbmQgYXBwbGllcyB0aGVtIHRvIHRoZSBIVE1MRWxlbWVudHMgc3VjaCBhcyBwb3BwZXIgYW5kIGFycm93XG5cbmZ1bmN0aW9uIGFwcGx5U3R5bGVzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS5zdHlsZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlID09PSB0cnVlID8gJycgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG4gIHZhciBpbml0aWFsU3R5bGVzID0ge1xuICAgIHBvcHBlcjoge1xuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICB0b3A6ICcwJyxcbiAgICAgIG1hcmdpbjogJzAnXG4gICAgfSxcbiAgICBhcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge31cbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcbiAgc3RhdGUuc3R5bGVzID0gaW5pdGlhbFN0eWxlcztcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgICB2YXIgc3R5bGVQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gc3RhdGUuc3R5bGVzW25hbWVdIDogaW5pdGlhbFN0eWxlc1tuYW1lXSk7IC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG5cbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlLCBwcm9wZXJ0eSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBhcHBseVN0eWxlcyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXVxufTsiLCAiaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufSIsICJleHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgcm91bmQgPSBNYXRoLnJvdW5kOyIsICJpbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IDE7XG4gIHZhciBzY2FsZVkgPSAxO1xuXG4gIGlmIChpc0hUTUxFbGVtZW50KGVsZW1lbnQpICYmIGluY2x1ZGVTY2FsZSkge1xuICAgIHZhciBvZmZzZXRIZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB2YXIgb2Zmc2V0V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoOyAvLyBEbyBub3QgYXR0ZW1wdCB0byBkaXZpZGUgYnkgMCwgb3RoZXJ3aXNlIHdlIGdldCBgSW5maW5pdHlgIGFzIHNjYWxlXG4gICAgLy8gRmFsbGJhY2sgdG8gMSBpbiBjYXNlIGJvdGggdmFsdWVzIGFyZSBgMGBcblxuICAgIGlmIChvZmZzZXRXaWR0aCA+IDApIHtcbiAgICAgIHNjYWxlWCA9IHJvdW5kKHJlY3Qud2lkdGgpIC8gb2Zmc2V0V2lkdGggfHwgMTtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0SGVpZ2h0ID4gMCkge1xuICAgICAgc2NhbGVZID0gcm91bmQocmVjdC5oZWlnaHQpIC8gb2Zmc2V0SGVpZ2h0IHx8IDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCAvIHNjYWxlWCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0IC8gc2NhbGVZLFxuICAgIHRvcDogcmVjdC50b3AgLyBzY2FsZVksXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQgLyBzY2FsZVgsXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSAvIHNjYWxlWSxcbiAgICBsZWZ0OiByZWN0LmxlZnQgLyBzY2FsZVgsXG4gICAgeDogcmVjdC5sZWZ0IC8gc2NhbGVYLFxuICAgIHk6IHJlY3QudG9wIC8gc2NhbGVZXG4gIH07XG59IiwgImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7IC8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICB2YXIgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTsgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuXG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn0iLCAiaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocGFyZW50LCBjaGlsZCkge1xuICB2YXIgcm9vdE5vZGUgPSBjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChyb290Tm9kZSAmJiBpc1NoYWRvd1Jvb3Qocm9vdE5vZGUpKSB7XG4gICAgICB2YXIgbmV4dCA9IGNoaWxkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59IiwgImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59IiwgImltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuICgoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5vd25lckRvY3VtZW50IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xufSIsICJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiAoLy8gdGhpcyBpcyBhIHF1aWNrZXIgKGJ1dCBsZXNzIHR5cGUgc2FmZSkgd2F5IHRvIHNhdmUgcXVpdGUgc29tZSBieXRlcyBmcm9tIHRoZSBidW5kbGVcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgZWxlbWVudC5hc3NpZ25lZFNsb3QgfHwgLy8gc3RlcCBpbnRvIHRoZSBzaGFkb3cgRE9NIG9mIHRoZSBwYXJlbnQgb2YgYSBzbG90dGVkIG5vZGVcbiAgICBlbGVtZW50LnBhcmVudE5vZGUgfHwgKCAvLyBET00gRWxlbWVudCBkZXRlY3RlZFxuICAgIGlzU2hhZG93Um9vdChlbGVtZW50KSA/IGVsZW1lbnQuaG9zdCA6IG51bGwpIHx8IC8vIFNoYWRvd1Jvb3QgZGV0ZWN0ZWRcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogSFRNTEVsZW1lbnQgaXMgYSBOb2RlXG4gICAgZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIC8vIGZhbGxiYWNrXG5cbiAgKTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGlzRmlyZWZveCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xO1xuICB2YXIgaXNJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpICE9PSAtMTtcblxuICBpZiAoaXNJRSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgLy8gSW4gSUUgOSwgMTAgYW5kIDExIGZpeGVkIGVsZW1lbnRzIGNvbnRhaW5pbmcgYmxvY2sgaXMgYWx3YXlzIGVzdGFibGlzaGVkIGJ5IHRoZSB2aWV3cG9ydFxuICAgIHZhciBlbGVtZW50Q3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChlbGVtZW50Q3NzLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuXG4gIGlmIChpc1NoYWRvd1Jvb3QoY3VycmVudE5vZGUpKSB7XG4gICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5ob3N0O1xuICB9XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMCkge1xuICAgIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTsgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9ja1xuXG4gICAgaWYgKGNzcy50cmFuc2Zvcm0gIT09ICdub25lJyB8fCBjc3MucGVyc3BlY3RpdmUgIT09ICdub25lJyB8fCBjc3MuY29udGFpbiA9PT0gJ3BhaW50JyB8fCBbJ3RyYW5zZm9ybScsICdwZXJzcGVjdGl2ZSddLmluZGV4T2YoY3NzLndpbGxDaGFuZ2UpICE9PSAtMSB8fCBpc0ZpcmVmb3ggJiYgY3NzLndpbGxDaGFuZ2UgPT09ICdmaWx0ZXInIHx8IGlzRmlyZWZveCAmJiBjc3MuZmlsdGVyICYmIGNzcy5maWx0ZXIgIT09ICdub25lJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnaHRtbCcgfHwgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpID49IDAgPyAneCcgOiAneSc7XG59IiwgImltcG9ydCB7IG1heCBhcyBtYXRoTWF4LCBtaW4gYXMgbWF0aE1pbiB9IGZyb20gXCIuL21hdGguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KSB7XG4gIHJldHVybiBtYXRoTWF4KG1pbiwgbWF0aE1pbih2YWx1ZSwgbWF4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gd2l0aGluTWF4Q2xhbXAobWluLCB2YWx1ZSwgbWF4KSB7XG4gIHZhciB2ID0gd2l0aGluKG1pbiwgdmFsdWUsIG1heCk7XG4gIHJldHVybiB2ID4gbWF4ID8gbWF4IDogdjtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsICJpbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGdldEZyZXNoU2lkZU9iamVjdCgpLCBwYWRkaW5nT2JqZWN0KTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn0iLCAiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgd2l0aGluIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuLi91dGlscy9leHBhbmRUb0hhc2hNYXAuanNcIjtcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdG9QYWRkaW5nT2JqZWN0ID0gZnVuY3Rpb24gdG9QYWRkaW5nT2JqZWN0KHBhZGRpbmcsIHN0YXRlKSB7XG4gIHBhZGRpbmcgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IHBhZGRpbmcoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiBwYWRkaW5nO1xuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50O1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIGVsZW1lbnQgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCAobm90IGFuIFNWR0VsZW1lbnQpLicsICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJywgJ3RoZSBhcnJvdy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIG1vZGlmaWVyXFwncyBgZWxlbWVudGAgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBwb3BwZXInLCAnZWxlbWVudC4nXS5qb2luKCcgJykpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J11cbn07IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xufSIsICJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHNCeURQUihfcmVmKSB7XG4gIHZhciB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueTtcbiAgdmFyIHdpbiA9IHdpbmRvdztcbiAgdmFyIGRwciA9IHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIHJldHVybiB7XG4gICAgeDogcm91bmQoeCAqIGRwcikgLyBkcHIgfHwgMCxcbiAgICB5OiByb3VuZCh5ICogZHByKSAvIGRwciB8fCAwXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb1N0eWxlcyhfcmVmMikge1xuICB2YXIgX09iamVjdCRhc3NpZ24yO1xuXG4gIHZhciBwb3BwZXIgPSBfcmVmMi5wb3BwZXIsXG4gICAgICBwb3BwZXJSZWN0ID0gX3JlZjIucG9wcGVyUmVjdCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYyLnBsYWNlbWVudCxcbiAgICAgIHZhcmlhdGlvbiA9IF9yZWYyLnZhcmlhdGlvbixcbiAgICAgIG9mZnNldHMgPSBfcmVmMi5vZmZzZXRzLFxuICAgICAgcG9zaXRpb24gPSBfcmVmMi5wb3NpdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9yZWYyLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGFkYXB0aXZlID0gX3JlZjIuYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHMgPSBfcmVmMi5yb3VuZE9mZnNldHMsXG4gICAgICBpc0ZpeGVkID0gX3JlZjIuaXNGaXhlZDtcbiAgdmFyIF9vZmZzZXRzJHggPSBvZmZzZXRzLngsXG4gICAgICB4ID0gX29mZnNldHMkeCA9PT0gdm9pZCAwID8gMCA6IF9vZmZzZXRzJHgsXG4gICAgICBfb2Zmc2V0cyR5ID0gb2Zmc2V0cy55LFxuICAgICAgeSA9IF9vZmZzZXRzJHkgPT09IHZvaWQgMCA/IDAgOiBfb2Zmc2V0cyR5O1xuXG4gIHZhciBfcmVmMyA9IHR5cGVvZiByb3VuZE9mZnNldHMgPT09ICdmdW5jdGlvbicgPyByb3VuZE9mZnNldHMoe1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9KSA6IHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcblxuICB4ID0gX3JlZjMueDtcbiAgeSA9IF9yZWYzLnk7XG4gIHZhciBoYXNYID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneCcpO1xuICB2YXIgaGFzWSA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3knKTtcbiAgdmFyIHNpZGVYID0gbGVmdDtcbiAgdmFyIHNpZGVZID0gdG9wO1xuICB2YXIgd2luID0gd2luZG93O1xuXG4gIGlmIChhZGFwdGl2ZSkge1xuICAgIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKTtcbiAgICB2YXIgaGVpZ2h0UHJvcCA9ICdjbGllbnRIZWlnaHQnO1xuICAgIHZhciB3aWR0aFByb3AgPSAnY2xpZW50V2lkdGgnO1xuXG4gICAgaWYgKG9mZnNldFBhcmVudCA9PT0gZ2V0V2luZG93KHBvcHBlcikpIHtcbiAgICAgIG9mZnNldFBhcmVudCA9IGdldERvY3VtZW50RWxlbWVudChwb3BwZXIpO1xuXG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uICE9PSAnc3RhdGljJyAmJiBwb3NpdGlvbiA9PT0gJ2Fic29sdXRlJykge1xuICAgICAgICBoZWlnaHRQcm9wID0gJ3Njcm9sbEhlaWdodCc7XG4gICAgICAgIHdpZHRoUHJvcCA9ICdzY3JvbGxXaWR0aCc7XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XTogZm9yY2UgdHlwZSByZWZpbmVtZW50LCB3ZSBjb21wYXJlIG9mZnNldFBhcmVudCB3aXRoIHdpbmRvdyBhYm92ZSwgYnV0IEZsb3cgZG9lc24ndCBkZXRlY3QgaXRcblxuXG4gICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50O1xuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gdG9wIHx8IChwbGFjZW1lbnQgPT09IGxlZnQgfHwgcGxhY2VtZW50ID09PSByaWdodCkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVZID0gYm90dG9tO1xuICAgICAgdmFyIG9mZnNldFkgPSBpc0ZpeGVkICYmIG9mZnNldFBhcmVudCA9PT0gd2luICYmIHdpbi52aXN1YWxWaWV3cG9ydCA/IHdpbi52aXN1YWxWaWV3cG9ydC5oZWlnaHQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIG9mZnNldFBhcmVudFtoZWlnaHRQcm9wXTtcbiAgICAgIHkgLT0gb2Zmc2V0WSAtIHBvcHBlclJlY3QuaGVpZ2h0O1xuICAgICAgeSAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCAocGxhY2VtZW50ID09PSB0b3AgfHwgcGxhY2VtZW50ID09PSBib3R0b20pICYmIHZhcmlhdGlvbiA9PT0gZW5kKSB7XG4gICAgICBzaWRlWCA9IHJpZ2h0O1xuICAgICAgdmFyIG9mZnNldFggPSBpc0ZpeGVkICYmIG9mZnNldFBhcmVudCA9PT0gd2luICYmIHdpbi52aXN1YWxWaWV3cG9ydCA/IHdpbi52aXN1YWxWaWV3cG9ydC53aWR0aCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W3dpZHRoUHJvcF07XG4gICAgICB4IC09IG9mZnNldFggLSBwb3BwZXJSZWN0LndpZHRoO1xuICAgICAgeCAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICB9LCBhZGFwdGl2ZSAmJiB1bnNldFNpZGVzKTtcblxuICB2YXIgX3JlZjQgPSByb3VuZE9mZnNldHMgPT09IHRydWUgPyByb3VuZE9mZnNldHNCeURQUih7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmNC54O1xuICB5ID0gX3JlZjQueTtcblxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uKSB7XG4gICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduID0ge30sIF9PYmplY3QkYXNzaWduW3NpZGVZXSA9IGhhc1kgPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ25bc2lkZVhdID0gaGFzWCA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbi50cmFuc2Zvcm0gPSAod2luLmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPD0gMSA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9PYmplY3QkYXNzaWduMltzaWRlWV0gPSBoYXNZID8geSArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjJbc2lkZVhdID0gaGFzWCA/IHggKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yLnRyYW5zZm9ybSA9ICcnLCBfT2JqZWN0JGFzc2lnbjIpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlcyhfcmVmNSkge1xuICB2YXIgc3RhdGUgPSBfcmVmNS5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmNS5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID0gb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRncHVBY2NlbGVyYXQsXG4gICAgICBfb3B0aW9ucyRhZGFwdGl2ZSA9IG9wdGlvbnMuYWRhcHRpdmUsXG4gICAgICBhZGFwdGl2ZSA9IF9vcHRpb25zJGFkYXB0aXZlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWRhcHRpdmUsXG4gICAgICBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPSBvcHRpb25zLnJvdW5kT2Zmc2V0cyxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJvdW5kT2Zmc2V0cztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IGdldENvbXB1dGVkU3R5bGUoc3RhdGUuZWxlbWVudHMucG9wcGVyKS50cmFuc2l0aW9uUHJvcGVydHkgfHwgJyc7XG5cbiAgICBpZiAoYWRhcHRpdmUgJiYgWyd0cmFuc2Zvcm0nLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uc29tZShmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uUHJvcGVydHkuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMDtcbiAgICB9KSkge1xuICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBEZXRlY3RlZCBDU1MgdHJhbnNpdGlvbnMgb24gYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcnLCAnQ1NTIHByb3BlcnRpZXM6IFwidHJhbnNmb3JtXCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIuJywgJ1xcblxcbicsICdEaXNhYmxlIHRoZSBcImNvbXB1dGVTdHlsZXNcIiBtb2RpZmllclxcJ3MgYGFkYXB0aXZlYCBvcHRpb24gdG8gYWxsb3cnLCAnZm9yIHNtb290aCB0cmFuc2l0aW9ucywgb3IgcmVtb3ZlIHRoZXNlIHByb3BlcnRpZXMgZnJvbSB0aGUgQ1NTJywgJ3RyYW5zaXRpb24gZGVjbGFyYXRpb24gb24gdGhlIHBvcHBlciBlbGVtZW50IGlmIG9ubHkgdHJhbnNpdGlvbmluZycsICdvcGFjaXR5IG9yIGJhY2tncm91bmQtY29sb3IgZm9yIGV4YW1wbGUuJywgJ1xcblxcbicsICdXZSByZWNvbW1lbmQgdXNpbmcgdGhlIHBvcHBlciBlbGVtZW50IGFzIGEgd3JhcHBlciBhcm91bmQgYW4gaW5uZXInLCAnZWxlbWVudCB0aGF0IGNhbiBoYXZlIGFueSBDU1MgcHJvcGVydHkgdHJhbnNpdGlvbmVkIGZvciBhbmltYXRpb25zLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IHtcbiAgICBwbGFjZW1lbnQ6IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KSxcbiAgICB2YXJpYXRpb246IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb246IGdwdUFjY2VsZXJhdGlvbixcbiAgICBpc0ZpeGVkOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5wb3BwZXIsIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBhZGFwdGl2ZTogYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRXaW5kb3cuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgcGFzc2l2ZSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRzY3JvbGwgPSBvcHRpb25zLnNjcm9sbCxcbiAgICAgIHNjcm9sbCA9IF9vcHRpb25zJHNjcm9sbCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHNjcm9sbCxcbiAgICAgIF9vcHRpb25zJHJlc2l6ZSA9IG9wdGlvbnMucmVzaXplLFxuICAgICAgcmVzaXplID0gX29wdGlvbnMkcmVzaXplID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcmVzaXplO1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KHN0YXRlLmVsZW1lbnRzLnBvcHBlcik7XG4gIHZhciBzY3JvbGxQYXJlbnRzID0gW10uY29uY2F0KHN0YXRlLnNjcm9sbFBhcmVudHMucmVmZXJlbmNlLCBzdGF0ZS5zY3JvbGxQYXJlbnRzLnBvcHBlcik7XG5cbiAgaWYgKHNjcm9sbCkge1xuICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICBzY3JvbGxQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyZXNpemUpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNjcm9sbCkge1xuICAgICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVzaXplKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdldmVudExpc3RlbmVycycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogZnVuY3Rpb24gZm4oKSB7fSxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIGRhdGE6IHt9XG59OyIsICJ2YXIgaGFzaCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCAidmFyIGhhc2ggPSB7XG4gIHN0YXJ0OiAnZW5kJyxcbiAgZW5kOiAnc3RhcnQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsKG5vZGUpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgdmFyIHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQ7XG4gIHZhciBzY3JvbGxUb3AgPSB3aW4ucGFnZVlPZmZzZXQ7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICB9O1xufSIsICJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDsgLy8gTkI6IFRoaXMgaXNuJ3Qgc3VwcG9ydGVkIG9uIGlPUyA8PSAxMi4gSWYgdGhlIGtleWJvYXJkIGlzIG9wZW4sIHRoZSBwb3BwZXJcbiAgLy8gY2FuIGJlIG9ic2N1cmVkIHVuZGVybmVhdGggaXQuXG4gIC8vIEFsc28sIGBodG1sLmNsaWVudEhlaWdodGAgYWRkcyB0aGUgYm90dG9tIGJhciBoZWlnaHQgaW4gU2FmYXJpIGlPUywgZXZlblxuICAvLyBpZiBpdCBpc24ndCBvcGVuLCBzbyBpZiB0aGlzIGlzbid0IGF2YWlsYWJsZSwgdGhlIHBvcHBlciB3aWxsIGJlIGRldGVjdGVkXG4gIC8vIHRvIG92ZXJmbG93IHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiB0b28gZWFybHkuXG5cbiAgaWYgKHZpc3VhbFZpZXdwb3J0KSB7XG4gICAgd2lkdGggPSB2aXN1YWxWaWV3cG9ydC53aWR0aDtcbiAgICBoZWlnaHQgPSB2aXN1YWxWaWV3cG9ydC5oZWlnaHQ7IC8vIFVzZXMgTGF5b3V0IFZpZXdwb3J0IChsaWtlIENocm9tZTsgU2FmYXJpIGRvZXMgbm90IGN1cnJlbnRseSlcbiAgICAvLyBJbiBDaHJvbWUsIGl0IHJldHVybnMgYSB2YWx1ZSB2ZXJ5IGNsb3NlIHRvIDAgKCsvLSkgYnV0IGNvbnRhaW5zIHJvdW5kaW5nXG4gICAgLy8gZXJyb3JzIGR1ZSB0byBmbG9hdGluZyBwb2ludCBudW1iZXJzLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHByZWNpc2lvbi5cbiAgICAvLyBTYWZhcmkgcmV0dXJucyBhIG51bWJlciA8PSAwLCB1c3VhbGx5IDwgLTEgd2hlbiBwaW5jaC16b29tZWRcbiAgICAvLyBGZWF0dXJlIGRldGVjdGlvbiBmYWlscyBpbiBtb2JpbGUgZW11bGF0aW9uIG1vZGUgaW4gQ2hyb21lLlxuICAgIC8vIE1hdGguYWJzKHdpbi5pbm5lcldpZHRoIC8gdmlzdWFsVmlld3BvcnQuc2NhbGUgLSB2aXN1YWxWaWV3cG9ydC53aWR0aCkgPFxuICAgIC8vIDAuMDAxXG4gICAgLy8gRmFsbGJhY2sgaGVyZTogXCJOb3QgU2FmYXJpXCIgdXNlckFnZW50XG5cbiAgICBpZiAoIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5OiB5XG4gIH07XG59IiwgImltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IHsgbWF4IH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gR2V0cyB0aGUgZW50aXJlIHNpemUgb2YgdGhlIHNjcm9sbGFibGUgZG9jdW1lbnQgYXJlYSwgZXZlbiBleHRlbmRpbmcgb3V0c2lkZVxuLy8gb2YgdGhlIGA8aHRtbD5gIGFuZCBgPGJvZHk+YCByZWN0IGJvdW5kcyBpZiBob3Jpem9udGFsbHkgc2Nyb2xsYWJsZVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgd2luU2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpO1xuICB2YXIgYm9keSA9IChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keTtcbiAgdmFyIHdpZHRoID0gbWF4KGh0bWwuc2Nyb2xsV2lkdGgsIGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LnNjcm9sbFdpZHRoIDogMCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKTtcbiAgdmFyIGhlaWdodCA9IG1heChodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGJvZHkgPyBib2R5LnNjcm9sbEhlaWdodCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudEhlaWdodCA6IDApO1xuICB2YXIgeCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIHZhciB5ID0gLXdpblNjcm9sbC5zY3JvbGxUb3A7XG5cbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoYm9keSB8fCBodG1sKS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgeCArPSBtYXgoaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKSAtIHdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59IiwgImltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn0iLCAiaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn0iLCAiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tIFwiLi9nZXRTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbi8qXG5naXZlbiBhIERPTSBlbGVtZW50LCByZXR1cm4gdGhlIGxpc3Qgb2YgYWxsIHNjcm9sbCBwYXJlbnRzLCB1cCB0aGUgbGlzdCBvZiBhbmNlc29yc1xudW50aWwgd2UgZ2V0IHRvIHRoZSB0b3Agd2luZG93IG9iamVjdC4gVGhpcyBsaXN0IGlzIHdoYXQgd2UgYXR0YWNoIHNjcm9sbCBsaXN0ZW5lcnNcbnRvLCBiZWNhdXNlIGlmIGFueSBvZiB0aGVzZSBwYXJlbnQgZWxlbWVudHMgc2Nyb2xsLCB3ZSdsbCBuZWVkIHRvIHJlLWNhbGN1bGF0ZSB0aGVcbnJlZmVyZW5jZSBlbGVtZW50J3MgcG9zaXRpb24uXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0U2Nyb2xsUGFyZW50cyhlbGVtZW50LCBsaXN0KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgIGxpc3QgPSBbXTtcbiAgfVxuXG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCk7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQgPT09ICgoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHkpO1xuICB2YXIgd2luID0gZ2V0V2luZG93KHNjcm9sbFBhcmVudCk7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBbd2luXS5jb25jYXQod2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc1Njcm9sbFBhcmVudChzY3JvbGxQYXJlbnQpID8gc2Nyb2xsUGFyZW50IDogW10pIDogc2Nyb2xsUGFyZW50O1xuICB2YXIgdXBkYXRlZExpc3QgPSBsaXN0LmNvbmNhdCh0YXJnZXQpO1xuICByZXR1cm4gaXNCb2R5ID8gdXBkYXRlZExpc3QgOiAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogaXNCb2R5IHRlbGxzIHVzIHRhcmdldCB3aWxsIGJlIGFuIEhUTUxFbGVtZW50IGhlcmVcbiAgdXBkYXRlZExpc3QuY29uY2F0KGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUodGFyZ2V0KSkpO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iLCAiaW1wb3J0IHsgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWaWV3cG9ydFJlY3QgZnJvbSBcIi4vZ2V0Vmlld3BvcnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRSZWN0IGZyb20gXCIuL2dldERvY3VtZW50UmVjdC5qc1wiO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gXCIuL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4vY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4uL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IG1heCwgbWluIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTtcbiAgcmVjdC50b3AgPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xuICByZWN0LmxlZnQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudExlZnQ7XG4gIHJlY3QuYm90dG9tID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC5yaWdodCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3Qud2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LmhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnggPSByZWN0LmxlZnQ7XG4gIHJlY3QueSA9IHJlY3QudG9wO1xuICByZXR1cm4gcmVjdDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpIHtcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50ID09PSB2aWV3cG9ydCA/IHJlY3RUb0NsaWVudFJlY3QoZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpKSA6IGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCkgOiByZWN0VG9DbGllbnRSZWN0KGdldERvY3VtZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpKTtcbn0gLy8gQSBcImNsaXBwaW5nIHBhcmVudFwiIGlzIGFuIG92ZXJmbG93YWJsZSBjb250YWluZXIgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2Zcbi8vIGNsaXBwaW5nIChvciBoaWRpbmcpIG92ZXJmbG93aW5nIGVsZW1lbnRzIHdpdGggYSBwb3NpdGlvbiBkaWZmZXJlbnQgZnJvbVxuLy8gYGluaXRpYWxgXG5cblxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIHtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xuICB2YXIgY2FuRXNjYXBlQ2xpcHBpbmcgPSBbJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZihnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uKSA+PSAwO1xuICB2YXIgY2xpcHBlckVsZW1lbnQgPSBjYW5Fc2NhcGVDbGlwcGluZyAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpID8gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIDogZWxlbWVudDtcblxuICBpZiAoIWlzRWxlbWVudChjbGlwcGVyRWxlbWVudCkpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzE0MTRcblxuXG4gIHJldHVybiBjbGlwcGluZ1BhcmVudHMuZmlsdGVyKGZ1bmN0aW9uIChjbGlwcGluZ1BhcmVudCkge1xuICAgIHJldHVybiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpICYmIGNvbnRhaW5zKGNsaXBwaW5nUGFyZW50LCBjbGlwcGVyRWxlbWVudCkgJiYgZ2V0Tm9kZU5hbWUoY2xpcHBpbmdQYXJlbnQpICE9PSAnYm9keSc7XG4gIH0pO1xufSAvLyBHZXRzIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIGR1ZSB0byBhbnkgbnVtYmVyIG9mXG4vLyBjbGlwcGluZyBwYXJlbnRzXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KGVsZW1lbnQsIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpIHtcbiAgdmFyIG1haW5DbGlwcGluZ1BhcmVudHMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nUGFyZW50cycgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gW10uY29uY2F0KG1haW5DbGlwcGluZ1BhcmVudHMsIFtyb290Qm91bmRhcnldKTtcbiAgdmFyIGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG4gIHZhciBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQpKTtcbiAgY2xpcHBpbmdSZWN0LndpZHRoID0gY2xpcHBpbmdSZWN0LnJpZ2h0IC0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC5oZWlnaHQgPSBjbGlwcGluZ1JlY3QuYm90dG9tIC0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgY2xpcHBpbmdSZWN0LnggPSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LnkgPSBjbGlwcGluZ1JlY3QudG9wO1xuICByZXR1cm4gY2xpcHBpbmdSZWN0O1xufSIsICJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQsIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn0iLCAiaW1wb3J0IGdldENsaXBwaW5nUmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBjbGlwcGluZ1BhcmVudHMsIHJlZmVyZW5jZSwgcG9wcGVyLCBib3R0b20sIHRvcCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuL21lcmdlUGFkZGluZ09iamVjdC5qc1wiO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tIFwiLi9leHBhbmRUb0hhc2hNYXAuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gc3RhdGUucGxhY2VtZW50IDogX29wdGlvbnMkcGxhY2VtZW50LFxuICAgICAgX29wdGlvbnMkYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMkYm91bmRhcnkgPT09IHZvaWQgMCA/IGNsaXBwaW5nUGFyZW50cyA6IF9vcHRpb25zJGJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyB2aWV3cG9ydCA6IF9vcHRpb25zJHJvb3RCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGVsZW1lbnRDb250ZSA9IF9vcHRpb25zLmVsZW1lbnRDb250ZXh0LFxuICAgICAgZWxlbWVudENvbnRleHQgPSBfb3B0aW9ucyRlbGVtZW50Q29udGUgPT09IHZvaWQgMCA/IHBvcHBlciA6IF9vcHRpb25zJGVsZW1lbnRDb250ZSxcbiAgICAgIF9vcHRpb25zJGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IF9vcHRpb25zJGFsdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMkcGFkZGluZyA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHBhZGRpbmc7XG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbiAgdmFyIGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcmVmZXJlbmNlIDogcG9wcGVyO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG4gIHZhciBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpO1xuICB2YXIgcmVmZXJlbmNlQ2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChzdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2UpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgZWxlbWVudDogcG9wcGVyUmVjdCxcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KTtcbiAgdmFyIHBvcHBlckNsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KE9iamVjdC5hc3NpZ24oe30sIHBvcHBlclJlY3QsIHBvcHBlck9mZnNldHMpKTtcbiAgdmFyIGVsZW1lbnRDbGllbnRSZWN0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHBvcHBlckNsaWVudFJlY3QgOiByZWZlcmVuY2VDbGllbnRSZWN0OyAvLyBwb3NpdGl2ZSA9IG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyByZWN0XG4gIC8vIDAgb3IgbmVnYXRpdmUgPSB3aXRoaW4gdGhlIGNsaXBwaW5nIHJlY3RcblxuICB2YXIgb3ZlcmZsb3dPZmZzZXRzID0ge1xuICAgIHRvcDogY2xpcHBpbmdDbGllbnRSZWN0LnRvcCAtIGVsZW1lbnRDbGllbnRSZWN0LnRvcCArIHBhZGRpbmdPYmplY3QudG9wLFxuICAgIGJvdHRvbTogZWxlbWVudENsaWVudFJlY3QuYm90dG9tIC0gY2xpcHBpbmdDbGllbnRSZWN0LmJvdHRvbSArIHBhZGRpbmdPYmplY3QuYm90dG9tLFxuICAgIGxlZnQ6IGNsaXBwaW5nQ2xpZW50UmVjdC5sZWZ0IC0gZWxlbWVudENsaWVudFJlY3QubGVmdCArIHBhZGRpbmdPYmplY3QubGVmdCxcbiAgICByaWdodDogZWxlbWVudENsaWVudFJlY3QucmlnaHQgLSBjbGlwcGluZ0NsaWVudFJlY3QucmlnaHQgKyBwYWRkaW5nT2JqZWN0LnJpZ2h0XG4gIH07XG4gIHZhciBvZmZzZXREYXRhID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQ7IC8vIE9mZnNldHMgY2FuIGJlIGFwcGxpZWQgb25seSB0byB0aGUgcG9wcGVyIGVsZW1lbnRcblxuICBpZiAoZWxlbWVudENvbnRleHQgPT09IHBvcHBlciAmJiBvZmZzZXREYXRhKSB7XG4gICAgdmFyIG9mZnNldCA9IG9mZnNldERhdGFbcGxhY2VtZW50XTtcbiAgICBPYmplY3Qua2V5cyhvdmVyZmxvd09mZnNldHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIG11bHRpcGx5ID0gW3JpZ2h0LCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gMSA6IC0xO1xuICAgICAgdmFyIGF4aXMgPSBbdG9wLCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gJ3knIDogJ3gnO1xuICAgICAgb3ZlcmZsb3dPZmZzZXRzW2tleV0gKz0gb2Zmc2V0W2F4aXNdICogbXVsdGlwbHk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3ZlcmZsb3dPZmZzZXRzO1xufSIsICJpbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgdmFyaWF0aW9uUGxhY2VtZW50cywgYmFzZVBsYWNlbWVudHMsIHBsYWNlbWVudHMgYXMgYWxsUGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPSBfb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPT09IHZvaWQgMCA/IGFsbFBsYWNlbWVudHMgOiBfb3B0aW9ucyRhbGxvd2VkQXV0b1A7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KTtcbiAgdmFyIHBsYWNlbWVudHMgPSB2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHM7XG4gIHZhciBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogVGhlIGBhbGxvd2VkQXV0b1BsYWNlbWVudHNgIG9wdGlvbiBkaWQgbm90IGFsbG93IGFueScsICdwbGFjZW1lbnRzLiBFbnN1cmUgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbiBtYXRjaGVzIHRoZSB2YXJpYXRpb24nLCAnb2YgdGhlIGFsbG93ZWQgcGxhY2VtZW50cy4nLCAnRm9yIGV4YW1wbGUsIFwiYXV0b1wiIGNhbm5vdCBiZSB1c2VkIHRvIGFsbG93IFwiYm90dG9tLXN0YXJ0XCIuJywgJ1VzZSBcImF1dG8tc3RhcnRcIiBpbnN0ZWFkLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdOiBGbG93IHNlZW1zIHRvIGhhdmUgcHJvYmxlbXMgd2l0aCB0d28gYXJyYXkgdW5pb25zLi4uXG5cblxuICB2YXIgb3ZlcmZsb3dzID0gYWxsb3dlZFBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn0iLCAiaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBjb21wdXRlQXV0b1BsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IGJvdHRvbSwgdG9wLCBzdGFydCwgcmlnaHQsIGxlZnQsIGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cblxuZnVuY3Rpb24gZmxpcChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyA9IG9wdGlvbnMuZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZmxpcFZhcmlhdGlvID0gb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMkZmxpcFZhcmlhdGlvID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZmxpcFZhcmlhdGlvLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHM7XG4gIHZhciBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG4gIHZhciBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnMgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwcmVmZXJyZWRQbGFjZW1lbnQpKTtcbiAgdmFyIHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50XS5jb25jYXQoZmFsbGJhY2tQbGFjZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnM6IGZsaXBWYXJpYXRpb25zLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBhbGxvd2VkQXV0b1BsYWNlbWVudHNcbiAgICB9KSA6IHBsYWNlbWVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgdmFyIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICB2YXIgX2Jhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihfYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KTtcbiAgICB2YXIgbWFpblZhcmlhdGlvblNpZGUgPSBpc1ZlcnRpY2FsID8gaXNTdGFydFZhcmlhdGlvbiA/IHJpZ2h0IDogbGVmdCA6IGlzU3RhcnRWYXJpYXRpb24gPyBib3R0b20gOiB0b3A7XG5cbiAgICBpZiAocmVmZXJlbmNlUmVjdFtsZW5dID4gcG9wcGVyUmVjdFtsZW5dKSB7XG4gICAgICBtYWluVmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB9XG5cbiAgICB2YXIgYWx0VmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB2YXIgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbX2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLCBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgcmV0dXJuIGNoZWNrO1xuICAgIH0pKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIFx1MjAxMyByZXNlYXJjaCBsYXRlclxuICAgIHZhciBudW1iZXJPZkNoZWNrcyA9IGZsaXBWYXJpYXRpb25zID8gMyA6IDE7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaSkge1xuICAgICAgdmFyIGZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzLmZpbmQoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuXG4gICAgICAgIGlmIChjaGVja3MpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tzLnNsaWNlKDAsIF9pKS5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gbnVtYmVyT2ZDaGVja3M7IF9pID4gMDsgX2ktLSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaSk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImJyZWFrXCIpIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59OyIsICJpbXBvcnQgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QsIHByZXZlbnRlZE9mZnNldHMpIHtcbiAgaWYgKHByZXZlbnRlZE9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgIHByZXZlbnRlZE9mZnNldHMgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvdmVyZmxvdykge1xuICByZXR1cm4gW3RvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdF0uc29tZShmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBvdmVyZmxvd1tzaWRlXSA+PSAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGlkZShfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBwcmV2ZW50ZWRPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3c7XG4gIHZhciByZWZlcmVuY2VPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnXG4gIH0pO1xuICB2YXIgcG9wcGVyQWx0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gIH0pO1xuICB2YXIgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocmVmZXJlbmNlT3ZlcmZsb3csIHJlZmVyZW5jZVJlY3QpO1xuICB2YXIgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHBvcHBlckFsdE92ZXJmbG93LCBwb3BwZXJSZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKTtcbiAgdmFyIGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIHZhciBoYXNQb3BwZXJFc2NhcGVkID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHBvcHBlckVzY2FwZU9mZnNldHMpO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0ge1xuICAgIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czogcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzLFxuICAgIHBvcHBlckVzY2FwZU9mZnNldHM6IHBvcHBlckVzY2FwZU9mZnNldHMsXG4gICAgaXNSZWZlcmVuY2VIaWRkZW46IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgIGhhc1BvcHBlckVzY2FwZWQ6IGhhc1BvcHBlckVzY2FwZWRcbiAgfTtcbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlkZScsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J10sXG4gIGZuOiBoaWRlXG59OyIsICJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgcGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHJlY3RzLCBvZmZzZXQpIHtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciBpbnZlcnREaXN0YW5jZSA9IFtsZWZ0LCB0b3BdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IC0xIDogMTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicgPyBvZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgcmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KSkgOiBvZmZzZXQsXG4gICAgICBza2lkZGluZyA9IF9yZWZbMF0sXG4gICAgICBkaXN0YW5jZSA9IF9yZWZbMV07XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyB7XG4gICAgeDogZGlzdGFuY2UsXG4gICAgeTogc2tpZGRpbmdcbiAgfSA6IHtcbiAgICB4OiBza2lkZGluZyxcbiAgICB5OiBkaXN0YW5jZVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQsXG4gICAgICBvZmZzZXQgPSBfb3B0aW9ucyRvZmZzZXQgPT09IHZvaWQgMCA/IFswLCAwXSA6IF9vcHRpb25zJG9mZnNldDtcbiAgdmFyIGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgX2RhdGEkc3RhdGUkcGxhY2VtZW50ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdLFxuICAgICAgeCA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC54LFxuICAgICAgeSA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC55O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0XG59OyIsICJpbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59IiwgImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgc3RhcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRBbHRBeGlzIGZyb20gXCIuLi91dGlscy9nZXRBbHRBeGlzLmpzXCI7XG5pbXBvcnQgeyB3aXRoaW4sIHdpdGhpbk1heENsYW1wIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4uL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuaW1wb3J0IHsgbWluIGFzIG1hdGhNaW4sIG1heCBhcyBtYXRoTWF4IH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgX29wdGlvbnMkdGV0aGVyID0gb3B0aW9ucy50ZXRoZXIsXG4gICAgICB0ZXRoZXIgPSBfb3B0aW9ucyR0ZXRoZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR0ZXRoZXIsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPSBvcHRpb25zLnRldGhlck9mZnNldCxcbiAgICAgIHRldGhlck9mZnNldCA9IF9vcHRpb25zJHRldGhlck9mZnNldCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHRldGhlck9mZnNldDtcbiAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgcGFkZGluZzogcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnlcbiAgfSk7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICB2YXIgbWFpbkF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBhbHRBeGlzID0gZ2V0QWx0QXhpcyhtYWluQXhpcyk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciB0ZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXQgPT09ICdmdW5jdGlvbicgPyB0ZXRoZXJPZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiB0ZXRoZXJPZmZzZXQ7XG4gIHZhciBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0VmFsdWUgPT09ICdudW1iZXInID8ge1xuICAgIG1haW5BeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZSxcbiAgICBhbHRBeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZVxuICB9IDogT2JqZWN0LmFzc2lnbih7XG4gICAgbWFpbkF4aXM6IDAsXG4gICAgYWx0QXhpczogMFxuICB9LCB0ZXRoZXJPZmZzZXRWYWx1ZSk7XG4gIHZhciBvZmZzZXRNb2RpZmllclN0YXRlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQgPyBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtzdGF0ZS5wbGFjZW1lbnRdIDogbnVsbDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICB2YXIgX29mZnNldE1vZGlmaWVyU3RhdGUkO1xuXG4gICAgdmFyIG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgdmFyIGFsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuICAgIHZhciBtaW4gPSBvZmZzZXQgKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgdmFyIG1heCA9IG9mZnNldCAtIG92ZXJmbG93W2FsdFNpZGVdO1xuICAgIHZhciBhZGRpdGl2ZSA9IHRldGhlciA/IC1wb3BwZXJSZWN0W2xlbl0gLyAyIDogMDtcbiAgICB2YXIgbWluTGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IHJlZmVyZW5jZVJlY3RbbGVuXSA6IHBvcHBlclJlY3RbbGVuXTtcbiAgICB2YXIgbWF4TGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IC1wb3BwZXJSZWN0W2xlbl0gOiAtcmVmZXJlbmNlUmVjdFtsZW5dOyAvLyBXZSBuZWVkIHRvIGluY2x1ZGUgdGhlIGFycm93IGluIHRoZSBjYWxjdWxhdGlvbiBzbyB0aGUgYXJyb3cgZG9lc24ndCBnb1xuICAgIC8vIG91dHNpZGUgdGhlIHJlZmVyZW5jZSBib3VuZHNcblxuICAgIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgICB2YXIgYXJyb3dSZWN0ID0gdGV0aGVyICYmIGFycm93RWxlbWVudCA/IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nT2JqZWN0ID0gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddID8gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddLnBhZGRpbmcgOiBnZXRGcmVzaFNpZGVPYmplY3QoKTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWluID0gYXJyb3dQYWRkaW5nT2JqZWN0W21haW5TaWRlXTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWF4ID0gYXJyb3dQYWRkaW5nT2JqZWN0W2FsdFNpZGVdOyAvLyBJZiB0aGUgcmVmZXJlbmNlIGxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGFycm93IGxlbmd0aCwgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIGluY2x1ZGUgaXRzIGZ1bGwgc2l6ZSBpbiB0aGUgY2FsY3VsYXRpb24uIElmIHRoZSByZWZlcmVuY2UgaXMgc21hbGxcbiAgICAvLyBhbmQgbmVhciB0aGUgZWRnZSBvZiBhIGJvdW5kYXJ5LCB0aGUgcG9wcGVyIGNhbiBvdmVyZmxvdyBldmVuIGlmIHRoZVxuICAgIC8vIHJlZmVyZW5jZSBpcyBub3Qgb3ZlcmZsb3dpbmcgYXMgd2VsbCAoZS5nLiB2aXJ0dWFsIGVsZW1lbnRzIHdpdGggbm9cbiAgICAvLyB3aWR0aCBvciBoZWlnaHQpXG5cbiAgICB2YXIgYXJyb3dMZW4gPSB3aXRoaW4oMCwgcmVmZXJlbmNlUmVjdFtsZW5dLCBhcnJvd1JlY3RbbGVuXSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IHJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgLSBhZGRpdGl2ZSAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzIDogbWluTGVuIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgdmFyIG1heE9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICsgYWRkaXRpdmUgKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1heExlbiArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBhcnJvd09mZnNldFBhcmVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93ICYmIGdldE9mZnNldFBhcmVudChzdGF0ZS5lbGVtZW50cy5hcnJvdyk7XG4gICAgdmFyIGNsaWVudE9mZnNldCA9IGFycm93T2Zmc2V0UGFyZW50ID8gbWFpbkF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFRvcCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50TGVmdCB8fCAwIDogMDtcbiAgICB2YXIgb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IChfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW21haW5BeGlzXSkgIT0gbnVsbCA/IF9vZmZzZXRNb2RpZmllclN0YXRlJCA6IDA7XG4gICAgdmFyIHRldGhlck1pbiA9IG9mZnNldCArIG1pbk9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWUgLSBjbGllbnRPZmZzZXQ7XG4gICAgdmFyIHRldGhlck1heCA9IG9mZnNldCArIG1heE9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWU7XG4gICAgdmFyIHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBtYXRoTWluKG1pbiwgdGV0aGVyTWluKSA6IG1pbiwgb2Zmc2V0LCB0ZXRoZXIgPyBtYXRoTWF4KG1heCwgdGV0aGVyTWF4KSA6IG1heCk7XG4gICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDI7XG5cbiAgICB2YXIgX21haW5TaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IHRvcCA6IGxlZnQ7XG5cbiAgICB2YXIgX2FsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gYm90dG9tIDogcmlnaHQ7XG5cbiAgICB2YXIgX29mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICB2YXIgX2xlbiA9IGFsdEF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHZhciBfbWluID0gX29mZnNldCArIG92ZXJmbG93W19tYWluU2lkZV07XG5cbiAgICB2YXIgX21heCA9IF9vZmZzZXQgLSBvdmVyZmxvd1tfYWx0U2lkZV07XG5cbiAgICB2YXIgaXNPcmlnaW5TaWRlID0gW3RvcCwgbGVmdF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgICB2YXIgX29mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkMiA9IG9mZnNldE1vZGlmaWVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG9mZnNldE1vZGlmaWVyU3RhdGVbYWx0QXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIDogMDtcblxuICAgIHZhciBfdGV0aGVyTWluID0gaXNPcmlnaW5TaWRlID8gX21pbiA6IF9vZmZzZXQgLSByZWZlcmVuY2VSZWN0W19sZW5dIC0gcG9wcGVyUmVjdFtfbGVuXSAtIF9vZmZzZXRNb2RpZmllclZhbHVlICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLmFsdEF4aXM7XG5cbiAgICB2YXIgX3RldGhlck1heCA9IGlzT3JpZ2luU2lkZSA/IF9vZmZzZXQgKyByZWZlcmVuY2VSZWN0W19sZW5dICsgcG9wcGVyUmVjdFtfbGVuXSAtIF9vZmZzZXRNb2RpZmllclZhbHVlIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLmFsdEF4aXMgOiBfbWF4O1xuXG4gICAgdmFyIF9wcmV2ZW50ZWRPZmZzZXQgPSB0ZXRoZXIgJiYgaXNPcmlnaW5TaWRlID8gd2l0aGluTWF4Q2xhbXAoX3RldGhlck1pbiwgX29mZnNldCwgX3RldGhlck1heCkgOiB3aXRoaW4odGV0aGVyID8gX3RldGhlck1pbiA6IF9taW4sIF9vZmZzZXQsIHRldGhlciA/IF90ZXRoZXJNYXggOiBfbWF4KTtcblxuICAgIHBvcHBlck9mZnNldHNbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0IC0gX29mZnNldDtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXVxufTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59IiwgImltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRIVE1MRWxlbWVudFNjcm9sbCBmcm9tIFwiLi9nZXRIVE1MRWxlbWVudFNjcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZVNjcm9sbChub2RlKSB7XG4gIGlmIChub2RlID09PSBnZXRXaW5kb3cobm9kZSkgfHwgIWlzSFRNTEVsZW1lbnQobm9kZSkpIHtcbiAgICByZXR1cm4gZ2V0V2luZG93U2Nyb2xsKG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudFNjcm9sbChub2RlKTtcbiAgfVxufSIsICJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldE5vZGVTY3JvbGwgZnJvbSBcIi4vZ2V0Tm9kZVNjcm9sbC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnRTY2FsZWQoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSByb3VuZChyZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMTtcbiAgdmFyIHNjYWxlWSA9IHJvdW5kKHJlY3QuaGVpZ2h0KSAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDE7XG4gIHJldHVybiBzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxO1xufSAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnRJc1NjYWxlZCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBpc0VsZW1lbnRTY2FsZWQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50SXNTY2FsZWQpO1xuICB2YXIgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCwgdHJ1ZSk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn0iLCAiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChzdHIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIFtdLmNvbmNhdChhcmdzKS5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHtcbiAgICByZXR1cm4gcC5yZXBsYWNlKC8lcy8sIGMpO1xuICB9LCBzdHIpO1xufSIsICJpbXBvcnQgZm9ybWF0IGZyb20gXCIuL2Zvcm1hdC5qc1wiO1xuaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbnZhciBJTlZBTElEX01PRElGSUVSX0VSUk9SID0gJ1BvcHBlcjogbW9kaWZpZXIgXCIlc1wiIHByb3ZpZGVkIGFuIGludmFsaWQgJXMgcHJvcGVydHksIGV4cGVjdGVkICVzIGJ1dCBnb3QgJXMnO1xudmFyIE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiByZXF1aXJlcyBcIiVzXCIsIGJ1dCBcIiVzXCIgbW9kaWZpZXIgaXMgbm90IGF2YWlsYWJsZSc7XG52YXIgVkFMSURfUFJPUEVSVElFUyA9IFsnbmFtZScsICdlbmFibGVkJywgJ3BoYXNlJywgJ2ZuJywgJ2VmZmVjdCcsICdyZXF1aXJlcycsICdvcHRpb25zJ107XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgW10uY29uY2F0KE9iamVjdC5rZXlzKG1vZGlmaWVyKSwgVkFMSURfUFJPUEVSVElFUykgLy8gSUUxMS1jb21wYXRpYmxlIHJlcGxhY2VtZW50IGZvciBgbmV3IFNldChpdGVyYWJsZSlgXG4gICAgLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBzZWxmKSB7XG4gICAgICByZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBTdHJpbmcobW9kaWZpZXIubmFtZSksICdcIm5hbWVcIicsICdcInN0cmluZ1wiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIubmFtZSkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2VuYWJsZWQnOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZW5hYmxlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJlbmFibGVkXCInLCAnXCJib29sZWFuXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5lbmFibGVkKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncGhhc2UnOlxuICAgICAgICAgIGlmIChtb2RpZmllclBoYXNlcy5pbmRleE9mKG1vZGlmaWVyLnBoYXNlKSA8IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInBoYXNlXCInLCBcImVpdGhlciBcIiArIG1vZGlmaWVyUGhhc2VzLmpvaW4oJywgJyksIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLnBoYXNlKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZm4nOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcImZuXCInLCAnXCJmdW5jdGlvblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZm4pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlZmZlY3QnOlxuICAgICAgICAgIGlmIChtb2RpZmllci5lZmZlY3QgIT0gbnVsbCAmJiB0eXBlb2YgbW9kaWZpZXIuZWZmZWN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJlZmZlY3RcIicsICdcImZ1bmN0aW9uXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5mbikgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlcXVpcmVzJzpcbiAgICAgICAgICBpZiAobW9kaWZpZXIucmVxdWlyZXMgIT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShtb2RpZmllci5yZXF1aXJlcykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXMpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlc0lmRXhpc3RzJzpcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzSWZFeGlzdHNcIicsICdcImFycmF5XCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3B0aW9ucyc6XG4gICAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlBvcHBlckpTOiBhbiBpbnZhbGlkIHByb3BlcnR5IGhhcyBiZWVuIHByb3ZpZGVkIHRvIHRoZSBcXFwiXCIgKyBtb2RpZmllci5uYW1lICsgXCJcXFwiIG1vZGlmaWVyLCB2YWxpZCBwcm9wZXJ0aWVzIGFyZSBcIiArIFZBTElEX1BST1BFUlRJRVMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcXFwiXCIgKyBzICsgXCJcXFwiXCI7XG4gICAgICAgICAgfSkuam9pbignLCAnKSArIFwiOyBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwcm92aWRlZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG1vZGlmaWVyLnJlcXVpcmVzICYmIG1vZGlmaWVyLnJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgIGlmIChtb2RpZmllcnMuZmluZChmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZC5uYW1lID09PSByZXF1aXJlbWVudDtcbiAgICAgICAgfSkgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCByZXF1aXJlbWVudCwgcmVxdWlyZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmlxdWVCeShhcnIsIGZuKSB7XG4gIHZhciBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWRlbnRpZmllciA9IGZuKGl0ZW0pO1xuXG4gICAgaWYgKCFpZGVudGlmaWVycy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgIGlkZW50aWZpZXJzLmFkZChpZGVudGlmaWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQnlOYW1lKG1vZGlmaWVycykge1xuICB2YXIgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkLCBjdXJyZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nID0gbWVyZ2VkW2N1cnJlbnQubmFtZV07XG4gICAgbWVyZ2VkW2N1cnJlbnQubmFtZV0gPSBleGlzdGluZyA/IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLCBjdXJyZW50LCB7XG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5vcHRpb25zLCBjdXJyZW50Lm9wdGlvbnMpLFxuICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcuZGF0YSwgY3VycmVudC5kYXRhKVxuICAgIH0pIDogY3VycmVudDtcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7IC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCBPYmplY3QudmFsdWVzXG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1lcmdlZCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbWVyZ2VkW2tleV07XG4gIH0pO1xufSIsICJpbXBvcnQgZ2V0Q29tcG9zaXRlUmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBvcmRlck1vZGlmaWVycyBmcm9tIFwiLi91dGlscy9vcmRlck1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCIuL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgdmFsaWRhdGVNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvdmFsaWRhdGVNb2RpZmllcnMuanNcIjtcbmltcG9ydCB1bmlxdWVCeSBmcm9tIFwiLi91dGlscy91bmlxdWVCeS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IG1lcmdlQnlOYW1lIGZyb20gXCIuL3V0aWxzL21lcmdlQnlOYW1lLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4vZW51bXMuanNcIjtcbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnMpIHtcbiAgaWYgKGdlbmVyYXRvck9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGdlbmVyYXRvck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfZ2VuZXJhdG9yT3B0aW9ucyA9IGdlbmVyYXRvck9wdGlvbnMsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0TW9kaWZpZXJzLFxuICAgICAgZGVmYXVsdE1vZGlmaWVycyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9PT0gdm9pZCAwID8gW10gOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPT09IHZvaWQgMCA/IERFRkFVTFRfT1BUSU9OUyA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZjI7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKHNldE9wdGlvbnNBY3Rpb24pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2V0T3B0aW9uc0FjdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHNldE9wdGlvbnNBY3Rpb24oc3RhdGUub3B0aW9ucykgOiBzZXRPcHRpb25zQWN0aW9uO1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHN0YXRlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgc3RhdGUub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTsgLy8gVmFsaWRhdGUgdGhlIHByb3ZpZGVkIG1vZGlmaWVycyBzbyB0aGF0IHRoZSBjb25zdW1lciB3aWxsIGdldCB3YXJuZWRcbiAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBtb2RpZmllcnMgaXMgaW52YWxpZCBmb3IgYW55IHJlYXNvblxuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gdW5pcXVlQnkoW10uY29uY2F0KG9yZGVyZWRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKTtcblxuICAgICAgICAgIGlmIChnZXRCYXNlUGxhY2VtZW50KHN0YXRlLm9wdGlvbnMucGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgICAgICAgICAgdmFyIGZsaXBNb2RpZmllciA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZmluZChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lO1xuICAgICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gJ2ZsaXAnO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghZmxpcE1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXV0b1wiIHBsYWNlbWVudHMgcmVxdWlyZSB0aGUgXCJmbGlwXCIgbW9kaWZpZXIgYmUnLCAncHJlc2VudCBhbmQgZW5hYmxlZCB0byB3b3JrLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwb3BwZXIpLFxuICAgICAgICAgICAgICBtYXJnaW5Ub3AgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3AsXG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luUmlnaHQsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQ7IC8vIFdlIG5vIGxvbmdlciB0YWtlIGludG8gYWNjb3VudCBgbWFyZ2luc2Agb24gdGhlIHBvcHBlciwgYW5kIGl0IGNhblxuICAgICAgICAgIC8vIGNhdXNlIGJ1Z3Mgd2l0aCBwb3NpdGlvbmluZywgc28gd2UnbGwgd2FybiB0aGUgY29uc3VtZXJcblxuXG4gICAgICAgICAgaWYgKFttYXJnaW5Ub3AsIG1hcmdpblJpZ2h0LCBtYXJnaW5Cb3R0b20sIG1hcmdpbkxlZnRdLnNvbWUoZnVuY3Rpb24gKG1hcmdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobWFyZ2luKTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBDU1MgXCJtYXJnaW5cIiBzdHlsZXMgY2Fubm90IGJlIHVzZWQgdG8gYXBwbHkgcGFkZGluZycsICdiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudCBvciBib3VuZGFyeS4nLCAnVG8gcmVwbGljYXRlIG1hcmdpbiwgdXNlIHRoZSBgb2Zmc2V0YCBtb2RpZmllciwgYXMgd2VsbCBhcycsICd0aGUgYHBhZGRpbmdgIG9wdGlvbiBpbiB0aGUgYHByZXZlbnRPdmVyZmxvd2AgYW5kIGBmbGlwYCcsICdtb2RpZmllcnMuJ10uam9pbignICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBydW5Nb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIC8vIFN5bmMgdXBkYXRlIFx1MjAxMyBpdCB3aWxsIGFsd2F5cyBiZSBleGVjdXRlZCwgZXZlbiBpZiBub3QgbmVjZXNzYXJ5LiBUaGlzXG4gICAgICAvLyBpcyB1c2VmdWwgZm9yIGxvdyBmcmVxdWVuY3kgdXBkYXRlcyB3aGVyZSBzeW5jIGJlaGF2aW9yIHNpbXBsaWZpZXMgdGhlXG4gICAgICAvLyBsb2dpYy5cbiAgICAgIC8vIEZvciBoaWdoIGZyZXF1ZW5jeSB1cGRhdGVzIChlLmcuIGByZXNpemVgIGFuZCBgc2Nyb2xsYCBldmVudHMpLCBhbHdheXNcbiAgICAgIC8vIHByZWZlciB0aGUgYXN5bmMgUG9wcGVyI3VwZGF0ZSBtZXRob2RcbiAgICAgIGZvcmNlVXBkYXRlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9zdGF0ZSRlbGVtZW50cyA9IHN0YXRlLmVsZW1lbnRzLFxuICAgICAgICAgICAgcmVmZXJlbmNlID0gX3N0YXRlJGVsZW1lbnRzLnJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBvcHBlciA9IF9zdGF0ZSRlbGVtZW50cy5wb3BwZXI7IC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG5cbiAgICAgICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBfX2RlYnVnX2xvb3BzX18gPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIF9fZGVidWdfbG9vcHNfXyArPSAxO1xuXG4gICAgICAgICAgICBpZiAoX19kZWJ1Z19sb29wc19fID4gMTAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5GSU5JVEVfTE9PUF9FUlJPUik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGF0ZS5yZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX3N0YXRlJG9yZGVyZWRNb2RpZmllID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF0sXG4gICAgICAgICAgICAgIGZuID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLmZuLFxuICAgICAgICAgICAgICBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm9wdGlvbnMsXG4gICAgICAgICAgICAgIF9vcHRpb25zID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9PT0gdm9pZCAwID8ge30gOiBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyLFxuICAgICAgICAgICAgICBuYW1lID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm5hbWU7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHtcbiAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICBvcHRpb25zOiBfb3B0aW9ucyxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgICAgICB9KSB8fCBzdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBc3luYyBhbmQgb3B0aW1pc3RpY2FsbHkgb3B0aW1pemVkIHVwZGF0ZSBcdTIwMTMgaXQgd2lsbCBub3QgYmUgZXhlY3V0ZWQgaWZcbiAgICAgIC8vIG5vdCBuZWNlc3NhcnkgKGRlYm91bmNlZCB0byBydW4gYXQgbW9zdCBvbmNlLXBlci10aWNrKVxuICAgICAgdXBkYXRlOiBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgcmVzb2x2ZShzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIGlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zZXRPcHRpb25zKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICBpZiAoIWlzRGVzdHJveWVkICYmIG9wdGlvbnMub25GaXJzdFVwZGF0ZSkge1xuICAgICAgICBvcHRpb25zLm9uRmlyc3RVcGRhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pOyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIGJlZm9yZSB0aGUgZmlyc3RcbiAgICAvLyB1cGRhdGUgY3ljbGUgcnVucy4gVGhleSB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSB1cGRhdGVcbiAgICAvLyBjeWNsZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBhIG1vZGlmaWVyIGFkZHMgc29tZSBwZXJzaXN0ZW50IGRhdGEgdGhhdFxuICAgIC8vIG90aGVyIG1vZGlmaWVycyBuZWVkIHRvIHVzZSwgYnV0IHRoZSBtb2RpZmllciBpcyBydW4gYWZ0ZXIgdGhlIGRlcGVuZGVudFxuICAgIC8vIG9uZS5cblxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICAgICAgX3JlZjMkb3B0aW9ucyA9IF9yZWYzLm9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zID0gX3JlZjMkb3B0aW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMyRvcHRpb25zLFxuICAgICAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGVmZmVjdCh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIG5vb3BGbiA9IGZ1bmN0aW9uIG5vb3BGbigpIHt9O1xuXG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0pO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cbmV4cG9ydCB2YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGRldGVjdE92ZXJmbG93IH07IiwgImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xuaW1wb3J0IG9mZnNldCBmcm9tIFwiLi9tb2RpZmllcnMvb2Zmc2V0LmpzXCI7XG5pbXBvcnQgZmxpcCBmcm9tIFwiLi9tb2RpZmllcnMvZmxpcC5qc1wiO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tIFwiLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgYXJyb3cgZnJvbSBcIi4vbW9kaWZpZXJzL2Fycm93LmpzXCI7XG5pbXBvcnQgaGlkZSBmcm9tIFwiLi9tb2RpZmllcnMvaGlkZS5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzLCBvZmZzZXQsIGZsaXAsIHByZXZlbnRPdmVyZmxvdywgYXJyb3csIGhpZGVdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyTGl0ZSB9IGZyb20gXCIuL3BvcHBlci1saXRlLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0ICogZnJvbSBcIi4vbW9kaWZpZXJzL2luZGV4LmpzXCI7IiwgImltcG9ydCB7XG4gICAgQXBwLFxuICAgIG5vcm1hbGl6ZVBhdGgsXG4gICAgVEFic3RyYWN0RmlsZSxcbiAgICBURmlsZSxcbiAgICBURm9sZGVyLFxuICAgIFZhdWx0LFxufSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVfdGZpbGUoYXBwOiBBcHAsIGZpbGVfc3RyOiBzdHJpbmcpOiBURmlsZSB7XG4gICAgZmlsZV9zdHIgPSBub3JtYWxpemVQYXRoKGZpbGVfc3RyKTtcblxuICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVfc3RyKTtcbiAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlIFwiJHtmaWxlX3N0cn1cIiBkb2Vzbid0IGV4aXN0YCk7XG4gICAgfVxuICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2ZpbGVfc3RyfSBpcyBhIGZvbGRlciwgbm90IGEgZmlsZWApO1xuICAgIH1cblxuICAgIHJldHVybiBmaWxlO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlX3Rmb2xkZXIoYXBwOiBBcHAsIGZvbGRlcl9zdHI6IHN0cmluZyk6IFRGb2xkZXIge1xuICAgIGZvbGRlcl9zdHIgPSBub3JtYWxpemVQYXRoKGZvbGRlcl9zdHIpO1xuXG4gICAgY29uc3QgZm9sZGVyID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmb2xkZXJfc3RyKTtcbiAgICBpZiAoIWZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZvbGRlciBcIiR7Zm9sZGVyX3N0cn1cIiBkb2Vzbid0IGV4aXN0YCk7XG4gICAgfVxuICAgIGlmICghKGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtmb2xkZXJfc3RyfSBpcyBhIGZpbGUsIG5vdCBhIGZvbGRlcmApO1xuICAgIH1cblxuICAgIHJldHVybiBmb2xkZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRfdGZpbGVzX2Zyb21fZm9sZGVyKFxuICAgIGFwcDogQXBwLFxuICAgIGZvbGRlcl9zdHI6IHN0cmluZ1xuKTogQXJyYXk8VEZpbGU+IHtcbiAgICBjb25zdCBmb2xkZXIgPSByZXNvbHZlX3Rmb2xkZXIoYXBwLCBmb2xkZXJfc3RyKTtcblxuICAgIGNvbnN0IGZpbGVzOiBBcnJheTxURmlsZT4gPSBbXTtcbiAgICBWYXVsdC5yZWN1cnNlQ2hpbGRyZW4oZm9sZGVyLCAoZmlsZTogVEFic3RyYWN0RmlsZSkgPT4ge1xuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICBmaWxlcy5wdXNoKGZpbGUpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmaWxlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIHJldHVybiBhLmJhc2VuYW1lLmxvY2FsZUNvbXBhcmUoYi5iYXNlbmFtZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZmlsZXM7XG59IiwgImltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCB7IEFwcCwgTWVudSwgc2V0SWNvbiwgVGV4dENvbXBvbmVudCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IHJlcGxhY2VWYWx1ZXMgfSBmcm9tIFwic3JjL2NvbW1hbmRzL3JlcGxhY2VWYWx1ZXNcIjtcbmltcG9ydCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwgZnJvbSBcInNyYy9vcHRpb25zL0ZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbFwiO1xuaW1wb3J0IFNlbGVjdE1vZGFsIGZyb20gXCJzcmMvb3B0aW9uTW9kYWxzL2ZpZWxkcy9TZWxlY3RNb2RhbFwiO1xuaW1wb3J0IHsgRmllbGRJY29uLCBGaWVsZFR5cGUgfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwiLi4vRmllbGRcIjtcbmltcG9ydCBBYnN0cmFjdExpc3RCYXNlZEZpZWxkIGZyb20gXCIuL0Fic3RyYWN0TGlzdEJhc2VkRmllbGRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3ljbGVGaWVsZCBleHRlbmRzIEFic3RyYWN0TGlzdEJhc2VkRmllbGQge1xuXG4gICAgdmFsdWVzUHJvbXB0Q29tcG9uZW50czogQXJyYXk8VGV4dENvbXBvbmVudD4gPSBbXTtcbiAgICBwcmVzZXRWYWx1ZXNGaWVsZHM6IEhUTUxEaXZFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoZmllbGQ6IEZpZWxkKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkLCBGaWVsZFR5cGUuQ3ljbGUpXG4gICAgfVxuXG4gICAgYWRkRmllbGRPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBhcHA6IEFwcCwgZmlsZTogVEZpbGUsIGxvY2F0aW9uOiBNZW51IHwgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmZpZWxkLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgY29uc3Qga2V5Rm9yVmFsdWUgPSBrZXlzLmZpbmQoa2V5ID0+IG9wdGlvbnNba2V5XSA9PT0gdmFsdWUpO1xuICAgICAgICBsZXQgbmV4dE9wdGlvbjogc3RyaW5nO1xuICAgICAgICBpZiAoa2V5Rm9yVmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzWyhrZXlzLmluZGV4T2Yoa2V5Rm9yVmFsdWUpICsgMSkgJSBrZXlzLmxlbmd0aF07XG4gICAgICAgICAgICBuZXh0T3B0aW9uID0gb3B0aW9uc1tuZXh0S2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRPcHRpb24gPSBvcHRpb25zW09iamVjdC5rZXlzKG9wdGlvbnMpWzBdXTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKEN5Y2xlRmllbGQuaXNNZW51KGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgbG9jYXRpb24uYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoYCR7bmFtZX0gOiAke3ZhbHVlfSBcdTI1QjcgJHtuZXh0T3B0aW9ufWApO1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0SWNvbihGaWVsZEljb25bRmllbGRUeXBlLkN5Y2xlXSk7XG4gICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKCgpID0+IHJlcGxhY2VWYWx1ZXMoYXBwLCBmaWxlLCBuYW1lLCBuZXh0T3B0aW9uKSk7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRTZWN0aW9uKFwibWV0YWRhdGEtbWVudS5maWVsZHNcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChDeWNsZUZpZWxkLmlzU3VnZ2VzdChsb2NhdGlvbikpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLm9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IGAke25hbWV9XyR7dmFsdWV9XyR7bmV4dE9wdGlvbn1gLFxuICAgICAgICAgICAgICAgIGFjdGlvbkxhYmVsOiBgPHNwYW4+PGI+JHtuYW1lfTwvYj4gOiAke3ZhbHVlfSBcdTI1QjcgJHtuZXh0T3B0aW9ufTwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZVZhbHVlcyhhcHAsIGZpbGUsIG5hbWUsIG5leHRPcHRpb24pLFxuICAgICAgICAgICAgICAgIGljb246IEZpZWxkSWNvbltGaWVsZFR5cGUuQ3ljbGVdXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBjcmVhdGVBbmRPcGVuRmllbGRNb2RhbChhcHA6IEFwcCwgZmlsZTogVEZpbGUsIHNlbGVjdGVkRmllbGROYW1lOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nLCBsaW5lTnVtYmVyPzogbnVtYmVyLCBpbkZyb250bWF0dGVyPzogYm9vbGVhbiwgYWZ0ZXI/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZpZWxkTW9kYWwgPSBuZXcgU2VsZWN0TW9kYWwoYXBwLCBmaWxlLCB2YWx1ZSB8fCBcIlwiLCB0aGlzLmZpZWxkLCBsaW5lTnVtYmVyLCBpbkZyb250bWF0dGVyLCBhZnRlcik7XG4gICAgICAgIGZpZWxkTW9kYWwudGl0bGVFbC5zZXRUZXh0KGBTZWxlY3Qgb3B0aW9uIGZvciAke3NlbGVjdGVkRmllbGROYW1lfWApO1xuICAgICAgICBmaWVsZE1vZGFsLm9wZW4oKTtcbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGVEdkZpZWxkKFxuICAgICAgICBwbHVnaW46IE1ldGFkYXRhTWVudSxcbiAgICAgICAgZHY6IGFueSxcbiAgICAgICAgcDogYW55LFxuICAgICAgICBmaWVsZENvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgICAgIGF0dHJzPzogeyBjbHM/OiBzdHJpbmcsIGF0dHI/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LCBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB9XG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmZpZWxkLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgY29uc3Qga2V5Rm9yVmFsdWUgPSBrZXlzLmZpbmQoa2V5ID0+IG9wdGlvbnNba2V5XSA9PT0gcFt0aGlzLmZpZWxkLm5hbWVdKTtcbiAgICAgICAgbGV0IG5leHRPcHRpb246IHN0cmluZztcbiAgICAgICAgaWYgKGtleUZvclZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0S2V5ID0ga2V5c1soa2V5cy5pbmRleE9mKGtleUZvclZhbHVlKSArIDEpICUga2V5cy5sZW5ndGhdO1xuICAgICAgICAgICAgbmV4dE9wdGlvbiA9IG9wdGlvbnNbbmV4dEtleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0T3B0aW9uID0gb3B0aW9uc1tPYmplY3Qua2V5cyhvcHRpb25zKVswXV07XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGR2LmVsKCdzcGFuJywgcFt0aGlzLmZpZWxkLm5hbWVdLCBhdHRycyk7XG4gICAgICAgIC8qIGVuZCBzcGFjZXIgKi9cbiAgICAgICAgY29uc3Qgc3BhY2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3BhY2VyLnNldEF0dHIoXCJjbGFzc1wiLCBcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtc3BhY2VyXCIpO1xuICAgICAgICAvKiBidXR0b24gdG8gZGlzcGxheSBpbnB1dCAqL1xuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBzZXRJY29uKGJ1dHRvbiwgRmllbGRJY29uW0ZpZWxkVHlwZS5DeWNsZV0pXG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyKCdjbGFzcycsIFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC1idXR0b25cIik7XG4gICAgICAgIGlmICghYXR0cnM/Lm9wdGlvbnM/LmFsd2F5c09uKSB7XG4gICAgICAgICAgICBidXR0b24uaGlkZSgpO1xuICAgICAgICAgICAgc3BhY2VyLnNob3coKTtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLm9ubW91c2VvdmVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5zaG93KCk7XG4gICAgICAgICAgICAgICAgc3BhY2VyLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLm9ubW91c2VvdXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBzcGFjZXIuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyogYnV0dG9uIG9uIGNsaWNrIDogZ28gdG8gbmV4dCB2ZXJzaW9uKi9cbiAgICAgICAgYnV0dG9uLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgQ3ljbGVGaWVsZC5yZXBsYWNlVmFsdWVzKHBsdWdpbi5hcHAsIHBbXCJmaWxlXCJdW1wicGF0aFwiXSwgdGhpcy5maWVsZC5uYW1lLCBuZXh0T3B0aW9uKTtcbiAgICAgICAgICAgIGlmICghYXR0cnM/Lm9wdGlvbnM/LmFsd2F5c09uKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBzcGFjZXIuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoZmllbGRWYWx1ZSk7XG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKHNwYWNlcik7XG4gICAgfVxufSIsICJpbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBBcHAsIE1lbnUsIHNldEljb24sIFRleHRDb21wb25lbnQsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsIGZyb20gXCJzcmMvb3B0aW9ucy9GaWVsZENvbW1hbmRTdWdnZXN0TW9kYWxcIjtcbmltcG9ydCBNdWx0aVNlbGVjdE1vZGFsIGZyb20gXCJzcmMvb3B0aW9uTW9kYWxzL2ZpZWxkcy9NdWx0aVNlbGVjdE1vZGFsXCI7XG5pbXBvcnQgeyBGaWVsZEljb24sIEZpZWxkVHlwZSB9IGZyb20gXCJzcmMvdHlwZXMvZmllbGRUeXBlc1wiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCIuLi9GaWVsZFwiO1xuaW1wb3J0IEFic3RyYWN0TGlzdEJhc2VkRmllbGQgZnJvbSBcIi4vQWJzdHJhY3RMaXN0QmFzZWRGaWVsZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNdWx0aUZpZWxkIGV4dGVuZHMgQWJzdHJhY3RMaXN0QmFzZWRGaWVsZCB7XG5cbiAgICB2YWx1ZXNQcm9tcHRDb21wb25lbnRzOiBBcnJheTxUZXh0Q29tcG9uZW50PiA9IFtdO1xuICAgIHByZXNldFZhbHVlc0ZpZWxkczogSFRNTERpdkVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZDogRmllbGQpIHtcbiAgICAgICAgc3VwZXIoZmllbGQsIEZpZWxkVHlwZS5NdWx0aSlcbiAgICB9XG5cbiAgICBhZGRGaWVsZE9wdGlvbihuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGFwcDogQXBwLCBmaWxlOiBURmlsZSwgbG9jYXRpb246IE1lbnUgfCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgTXVsdGlTZWxlY3RNb2RhbChhcHAsIGZpbGUsIHRoaXMuZmllbGQsIHZhbHVlKTtcbiAgICAgICAgbW9kYWwudGl0bGVFbC5zZXRUZXh0KFwiU2VsZWN0IHZhbHVlc1wiKTtcbiAgICAgICAgaWYgKE11bHRpRmllbGQuaXNNZW51KGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgbG9jYXRpb24uYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoYFVwZGF0ZSA8JHtuYW1lfT5gKTtcbiAgICAgICAgICAgICAgICBpdGVtLnNldEljb24oRmllbGRJY29uW0ZpZWxkVHlwZS5NdWx0aV0pO1xuICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljaygoKSA9PiBtb2RhbC5vcGVuKCkpO1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0U2VjdGlvbihcIm1ldGFkYXRhLW1lbnUuZmllbGRzXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoTXVsdGlGaWVsZC5pc1N1Z2dlc3QobG9jYXRpb24pKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5vcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkOiBgdXBkYXRlXyR7bmFtZX1gLFxuICAgICAgICAgICAgICAgIGFjdGlvbkxhYmVsOiBgPHNwYW4+VXBkYXRlIDxiPiR7bmFtZX08L2I+PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiBtb2RhbC5vcGVuKCksXG4gICAgICAgICAgICAgICAgaWNvbjogRmllbGRJY29uW0ZpZWxkVHlwZS5NdWx0aV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBjcmVhdGVBbmRPcGVuRmllbGRNb2RhbChhcHA6IEFwcCwgZmlsZTogVEZpbGUsIHNlbGVjdGVkRmllbGROYW1lOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nLCBsaW5lTnVtYmVyPzogbnVtYmVyLCBpbkZyb250bWF0dGVyPzogYm9vbGVhbiwgYWZ0ZXI/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZpZWxkTW9kYWwgPSBuZXcgTXVsdGlTZWxlY3RNb2RhbChhcHAsIGZpbGUsIHRoaXMuZmllbGQsIHZhbHVlIHx8IFwiXCIsIGxpbmVOdW1iZXIsIGluRnJvbnRtYXR0ZXIsIGFmdGVyKTtcbiAgICAgICAgZmllbGRNb2RhbC50aXRsZUVsLnNldFRleHQoYFNlbGVjdCBvcHRpb25zIGZvciAke3NlbGVjdGVkRmllbGROYW1lfWApO1xuICAgICAgICBmaWVsZE1vZGFsLm9wZW4oKTtcbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGVEdkZpZWxkKFxuICAgICAgICBwbHVnaW46IE1ldGFkYXRhTWVudSxcbiAgICAgICAgZHY6IGFueSxcbiAgICAgICAgcDogYW55LFxuICAgICAgICBmaWVsZENvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgICAgIGF0dHJzPzogeyBjbHM/OiBzdHJpbmcsIGF0dHI/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LCBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB9XG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8qIFxuICAgICAgICB0aGlzIGNvbnRyb2wgZGlzcGxheXMgYnkgZGVmYXVsdCB0aGUgbGlzdCBvZiB2YWx1ZVxuICAgICAgICB3aGVuIG1vdXNlb3Zlcjogd2UgZGlzcGxheSBhIFwiK1wiIGJ1dHRvbiBhdCB0aGUgYmVnZ2luaW5nIG9mIHRoZSBmaWVsZCB0byBhZGQgYSBuZXcgdmFsdWUgYW5kIGEgXCJ4XCIgYnV0dG9uIGFmdGVyIHRoZSB2YWx1ZSBob3ZlcmVkIHRvIHJlbW92ZSBpdCBmcm9tIGxpc3RcbiAgICAgICAgd2hlbiB0aGUgXCJ4XCIgYnV0dG9uIGlzIGNsaWNrZWQsIHdlIHJlbW92ZSB0aGUgbGlzdCBmcm9tIHZhbHVlXG4gICAgICAgIHdoZW4gdGhlIFwiK1wiIGJ1dHRvbiBpcyBjbGlja2VkLCB3ZSBkaXNwbGF5IGEgc2VsZWN0IGRyb3Bkb3duIGZpbHRlcmVkIHdpdGggcmVtYWluaW5nIG9wdGlvbnMuIHdoZW4gb25lIG9wdGlvbiBpcyBzZWxlY3RlZCB3ZSBhZGQgaXQgdG8gdGhlIGxpc3QgYW5kIHJlbW92ZSB0aGUgY29udHJvbFxuICAgICAgICAqL1xuICAgICAgICBsZXQgdmFsdWVIb3ZlcmVkID0gZmFsc2U7XG4gICAgICAgIGxldCBjdXJyZW50VmFsdWVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBpZiAocFt0aGlzLmZpZWxkLm5hbWVdKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMocFt0aGlzLmZpZWxkLm5hbWVdKS5pbmNsdWRlcyhcInBhdGhcIikpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWVzID0gW2BbWyR7cFt0aGlzLmZpZWxkLm5hbWVdLnBhdGgucmVwbGFjZShcIi5tZFwiLCBcIlwiKX1dXWBdXG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocFt0aGlzLmZpZWxkLm5hbWVdKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZXMucHVzaCguLi5wW3RoaXMuZmllbGQubmFtZV0ubGFzdCgpLnNwbGl0KFwiLFwiKS5tYXAoKHY6IHN0cmluZykgPT4gdi50cmltKCkpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlcyA9IHBbdGhpcy5maWVsZC5uYW1lXS5zcGxpdChcIixcIikubWFwKCh2OiBzdHJpbmcpID0+IHYudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIHNlbGVjdCBjb250YWluZXIgKi9cbiAgICAgICAgY29uc3Qgc2VsZWN0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICAgICAgc2VsZWN0LnNldEF0dHIoXCJjbGFzc1wiLCBcIm1ldGFkYXRhLW1lbnUtZHYtc2VsZWN0XCIpO1xuICAgICAgICBzZWxlY3RDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZWN0KVxuICAgICAgICBjb25zdCBudWxsT3B0aW9uID0gbmV3IE9wdGlvbihcIi0tc2VsZWN0LS1cIiwgdW5kZWZpbmVkKTtcbiAgICAgICAgc2VsZWN0LmFkZChudWxsT3B0aW9uKTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5maWVsZC5vcHRpb25zKVxuICAgICAgICAgICAgLmZpbHRlcihvID0+ICFjdXJyZW50VmFsdWVzLmNvbnRhaW5zKHRoaXMuZmllbGQub3B0aW9uc1tvXSkpXG4gICAgICAgICAgICAuZm9yRWFjaChvID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBuZXcgT3B0aW9uKHRoaXMuZmllbGQub3B0aW9uc1tvXSwgbyk7XG4gICAgICAgICAgICAgICAgaWYgKHBbdGhpcy5maWVsZC5uYW1lXSA9PT0gdGhpcy5maWVsZC5vcHRpb25zW29dKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGVjdC5hZGQob3B0aW9uKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHNlbGVjdC5vbmNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlcyA9IFsuLi5jdXJyZW50VmFsdWVzLCB0aGlzLmZpZWxkLm9wdGlvbnNbc2VsZWN0LnZhbHVlXV0uam9pbihcIiwgXCIpO1xuICAgICAgICAgICAgTXVsdGlGaWVsZC5yZXBsYWNlVmFsdWVzKHBsdWdpbi5hcHAsIHBbXCJmaWxlXCJdW1wicGF0aFwiXSwgdGhpcy5maWVsZC5uYW1lLCBuZXdWYWx1ZXMpXG4gICAgICAgICAgICBzaW5nbGVTcGFjZXIuaGlkZSgpO1xuICAgICAgICAgICAgZG91YmxlU3BhY2VyLnNob3coKTtcbiAgICAgICAgICAgIGFkZEJ0bi5oaWRlKCk7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZCh2YWx1ZXNDb250YWluZXIpO1xuICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoc2luZ2xlU3BhY2VyKTtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGRvdWJsZVNwYWNlcik7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChzZWxlY3RDb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0Lm9ua2V5ZG93biA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQodmFsdWVzQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChzaW5nbGVTcGFjZXIpO1xuICAgICAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGRvdWJsZVNwYWNlcik7XG4gICAgICAgICAgICAgICAgZmllbGRDb250YWluZXIucmVtb3ZlQ2hpbGQoc2VsZWN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbG9zZVNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHNldEljb24oY2xvc2VTZWxlY3QsIFwiY3Jvc3NcIik7XG4gICAgICAgIGNsb3NlU2VsZWN0LmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC1idXR0b25cIik7XG4gICAgICAgIGNsb3NlU2VsZWN0LmFkZENsYXNzKFwibXVsdGlcIik7XG4gICAgICAgIGNsb3NlU2VsZWN0Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZCh2YWx1ZXNDb250YWluZXIpO1xuICAgICAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoc2luZ2xlU3BhY2VyKTtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGRvdWJsZVNwYWNlcik7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChzZWxlY3RDb250YWluZXIpO1xuICAgICAgICB9O1xuICAgICAgICBzZWxlY3RDb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvc2VTZWxlY3QpO1xuXG4gICAgICAgIC8qIGN1cnJlbnQgdmFsdWVzIGNvbnRhaW5lciAqL1xuICAgICAgICBjb25zdCB2YWx1ZXNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2YWx1ZXNDb250YWluZXIuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LWR2LW11bHRpLXZhbHVlcy1jb250YWluZXJcIik7XG5cbiAgICAgICAgLyogY3VycmVudCB2YWx1ZXMgKi9cbiAgICAgICAgY3VycmVudFZhbHVlcy5mb3JFYWNoKHYgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdmFsdWVDb250YWluZXIuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LWR2LW11bHRpLXZhbHVlcy1jb250YWluZXJcIik7XG5cblxuICAgICAgICAgICAgY29uc3QgdmFsdWVSZW1vdmVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgc2V0SWNvbih2YWx1ZVJlbW92ZUJ0biwgXCJjcm9zc1wiKVxuICAgICAgICAgICAgdmFsdWVSZW1vdmVCdG4uYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLWJ1dHRvblwiKTtcbiAgICAgICAgICAgIHZhbHVlUmVtb3ZlQnRuLmFkZENsYXNzKFwibXVsdGlcIik7XG4gICAgICAgICAgICB2YWx1ZVJlbW92ZUJ0bi5oaWRlKCk7XG4gICAgICAgICAgICB2YWx1ZVJlbW92ZUJ0bi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ1ZhbHVlcyA9IGN1cnJlbnRWYWx1ZXMuZmlsdGVyKGNWID0+IGNWICE9PSB2KS5qb2luKFwiLCBcIilcbiAgICAgICAgICAgICAgICBNdWx0aUZpZWxkLnJlcGxhY2VWYWx1ZXMocGx1Z2luLmFwcCwgcFtcImZpbGVcIl1bXCJwYXRoXCJdLCB0aGlzLmZpZWxkLm5hbWUsIHJlbWFpbmluZ1ZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh2YWx1ZVJlbW92ZUJ0bik7XG5cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdmFsdWVMYWJlbC5zZXRUZXh0KHYpO1xuICAgICAgICAgICAgdmFsdWVMYWJlbC5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtZHYtbXVsdGktdmFsdWUtbGFiZWxcIik7XG4gICAgICAgICAgICB2YWx1ZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh2YWx1ZUxhYmVsKTtcblxuICAgICAgICAgICAgdmFsdWVDb250YWluZXIub25tb3VzZW92ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFsdWVIb3ZlcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBkb3VibGVTcGFjZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHNpbmdsZVNwYWNlci5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdmFsdWVSZW1vdmVCdG4uc2hvdygpO1xuICAgICAgICAgICAgICAgIHZhbHVlTGFiZWwuYWRkQ2xhc3MoXCJob3ZlcmVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVDb250YWluZXIub25tb3VzZW91dCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB2YWx1ZUhvdmVyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YWx1ZVJlbW92ZUJ0bi5oaWRlKCk7XG4gICAgICAgICAgICAgICAgc2luZ2xlU3BhY2VyLnNob3coKTtcbiAgICAgICAgICAgICAgICBkb3VibGVTcGFjZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHZhbHVlTGFiZWwucmVtb3ZlQ2xhc3MoXCJob3ZlcmVkXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZXNDb250YWluZXIuYXBwZW5kQ2hpbGQodmFsdWVDb250YWluZXIpO1xuICAgICAgICB9KVxuXG4gICAgICAgIC8qIGJ1dHRvbiB0byBkaXNwbGF5IGlucHV0ICovXG4gICAgICAgIGNvbnN0IGFkZEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHNldEljb24oYWRkQnRuLCBcImJ1bGxldC1saXN0XCIpO1xuICAgICAgICBhZGRCdG4uc2V0QXR0cignY2xhc3MnLCBcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtYnV0dG9uXCIpO1xuXG4gICAgICAgIHZhbHVlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChhZGRCdG4pO1xuICAgICAgICBhZGRCdG4ub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLnJlbW92ZUNoaWxkKHZhbHVlc0NvbnRhaW5lcik7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5yZW1vdmVDaGlsZChzaW5nbGVTcGFjZXIpO1xuICAgICAgICAgICAgZmllbGRDb250YWluZXIucmVtb3ZlQ2hpbGQoZG91YmxlU3BhY2VyKTtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGVjdENvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBlbmQgc3BhY2VyICovXG4gICAgICAgIGNvbnN0IHNpbmdsZVNwYWNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHNpbmdsZVNwYWNlci5zZXRBdHRyKFwiY2xhc3NcIiwgXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLXNwYWNlclwiKVxuICAgICAgICBjb25zdCBkb3VibGVTcGFjZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBkb3VibGVTcGFjZXIuc2V0QXR0cihcImNsYXNzXCIsIFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC1kb3VibGUtc3BhY2VyXCIpXG5cbiAgICAgICAgaWYgKCFhdHRycz8ub3B0aW9ucz8uYWx3YXlzT24pIHtcbiAgICAgICAgICAgIGFkZEJ0bi5oaWRlKCk7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5vbm1vdXNlb3ZlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBhZGRCdG4uc2hvdygpO1xuICAgICAgICAgICAgICAgIGRvdWJsZVNwYWNlci5oaWRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZUhvdmVyZWQpIHNpbmdsZVNwYWNlci5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5vbm1vdXNlb3V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFkZEJ0bi5oaWRlKCk7XG4gICAgICAgICAgICAgICAgc2luZ2xlU3BhY2VyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBkb3VibGVTcGFjZXIuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyogaW5pdGlhbCBzdGF0ZSAqL1xuICAgICAgICBpZiAoIWF0dHJzPy5vcHRpb25zPy5hbHdheXNPbikge1xuICAgICAgICAgICAgc2luZ2xlU3BhY2VyLmhpZGUoKTtcbiAgICAgICAgICAgIGRvdWJsZVNwYWNlci5zaG93KCk7XG4gICAgICAgICAgICBhZGRCdG4uaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2luZ2xlU3BhY2VyLnNob3coKTtcbiAgICAgICAgICAgIGRvdWJsZVNwYWNlci5oaWRlKCk7XG4gICAgICAgICAgICBhZGRCdG4uc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKHZhbHVlc0NvbnRhaW5lcik7XG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKHNpbmdsZVNwYWNlcik7XG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGRvdWJsZVNwYWNlcik7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIFRvZ2dsZUNvbXBvbmVudCwgVEZpbGUsIEJ1dHRvbkNvbXBvbmVudCwgRXh0cmFCdXR0b25Db21wb25lbnQsIFN1Z2dlc3RNb2RhbCwgc2V0SWNvbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCJzcmMvZmllbGRzL0ZpZWxkXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5pbXBvcnQgRmllbGRTZXR0aW5nIGZyb20gXCJzcmMvc2V0dGluZ3MvRmllbGRTZXR0aW5nXCI7XG5pbXBvcnQgeyBpbnNlcnRWYWx1ZXMgfSBmcm9tIFwic3JjL2NvbW1hbmRzL2luc2VydFZhbHVlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNdWx0aVN1Z2dlc3RNb2RhbCBleHRlbmRzIFN1Z2dlc3RNb2RhbDxzdHJpbmc+IHtcbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuICAgIHByaXZhdGUgZmllbGQ6IEZpZWxkO1xuICAgIHByaXZhdGUgc2VsZWN0ZWRPcHRpb25zOiBBcnJheTxzdHJpbmc+O1xuICAgIHByaXZhdGUgbGluZU51bWJlcjogbnVtYmVyO1xuICAgIHByaXZhdGUgaW5Gcm9udG1hdHRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIGFmdGVyOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBmaWVsZDogRmllbGQsIGluaXRpYWxPcHRpb25zOiBzdHJpbmcsIGxpbmVOdW1iZXI6IG51bWJlciA9IC0xLCBpbkZyb250TWF0dGVyOiBib29sZWFuID0gZmFsc2UsIGFmdGVyOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgaWYgKGluaXRpYWxPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoaW5pdGlhbE9wdGlvbnMudG9TdHJpbmcoKS5zdGFydHNXaXRoKFwiW1tcIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9ucyA9IGluaXRpYWxPcHRpb25zLnNwbGl0KFwiLFwiKS5tYXAoaXRlbSA9PiBpdGVtLnRyaW0oKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25zID0gaW5pdGlhbE9wdGlvbnMudG9TdHJpbmcoKS5yZXBsYWNlKC9eXFxbKC4qKVxcXSQvLCBcIiQxXCIpLnNwbGl0KFwiLFwiKS5tYXAoaXRlbSA9PiBpdGVtLnRyaW0oKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbnMgPSBbXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZU51bWJlcjtcbiAgICAgICAgdGhpcy5pbkZyb250bWF0dGVyID0gaW5Gcm9udE1hdHRlcjtcbiAgICAgICAgdGhpcy5hZnRlciA9IGFmdGVyO1xuICAgIH07XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtdmFsdWUtc3VnZ2VzdGVyLWFjdGlvbnNcIiB9KVxuICAgICAgICBidXR0b25Db250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtdmFsdWUtc3VnZ2VzdGVyLWFjdGlvbnMtc3BhY2VyXCIgfSlcbiAgICAgICAgLy9jb25maXJtIGJ1dHRvblxuICAgICAgICBjb25zdCBjb25maXJtQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChidXR0b25Db250YWluZXIpXG4gICAgICAgIGNvbmZpcm1CdXR0b24uc2V0SWNvbihcImNoZWNrbWFya1wiKVxuICAgICAgICBjb25maXJtQnV0dG9uLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXBsYWNlVmFsdWVzKCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKClcbiAgICAgICAgfSlcbiAgICAgICAgY29uZmlybUJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtdmFsdWUtc3VnZ2VzdGVyLWJ1dHRvblwiKVxuICAgICAgICAvL2NhbmNlbCBidXR0b25cbiAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChidXR0b25Db250YWluZXIpXG4gICAgICAgIGNhbmNlbEJ1dHRvbi5zZXRJY29uKFwiY3Jvc3NcIilcbiAgICAgICAgY2FuY2VsQnV0dG9uLm9uQ2xpY2soKCkgPT4geyB0aGlzLmNsb3NlKCk7IH0pXG4gICAgICAgIGNhbmNlbEJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtdmFsdWUtc3VnZ2VzdGVyLWJ1dHRvblwiKVxuICAgICAgICAvL2NsZWFyIHZhbHVlIGJ1dHRvblxuICAgICAgICBjb25zdCBjbGVhckJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQoYnV0dG9uQ29udGFpbmVyKVxuICAgICAgICBjbGVhckJ1dHRvbi5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgY2xlYXJCdXR0b24ub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsZWFyVmFsdWVzKCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pXG4gICAgICAgIGNsZWFyQnV0dG9uLmJ1dHRvbkVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS12YWx1ZS1zdWdnZXN0ZXItYnV0dG9uXCIpXG4gICAgICAgIGNsZWFyQnV0dG9uLmJ1dHRvbkVsLmFkZENsYXNzKFwiZGFuZ2VyXCIpXG5cbiAgICAgICAgdGhpcy5tb2RhbEVsLmluc2VydEJlZm9yZShidXR0b25Db250YWluZXIsIHRoaXMubW9kYWxFbC5jaGlsZE5vZGVzWzBdKVxuICAgICAgICBzdXBlci5vbk9wZW4oKVxuICAgIH1cblxuICAgIGFzeW5jIHJlcGxhY2VWYWx1ZXMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnNlbGVjdGVkT3B0aW9ucztcbiAgICAgICAgaWYgKHRoaXMubGluZU51bWJlciA9PSAtMSkge1xuICAgICAgICAgICAgYXdhaXQgcmVwbGFjZVZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIG9wdGlvbnMuam9pbihcIixcIikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyZWRWYWx1ZXMgPSAhdGhpcy5pbkZyb250bWF0dGVyID8gb3B0aW9ucy5qb2luKFwiLFwiKSA6IG9wdGlvbnMubGVuZ3RoID4gMSA/IGBbJHtvcHRpb25zLmpvaW4oXCIsIFwiKX1dYCA6IG9wdGlvbnNbMF1cbiAgICAgICAgICAgIGF3YWl0IGluc2VydFZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIHJlbmRlcmVkVmFsdWVzLCB0aGlzLmxpbmVOdW1iZXIsIHRoaXMuaW5Gcm9udG1hdHRlciwgdGhpcy5hZnRlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBhc3luYyBjbGVhclZhbHVlcygpIHtcbiAgICAgICAgaWYgKHRoaXMubGluZU51bWJlciA9PSAtMSkge1xuICAgICAgICAgICAgYXdhaXQgcmVwbGFjZVZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIFwiXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgaW5zZXJ0VmFsdWVzKHRoaXMuYXBwLCB0aGlzLmZpbGUsIHRoaXMuZmllbGQubmFtZSwgXCJcIiwgdGhpcy5saW5lTnVtYmVyLCB0aGlzLmluRnJvbnRtYXR0ZXIsIHRoaXMuYWZ0ZXIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJlbmRlclNlbGVjdGVkKCkge1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgY2hvb3NlciA9IHRoaXMuY2hvb3NlclxuICAgICAgICBjb25zdCBzdWdnZXN0aW9uczogSFRNTERpdkVsZW1lbnRbXSA9IGNob29zZXIuc3VnZ2VzdGlvbnNcbiAgICAgICAgY29uc3QgdmFsdWVzOiBzdHJpbmdbXSA9IGNob29zZXIudmFsdWVzXG5cbiAgICAgICAgc3VnZ2VzdGlvbnMuZm9yRWFjaCgocywgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPcHRpb25zLmluY2x1ZGVzKHZhbHVlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICBzLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3RlZFwiKVxuICAgICAgICAgICAgICAgIGlmIChzLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWV0YWRhdGEtbWVudS1jb21tYW5kLXN1Z2dlc3QtaWNvblwiKS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpY29uQ29udGFpbmVyID0gcy5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS1jb21tYW5kLXN1Z2dlc3QtaWNvblwiIH0pXG4gICAgICAgICAgICAgICAgICAgIHNldEljb24oaWNvbkNvbnRhaW5lciwgXCJjaGVjay1jaXJjbGVcIilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHMucmVtb3ZlQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXZhbHVlLXNlbGVjdGVkXCIpXG4gICAgICAgICAgICAgICAgcy5xdWVyeVNlbGVjdG9yQWxsKFwiLm1ldGFkYXRhLW1lbnUtY29tbWFuZC1zdWdnZXN0LWljb25cIikuZm9yRWFjaChpY29uID0+IGljb24ucmVtb3ZlKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuICAgIGFzeW5jIGdldFN1Z2dlc3Rpb25zKHF1ZXJ5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIGNvbnN0IGxpc3ROb3RlVmFsdWVzID0gYXdhaXQgRmllbGRTZXR0aW5nLmdldFZhbHVlc0xpc3RGcm9tTm90ZSh0aGlzLmZpZWxkLnZhbHVlc0xpc3ROb3RlUGF0aCwgdGhpcy5hcHApXG4gICAgICAgIGlmIChsaXN0Tm90ZVZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZmllbGQub3B0aW9ucykuZmlsdGVyKG8gPT4gby50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3ROb3RlVmFsdWVzLmZpbHRlcihvID0+IG8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlclN1Z2dlc3Rpb24odmFsdWU6IHN0cmluZywgZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGVsLnNldFRleHQodmFsdWUpXG4gICAgICAgIGVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS12YWx1ZS1zdWdnZXN0ZXItdmFsdWUtY29udGFpbmVyXCIpXG4gICAgICAgIGNvbnN0IHNwYWNlciA9IHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtdmFsdWUtc3VnZ2VzdGVyLXZhbHVlLWNvbnRhaW5lci1zcGFjZXJcIiB9KVxuICAgICAgICBlbC5hcHBlbmRDaGlsZChzcGFjZXIpXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkT3B0aW9ucy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3RlZFwiKVxuICAgICAgICAgICAgY29uc3QgaWNvbkNvbnRhaW5lciA9IGVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LWNvbW1hbmQtc3VnZ2VzdC1pY29uXCIgfSlcbiAgICAgICAgICAgIHNldEljb24oaWNvbkNvbnRhaW5lciwgXCJjaGVjay1jaXJjbGVcIilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlucHV0RWwuZm9jdXMoKVxuICAgIH1cblxuICAgIHNlbGVjdFN1Z2dlc3Rpb24odmFsdWU6IHN0cmluZywgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE9wdGlvbnMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9ucy5yZW1vdmUodmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9ucy5wdXNoKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVuZGVyU2VsZWN0ZWQoKVxuICAgIH1cblxuICAgIG9uQ2hvb3NlU3VnZ2VzdGlvbihpdGVtOiBzdHJpbmcsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcblxuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgTXVsdGlTZWxlY3RNb2RhbCBleHRlbmRzIE1vZGFsIHtcblxuICAgIHByaXZhdGUgZmlsZTogVEZpbGU7XG4gICAgcHJpdmF0ZSBmaWVsZDogRmllbGQ7XG4gICAgcHJpdmF0ZSBvcHRpb25zOiBBcnJheTxzdHJpbmc+O1xuICAgIHByaXZhdGUgbGluZU51bWJlcjogbnVtYmVyO1xuICAgIHByaXZhdGUgaW5Gcm9udG1hdHRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIGFmdGVyOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBmaWVsZDogRmllbGQsIGluaXRpYWxPcHRpb25zOiBzdHJpbmcsIGxpbmVOdW1iZXI6IG51bWJlciA9IC0xLCBpbkZyb250TWF0dGVyOiBib29sZWFuID0gZmFsc2UsIGFmdGVyOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgaWYgKGluaXRpYWxPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoaW5pdGlhbE9wdGlvbnMudG9TdHJpbmcoKS5zdGFydHNXaXRoKFwiW1tcIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBpbml0aWFsT3B0aW9ucy5zcGxpdChcIixcIikubWFwKGl0ZW0gPT4gaXRlbS50cmltKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBpbml0aWFsT3B0aW9ucy50b1N0cmluZygpLnJlcGxhY2UoL15cXFsoLiopXFxdJC8sIFwiJDFcIikuc3BsaXQoXCIsXCIpLm1hcChpdGVtID0+IGl0ZW0udHJpbSgpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBbXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZU51bWJlcjtcbiAgICAgICAgdGhpcy5pbkZyb250bWF0dGVyID0gaW5Gcm9udE1hdHRlcjtcbiAgICAgICAgdGhpcy5hZnRlciA9IGFmdGVyO1xuICAgIH07XG5cbiAgICBhc3luYyBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51XCIpO1xuXG4gICAgICAgIGNvbnN0IHZhbHVlR3JpZCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1ncmlkXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGxpc3ROb3RlVmFsdWVzID0gYXdhaXQgRmllbGRTZXR0aW5nLmdldFZhbHVlc0xpc3RGcm9tTm90ZSh0aGlzLmZpZWxkLnZhbHVlc0xpc3ROb3RlUGF0aCwgdGhpcy5hcHApXG4gICAgICAgIGF3YWl0IHRoaXMucG9wdWxhdGVWYWx1ZXNHcmlkKHZhbHVlR3JpZCwgbGlzdE5vdGVWYWx1ZXMpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGFzeW5jIHBvcHVsYXRlVmFsdWVzR3JpZCh2YWx1ZUdyaWQ6IEhUTUxEaXZFbGVtZW50LCBsaXN0Tm90ZVZhbHVlczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGxpc3ROb3RlVmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5maWVsZC5vcHRpb25zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJlc2V0VmFsdWUgPSB0aGlzLmZpZWxkLm9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkVmFsdWVUb2dnbGVyKHZhbHVlR3JpZCwgcHJlc2V0VmFsdWUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgbGlzdE5vdGVWYWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkVmFsdWVUb2dnbGVyKHZhbHVlR3JpZCwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZm9vdGVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtdmFsdWUtZ3JpZC1mb290ZXJcIiB9KTtcbiAgICAgICAgY29uc3Qgc2F2ZUJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQoZm9vdGVyKTtcbiAgICAgICAgc2F2ZUJ1dHRvbi5zZXRJY29uKFwiY2hlY2ttYXJrXCIpO1xuICAgICAgICBzYXZlQnV0dG9uLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubGluZU51bWJlciA9PSAtMSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHJlcGxhY2VWYWx1ZXModGhpcy5hcHAsIHRoaXMuZmlsZSwgdGhpcy5maWVsZC5uYW1lLCB0aGlzLm9wdGlvbnMuam9pbihcIixcIikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJlZFZhbHVlcyA9ICF0aGlzLmluRnJvbnRtYXR0ZXIgPyB0aGlzLm9wdGlvbnMuam9pbihcIixcIikgOiB0aGlzLm9wdGlvbnMubGVuZ3RoID4gMSA/IGBbJHt0aGlzLm9wdGlvbnMuam9pbihcIiwgXCIpfV1gIDogdGhpcy5vcHRpb25zWzBdXG4gICAgICAgICAgICAgICAgYXdhaXQgaW5zZXJ0VmFsdWVzKHRoaXMuYXBwLCB0aGlzLmZpbGUsIHRoaXMuZmllbGQubmFtZSwgcmVuZGVyZWRWYWx1ZXMsIHRoaXMubGluZU51bWJlciwgdGhpcy5pbkZyb250bWF0dGVyLCB0aGlzLmFmdGVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQoZm9vdGVyKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLnNldEljb24oXCJjcm9zc1wiKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLm9uQ2xpY2soKCkgPT4gdGhpcy5jbG9zZSgpKTtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgc2F2ZUJ1dHRvbi5idXR0b25FbC5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH07XG5cbiAgICBwcml2YXRlIGJ1aWxkVmFsdWVUb2dnbGVyKHZhbHVlR3JpZDogSFRNTERpdkVsZW1lbnQsIHByZXNldE9wdGlvbjogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlU2VsZWN0b3JDb250YWluZXIgPSB2YWx1ZUdyaWQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGNsczogXCJtZXRhZGF0YS1tZW51LXZhbHVlLXNlbGVjdG9yLWNvbnRhaW5lclwiXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB2YWx1ZVRvZ2dsZXJDb250YWluZXIgPSB2YWx1ZVNlbGVjdG9yQ29udGFpbmVyLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3Rvci10b2dnbGVyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHZhbHVlVG9nZ2xlciA9IG5ldyBUb2dnbGVDb21wb25lbnQodmFsdWVUb2dnbGVyQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZvckVhY2gob3B0aW9ucyA9PiB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PSBwcmVzZXRPcHRpb24pIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVRvZ2dsZXIuc2V0VmFsdWUodHJ1ZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICB2YWx1ZVRvZ2dsZXIub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlICYmICF0aGlzLm9wdGlvbnMuaW5jbHVkZXMocHJlc2V0T3B0aW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wdXNoKHByZXNldE9wdGlvbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yZW1vdmUocHJlc2V0T3B0aW9uKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB2YWx1ZUxhYmVsID0gdmFsdWVTZWxlY3RvckNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3Rvci1sYWJlbFwiIH0pO1xuICAgICAgICB2YWx1ZUxhYmVsLnNldFRleHQocHJlc2V0T3B0aW9uKTtcbiAgICB9O1xufTsiLCAiaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IHsgQXBwLCBNZW51LCBOb3RpY2UsIHNldEljb24sIFRleHRBcmVhQ29tcG9uZW50LCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbCBmcm9tIFwic3JjL29wdGlvbnMvRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsXCI7XG5pbXBvcnQgU2luZ2xlRmlsZU1vZGFsIGZyb20gXCJzcmMvb3B0aW9uTW9kYWxzL2ZpZWxkcy9TaW5nbGVGaWxlTW9kYWxcIjtcbmltcG9ydCBGaWVsZFNldHRpbmdzTW9kYWwgZnJvbSBcInNyYy9zZXR0aW5ncy9GaWVsZFNldHRpbmdzTW9kYWxcIjtcbmltcG9ydCB7IEZpZWxkSWNvbiwgRmllbGRUeXBlIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcIi4uL0ZpZWxkXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIsIFNldHRpbmdMb2NhdGlvbiB9IGZyb20gXCIuLi9GaWVsZE1hbmFnZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZUZpZWxkIGV4dGVuZHMgRmllbGRNYW5hZ2VyIHtcblxuICAgIHByaXZhdGUgZmlsZVZhbGlkYXRvckZpZWxkOiBIVE1MRGl2RWxlbWVudFxuICAgIHByaXZhdGUgZHZRdWVyeVN0cmluZzogVGV4dEFyZWFDb21wb25lbnRcblxuICAgIGNvbnN0cnVjdG9yKGZpZWxkOiBGaWVsZCkge1xuICAgICAgICBzdXBlcihmaWVsZCwgRmllbGRUeXBlLkZpbGUpXG4gICAgfVxuXG4gICAgZ2V0RmlsZXMgPSAoKTogVEZpbGVbXSA9PiB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBnZXRSZXN1bHRzID0gKGFwaTogRGF0YXZpZXdQbHVnaW5bXCJhcGlcIl0pID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgRnVuY3Rpb24oXCJkdlwiLCBgcmV0dXJuICR7dGhpcy5maWVsZC5vcHRpb25zLmR2UXVlcnlTdHJpbmd9YCkpKGFwaSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgV3JvbmcgcXVlcnkgZm9yIGZpZWxkIDwke3RoaXMuZmllbGQubmFtZX0+XFxuY2hlY2sgeW91ciBzZXR0aW5nc2AsIDMwMDApXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRhdGF2aWV3ID0gYXBwLnBsdWdpbnMucGx1Z2luc1tcImRhdGF2aWV3XCJdXG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICBpZiAodGhpcy5maWVsZC5vcHRpb25zLmR2UXVlcnlTdHJpbmcgJiYgZGF0YXZpZXc/LnNldHRpbmdzLmVuYWJsZURhdGF2aWV3SnMgJiYgZGF0YXZpZXc/LnNldHRpbmdzLmVuYWJsZUlubGluZURhdGF2aWV3SnMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZXNQYXRoID0gZ2V0UmVzdWx0cyhkYXRhdmlldy5hcGkpLnZhbHVlcy5tYXAoKHY6IGFueSkgPT4gdi5maWxlLnBhdGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkuZmlsdGVyKGYgPT4gZmlsZXNQYXRoLmluY2x1ZGVzKGYucGF0aCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRGaWVsZE9wdGlvbihuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGFwcDogQXBwLCBmaWxlOiBURmlsZSwgbG9jYXRpb246IE1lbnUgfCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgU2luZ2xlRmlsZU1vZGFsKGFwcCwgZmlsZSwgdGhpcy5maWVsZCwgdmFsdWUpXG4gICAgICAgIG1vZGFsLnRpdGxlRWwuc2V0VGV4dChcIlNlbGVjdCB2YWx1ZVwiKTtcbiAgICAgICAgaWYgKEZpbGVGaWVsZC5pc01lbnUobG9jYXRpb24pKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShgVXBkYXRlICR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICBpdGVtLnNldEljb24oRmllbGRJY29uW0ZpZWxkVHlwZS5GaWxlXSk7XG4gICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKCgpID0+IG1vZGFsLm9wZW4oKSk7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRTZWN0aW9uKFwibWV0YWRhdGEtbWVudS5maWVsZHNcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChGaWxlRmllbGQuaXNTdWdnZXN0KGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgbG9jYXRpb24ub3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZDogYHVwZGF0ZV8ke25hbWV9YCxcbiAgICAgICAgICAgICAgICBhY3Rpb25MYWJlbDogYDxzcGFuPlVwZGF0ZSA8Yj4ke25hbWV9PC9iPjwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4gbW9kYWwub3BlbigpLFxuICAgICAgICAgICAgICAgIGljb246IEZpZWxkSWNvbltGaWVsZFR5cGUuRmlsZV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNyZWF0ZUFuZE9wZW5GaWVsZE1vZGFsKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgc2VsZWN0ZWRGaWVsZE5hbWU6IHN0cmluZywgdmFsdWU/OiBzdHJpbmcsIGxpbmVOdW1iZXI/OiBudW1iZXIsIGluRnJvbnRtYXR0ZXI/OiBib29sZWFuLCBhZnRlcj86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZmllbGRNb2RhbCA9IG5ldyBTaW5nbGVGaWxlTW9kYWwoYXBwLCBmaWxlLCB0aGlzLmZpZWxkLCB2YWx1ZSwgbGluZU51bWJlciwgaW5Gcm9udG1hdHRlciwgYWZ0ZXIpO1xuICAgICAgICBmaWVsZE1vZGFsLnRpdGxlRWwuc2V0VGV4dChgRW50ZXIgdmFsdWUgZm9yICR7c2VsZWN0ZWRGaWVsZE5hbWV9YCk7XG4gICAgICAgIGZpZWxkTW9kYWwub3BlbigpO1xuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZUR2RmllbGQoXG4gICAgICAgIHBsdWdpbjogTWV0YWRhdGFNZW51LFxuICAgICAgICBkdjogYW55LFxuICAgICAgICBwOiBhbnksXG4gICAgICAgIGZpZWxkQ29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICAgICAgYXR0cnM/OiB7IGNscz86IHN0cmluZywgYXR0cj86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sIG9wdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH1cbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGR2LmVsKCdzcGFuJywgcFt0aGlzLmZpZWxkLm5hbWVdLCBhdHRycyk7XG4gICAgICAgIGNvbnN0IHNlYXJjaEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIilcbiAgICAgICAgc2V0SWNvbihzZWFyY2hCdG4sIEZpZWxkSWNvbltGaWVsZFR5cGUuRmlsZV0pXG4gICAgICAgIHNlYXJjaEJ0bi5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtYnV0dG9uXCIpXG4gICAgICAgIC8qIGVuZCBzcGFjZXIgKi9cbiAgICAgICAgY29uc3Qgc3BhY2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuICAgICAgICBzcGFjZXIuc2V0QXR0cihcImNsYXNzXCIsIFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC1zcGFjZXJcIilcblxuICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwW1wiZmlsZVwiXVtcInBhdGhcIl0pXG4gICAgICAgIGxldCBmaWVsZE1vZGFsOiBTaW5nbGVGaWxlTW9kYWw7XG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICBmaWVsZE1vZGFsID0gbmV3IFNpbmdsZUZpbGVNb2RhbChhcHAsIGZpbGUsIHRoaXMuZmllbGQsIHBbdGhpcy5maWVsZC5uYW1lXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwicGF0aCBkb2Vzbid0IGNvcnJlc3BvbmQgdG8gYSBwcm9wZXIgZmlsZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzZWFyY2hCdG4ub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGZpZWxkTW9kYWwub3BlbigpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWF0dHJzPy5vcHRpb25zPy5hbHdheXNPbikge1xuICAgICAgICAgICAgc2VhcmNoQnRuLmhpZGUoKVxuICAgICAgICAgICAgc3BhY2VyLnNob3coKVxuICAgICAgICAgICAgZmllbGRDb250YWluZXIub25tb3VzZW92ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VhcmNoQnRuLnNob3coKVxuICAgICAgICAgICAgICAgIHNwYWNlci5oaWRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLm9ubW91c2VvdXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VhcmNoQnRuLmhpZGUoKVxuICAgICAgICAgICAgICAgIHNwYWNlci5zaG93KClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGluaXRpYWwgc3RhdGUgKi9cbiAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoZmllbGRWYWx1ZSk7XG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlYXJjaEJ0bik7XG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKHNwYWNlcik7XG4gICAgfVxuXG4gICAgY3JlYXRlRmlsZUNvbnRhaW5lcihwYXJlbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGR2UXVlcnlTdHJpbmdDb250YWluZXIgPSBwYXJlbnRDb250YWluZXIuY3JlYXRlRGl2KCk7XG4gICAgICAgIGR2UXVlcnlTdHJpbmdDb250YWluZXIuY3JlYXRlRWwoXCJzcGFuXCIsIHsgdGV4dDogXCJEYXRhdmlldyBRdWVyeSAob3B0aW9uYWwpXCIsIGNsczogJ21ldGFkYXRhLW1lbnUtZmllbGQtb3B0aW9uJyB9KTtcbiAgICAgICAgdGhpcy5kdlF1ZXJ5U3RyaW5nID0gbmV3IFRleHRBcmVhQ29tcG9uZW50KGR2UXVlcnlTdHJpbmdDb250YWluZXIpO1xuICAgICAgICB0aGlzLmR2UXVlcnlTdHJpbmcuaW5wdXRFbC5jb2xzID0gNTA7XG4gICAgICAgIHRoaXMuZHZRdWVyeVN0cmluZy5pbnB1dEVsLnJvd3MgPSA0O1xuICAgICAgICB0aGlzLmR2UXVlcnlTdHJpbmcuc2V0VmFsdWUodGhpcy5maWVsZC5vcHRpb25zLmR2UXVlcnlTdHJpbmcgfHwgXCJcIik7XG5cbiAgICAgICAgdGhpcy5kdlF1ZXJ5U3RyaW5nLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmllbGQub3B0aW9ucy5kdlF1ZXJ5U3RyaW5nID0gdmFsdWU7XG4gICAgICAgICAgICBGaWVsZFNldHRpbmdzTW9kYWwucmVtb3ZlVmFsaWRhdGlvbkVycm9yKHRoaXMuZHZRdWVyeVN0cmluZyk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY3JlYXRlU2V0dGluZ0NvbnRhaW5lcihwYXJlbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50LCBwbHVnaW46IE1ldGFkYXRhTWVudSwgbG9jYXRpb24/OiBTZXR0aW5nTG9jYXRpb24pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5maWxlVmFsaWRhdG9yRmllbGQgPSBwYXJlbnRDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtbnVtYmVyLW9wdGlvbnNcIiB9KVxuICAgICAgICB0aGlzLmNyZWF0ZUZpbGVDb250YWluZXIodGhpcy5maWxlVmFsaWRhdG9yRmllbGQpXG4gICAgICAgIHRoaXMuZmlsZVZhbGlkYXRvckZpZWxkLmNyZWF0ZURpdih7IGNsczogJ21ldGFkYXRhLW1lbnUtc2VwYXJhdG9yJyB9KS5jcmVhdGVFbChcImhyXCIpO1xuICAgIH1cblxuICAgIGdldE9wdGlvbnNTdHIoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQub3B0aW9ucy5kdlF1ZXJ5U3RyaW5nIHx8IFwiXCI7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVPcHRpb25zKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBhc3luYyB2YWxpZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgYmFzZW5hbWUgPSB2YWx1ZS50cmltKCkucmVwbGFjZSgvXlxcW1xcWy9nLCBcIlwiKS5yZXBsYWNlKC9cXF1cXF0kL2csIFwiXCIpO1xuICAgICAgICByZXR1cm4gISF0aGlzLmdldEZpbGVzKCkubWFwKGYgPT4gZi5iYXNlbmFtZSkuZmluZChpdGVtID0+IGl0ZW0gPT09IGJhc2VuYW1lKTtcbiAgICB9XG59IiwgImltcG9ydCB7IFRGaWxlLCBBcHAsIEZ1enp5U3VnZ2VzdE1vZGFsLCBGdXp6eU1hdGNoLCBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcInNyYy9maWVsZHMvRmllbGRcIjtcbmltcG9ydCB7IHJlcGxhY2VWYWx1ZXMgfSBmcm9tIFwic3JjL2NvbW1hbmRzL3JlcGxhY2VWYWx1ZXNcIjtcbmltcG9ydCB7IGluc2VydFZhbHVlcyB9IGZyb20gXCJzcmMvY29tbWFuZHMvaW5zZXJ0VmFsdWVzXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIgfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcbmltcG9ydCBGaWxlRmllbGQgZnJvbSBcInNyYy9maWVsZHMvZmllbGRNYW5hZ2Vycy9GaWxlRmllbGRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZUZ1enp5U3VnZ2VzdGVyIGV4dGVuZHMgRnV6enlTdWdnZXN0TW9kYWw8VEZpbGU+IHtcblxuICAgIHByaXZhdGUgZmlsZTogVEZpbGU7XG4gICAgcHJpdmF0ZSBmaWVsZDogRmllbGQ7XG4gICAgcHJpdmF0ZSBsaW5lTnVtYmVyOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBpbkZyb250bWF0dGVyOiBib29sZWFuO1xuICAgIHByaXZhdGUgYWZ0ZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBzZWxlY3RlZEZpbGU/OiBURmlsZVxuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBmaWVsZDogRmllbGQsIGluaXRpYWxWYWx1ZU9iamVjdDogYW55LCBsaW5lTnVtYmVyOiBudW1iZXIgPSAtMSwgaW5Gcm9udE1hdHRlcjogYm9vbGVhbiA9IGZhbHNlLCBhZnRlcjogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMuaW5Gcm9udG1hdHRlciA9IGluRnJvbnRNYXR0ZXI7XG4gICAgICAgIHRoaXMuYWZ0ZXIgPSBhZnRlcjtcbiAgICAgICAgY29uc3QgZHZBcGkgPSB0aGlzLmFwcC5wbHVnaW5zLnBsdWdpbnNbXCJkYXRhdmlld1wiXT8uYXBpXG4gICAgICAgIGlmIChkdkFwaSkge1xuICAgICAgICAgICAgaWYgKGR2QXBpLnZhbHVlLmlzTGluayhpbml0aWFsVmFsdWVPYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChpbml0aWFsVmFsdWVPYmplY3QucGF0aClcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB0aGlzLnNlbGVjdGVkRmlsZSA9IGZpbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNlbGVjdGVkRmlsZT8ucGF0aClcbiAgICB9XG5cbiAgICBnZXRJdGVtcygpOiBURmlsZVtdIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVNYW5hZ2VyID0gbmV3IEZpZWxkTWFuYWdlclt0aGlzLmZpZWxkLnR5cGVdKHRoaXMuZmllbGQpO1xuICAgICAgICAgICAgcmV0dXJuIGZpbGVNYW5hZ2VyLmdldEZpbGVzKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB0aHJvdyAoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SXRlbVRleHQoaXRlbTogVEZpbGUpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gaXRlbS5iYXNlbmFtZTtcbiAgICB9XG5cbiAgICByZW5kZXJTdWdnZXN0aW9uKHZhbHVlOiBGdXp6eU1hdGNoPFRGaWxlPiwgZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGVsLnNldFRleHQodmFsdWUuaXRlbS5iYXNlbmFtZSlcbiAgICAgICAgZWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXZhbHVlLXN1Z2dlc3Rlci12YWx1ZS1jb250YWluZXJcIilcbiAgICAgICAgY29uc3Qgc3BhY2VyID0gdGhpcy5jb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1zdWdnZXN0ZXItdmFsdWUtY29udGFpbmVyLXNwYWNlclwiIH0pXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKHNwYWNlcilcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRGaWxlPy5wYXRoID09PSB2YWx1ZS5pdGVtLnBhdGgpIHtcbiAgICAgICAgICAgIGVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3RlZFwiKVxuICAgICAgICAgICAgY29uc3QgaWNvbkNvbnRhaW5lciA9IGVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LWNvbW1hbmQtc3VnZ2VzdC1pY29uXCIgfSlcbiAgICAgICAgICAgIHNldEljb24oaWNvbkNvbnRhaW5lciwgXCJjaGVjay1jaXJjbGVcIilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlucHV0RWwuZm9jdXMoKVxuICAgIH1cblxuXG4gICAgYXN5bmMgb25DaG9vc2VJdGVtKGl0ZW06IFRGaWxlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLmxpbmVOdW1iZXIgPT0gLTEpIHtcbiAgICAgICAgICAgIGF3YWl0IHJlcGxhY2VWYWx1ZXMoXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlLFxuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQubmFtZSxcbiAgICAgICAgICAgICAgICBGaWxlRmllbGQuYnVpbGRNYXJrRG93bkxpbmsodGhpcy5hcHAsIHRoaXMuZmlsZSwgaXRlbS5iYXNlbmFtZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCBpbnNlcnRWYWx1ZXMoXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlLFxuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQubmFtZSxcbiAgICAgICAgICAgICAgICBGaWxlRmllbGQuYnVpbGRNYXJrRG93bkxpbmsodGhpcy5hcHAsIHRoaXMuZmlsZSwgaXRlbS5iYXNlbmFtZSksXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIHRoaXMuaW5Gcm9udG1hdHRlcixcbiAgICAgICAgICAgICAgICB0aGlzLmFmdGVyXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgIH1cblxufSIsICJpbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBBcHAsIE1lbnUsIG1vbWVudCwgc2V0SWNvbiwgVGV4dENvbXBvbmVudCwgVEZpbGUsIFRvZ2dsZUNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbCBmcm9tIFwic3JjL29wdGlvbnMvRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsXCI7XG5pbXBvcnQgRGF0ZU1vZGFsIGZyb20gXCJzcmMvb3B0aW9uTW9kYWxzL2ZpZWxkcy9EYXRlTW9kYWxcIjtcbmltcG9ydCB7IEZpZWxkSWNvbiwgRmllbGRUeXBlIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgRmllbGQgZnJvbSBcIi4uL0ZpZWxkXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIsIFNldHRpbmdMb2NhdGlvbiB9IGZyb20gXCIuLi9GaWVsZE1hbmFnZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0ZUZpZWxkIGV4dGVuZHMgRmllbGRNYW5hZ2VyIHtcblxuICAgIHByaXZhdGUgZGF0ZVZhbGlkYXRvckZpZWxkOiBIVE1MRGl2RWxlbWVudFxuICAgIHB1YmxpYyBkZWZhdWx0RGF0ZUZvcm1hdDogc3RyaW5nID0gXCJZWVlZLU1NLUREXCJcblxuICAgIGNvbnN0cnVjdG9yKGZpZWxkOiBGaWVsZCkge1xuICAgICAgICBzdXBlcihmaWVsZCwgRmllbGRUeXBlLkRhdGUpXG4gICAgfVxuXG4gICAgYWRkRmllbGRPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBhcHA6IEFwcCwgZmlsZTogVEZpbGUsIGxvY2F0aW9uOiBNZW51IHwgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IERhdGVNb2RhbChhcHAsIGZpbGUsIHRoaXMuZmllbGQsIHZhbHVlKTtcbiAgICAgICAgbW9kYWwudGl0bGVFbC5zZXRUZXh0KGBDaGFuZ2UgZGF0ZSBmb3IgPCR7bmFtZX0+YCk7XG4gICAgICAgIGlmIChEYXRlRmllbGQuaXNNZW51KGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgbG9jYXRpb24uYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoYFVwZGF0ZSA8JHtuYW1lfT5gKTtcbiAgICAgICAgICAgICAgICBpdGVtLnNldEljb24oRmllbGRJY29uW0ZpZWxkVHlwZS5EYXRlXSk7XG4gICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKCgpID0+IG1vZGFsLm9wZW4oKSk7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRTZWN0aW9uKFwibWV0YWRhdGEtbWVudS5maWVsZHNcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKERhdGVGaWVsZC5pc1N1Z2dlc3QobG9jYXRpb24pKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5vcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkOiBgdXBkYXRlXyR7bmFtZX1gLFxuICAgICAgICAgICAgICAgIGFjdGlvbkxhYmVsOiBgPHNwYW4+VXBkYXRlIDxiPiR7bmFtZX08L2I+PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiBtb2RhbC5vcGVuKCksXG4gICAgICAgICAgICAgICAgaWNvbjogRmllbGRJY29uW0ZpZWxkVHlwZS5EYXRlXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjcmVhdGVBbmRPcGVuRmllbGRNb2RhbChhcHA6IEFwcCwgZmlsZTogVEZpbGUsIHNlbGVjdGVkRmllbGROYW1lOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nLCBsaW5lTnVtYmVyPzogbnVtYmVyLCBpbkZyb250bWF0dGVyPzogYm9vbGVhbiwgYWZ0ZXI/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZpZWxkTW9kYWwgPSBuZXcgRGF0ZU1vZGFsKGFwcCwgZmlsZSwgdGhpcy5maWVsZCwgdmFsdWUgfHwgXCJcIiwgbGluZU51bWJlciwgaW5Gcm9udG1hdHRlciwgYWZ0ZXIpO1xuICAgICAgICBmaWVsZE1vZGFsLnRpdGxlRWwuc2V0VGV4dChgRW50ZXIgZGF0ZSBmb3IgJHtzZWxlY3RlZEZpZWxkTmFtZX1gKTtcbiAgICAgICAgZmllbGRNb2RhbC5vcGVuKCk7XG4gICAgfVxuXG4gICAgY3JlYXRlRGF0ZUNvbnRhaW5lcihwYXJlbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5maWVsZC5vcHRpb25zLmRhdGVGb3JtYXQpIHRoaXMuZmllbGQub3B0aW9ucy5kYXRlRm9ybWF0ID0gdGhpcy5kZWZhdWx0RGF0ZUZvcm1hdFxuICAgICAgICBpZiAoIXRoaXMuZmllbGQub3B0aW9ucy5kZWZhdWx0SW5zZXJ0QXNMaW5rKSB0aGlzLmZpZWxkLm9wdGlvbnMuZGVmYXVsdEluc2VydEFzTGluayA9IFwiZmFsc2VcIlxuICAgICAgICBjb25zdCBkYXRlRm9ybWF0Q29udGFpbmVyID0gcGFyZW50Q29udGFpbmVyLmNyZWF0ZURpdigpO1xuICAgICAgICBkYXRlRm9ybWF0Q29udGFpbmVyLmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IFwiRGF0ZSBmb3JtYXRcIiwgY2xzOiAnbWV0YWRhdGEtbWVudS1maWVsZC1vcHRpb24nIH0pXG4gICAgICAgIGNvbnN0IGRhdGVGb3JtYXRJbnB1dCA9IG5ldyBUZXh0Q29tcG9uZW50KGRhdGVGb3JtYXRDb250YWluZXIpXG4gICAgICAgIGRhdGVGb3JtYXRJbnB1dC5zZXRWYWx1ZSh0aGlzLmZpZWxkLm9wdGlvbnMuZGF0ZUZvcm1hdClcbiAgICAgICAgY29uc3QgZGF0ZUV4YW1wbGUgPSBkYXRlRm9ybWF0Q29udGFpbmVyLmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IFwiXCIsIGNsczogJ21ldGFkYXRhLW1lbnUtZmllbGQtb3B0aW9uJyB9KVxuICAgICAgICBkYXRlRXhhbXBsZS5zZXRUZXh0KGBleGFtcGxlOiAke21vbWVudCgpLmZvcm1hdChkYXRlRm9ybWF0SW5wdXQuZ2V0VmFsdWUoKSl9YClcbiAgICAgICAgZGF0ZUZvcm1hdElucHV0Lm9uQ2hhbmdlKCh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnMuZGF0ZUZvcm1hdCA9IHZhbHVlXG4gICAgICAgICAgICBkYXRlRXhhbXBsZS5zZXRUZXh0KGBleGFtcGxlOiAke21vbWVudCgpLmZvcm1hdCh2YWx1ZSl9YCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRhdGVMaW5rUGF0aENvbnRhaW5lciA9IHBhcmVudENvbnRhaW5lci5jcmVhdGVEaXYoKTtcbiAgICAgICAgZGF0ZUxpbmtQYXRoQ29udGFpbmVyLmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IFwiTGluayBwYXRoIChvcHRpb25hbClcIiwgY2xzOiAnbWV0YWRhdGEtbWVudS1maWVsZC1vcHRpb24nIH0pXG4gICAgICAgIGNvbnN0IGRhdGVMaW5rUGF0aElucHV0ID0gbmV3IFRleHRDb21wb25lbnQoZGF0ZUxpbmtQYXRoQ29udGFpbmVyKVxuICAgICAgICBkYXRlTGlua1BhdGhJbnB1dC5zZXRWYWx1ZSh0aGlzLmZpZWxkLm9wdGlvbnMubGlua1BhdGgpXG4gICAgICAgIGRhdGVMaW5rUGF0aElucHV0Lm9uQ2hhbmdlKCh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnMubGlua1BhdGggPSB2YWx1ZS5lbmRzV2l0aChcIi9cIikgPyB2YWx1ZSA6IHZhbHVlICsgXCIvXCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRJbnNlcnRBc0xpbmtDb250YWluZXIgPSBwYXJlbnRDb250YWluZXIuY3JlYXRlRGl2KCk7XG4gICAgICAgIGRlZmF1bHRJbnNlcnRBc0xpbmtDb250YWluZXIuY3JlYXRlRWwoXCJzcGFuXCIsIHsgdGV4dDogXCJJbnNlcnQgYXMgbGluayBieSBkZWZhdWx0XCIsIGNsczogJ21ldGFkYXRhLW1lbnUtZmllbGQtb3B0aW9uJyB9KTtcbiAgICAgICAgY29uc3QgZGVmYXVsdEluc2VydEFzTGluayA9IG5ldyBUb2dnbGVDb21wb25lbnQoZGVmYXVsdEluc2VydEFzTGlua0NvbnRhaW5lcik7XG4gICAgICAgIGRlZmF1bHRJbnNlcnRBc0xpbmsuc2V0VmFsdWUoRGF0ZUZpZWxkLnN0cmluZ1RvQm9vbGVhbih0aGlzLmZpZWxkLm9wdGlvbnMuZGVmYXVsdEluc2VydEFzTGluaykpXG4gICAgICAgIGRlZmF1bHRJbnNlcnRBc0xpbmsub25DaGFuZ2UoKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnMuZGVmYXVsdEluc2VydEFzTGluayA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZVNldHRpbmdDb250YWluZXIocGFyZW50Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUsIGxvY2F0aW9uPzogU2V0dGluZ0xvY2F0aW9uKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGF0ZVZhbGlkYXRvckZpZWxkID0gcGFyZW50Q29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LW51bWJlci1vcHRpb25zXCIgfSk7XG4gICAgICAgIHRoaXMuY3JlYXRlRGF0ZUNvbnRhaW5lcih0aGlzLmRhdGVWYWxpZGF0b3JGaWVsZCk7XG4gICAgICAgIHRoaXMuZGF0ZVZhbGlkYXRvckZpZWxkLmNyZWF0ZURpdih7IGNsczogJ21ldGFkYXRhLW1lbnUtc2VwYXJhdG9yJyB9KS5jcmVhdGVFbChcImhyXCIpO1xuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZUR2RmllbGQoXG4gICAgICAgIHBsdWdpbjogTWV0YWRhdGFNZW51LFxuICAgICAgICBkdjogYW55LFxuICAgICAgICBwOiBhbnksXG4gICAgICAgIGZpZWxkQ29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICAgICAgYXR0cnM/OiB7IGNscz86IHN0cmluZyB8IHVuZGVmaW5lZDsgYXR0cj86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQ7IG9wdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgdW5kZWZpbmVkOyB9XG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGZpZWxkVmFsdWUgPSBkdi5lbCgnc3BhbicsIHBbdGhpcy5maWVsZC5uYW1lXSwgYXR0cnMpO1xuICAgICAgICBjb25zdCBkYXRlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKVxuICAgICAgICBzZXRJY29uKGRhdGVCdG4sIEZpZWxkSWNvbltGaWVsZFR5cGUuRGF0ZV0pXG4gICAgICAgIGRhdGVCdG4uYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLWJ1dHRvblwiKVxuICAgICAgICAvKiBlbmQgc3BhY2VyICovXG4gICAgICAgIGNvbnN0IHNwYWNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgc3BhY2VyLnNldEF0dHIoXCJjbGFzc1wiLCBcIm1ldGFkYXRhLW1lbnUtZHYtZmllbGQtc3BhY2VyXCIpXG5cbiAgICAgICAgY29uc3QgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocFtcImZpbGVcIl1bXCJwYXRoXCJdKVxuICAgICAgICBsZXQgZmllbGRNb2RhbDogRGF0ZU1vZGFsO1xuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGZpbGUuZXh0ZW5zaW9uID09IFwibWRcIikge1xuICAgICAgICAgICAgaWYgKHBbdGhpcy5maWVsZC5uYW1lXSAmJiBwW3RoaXMuZmllbGQubmFtZV0uaGFzT3duUHJvcGVydHkoXCJwYXRoXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZUZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBbdGhpcy5maWVsZC5uYW1lXSlcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZUZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiBkYXRlRmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkTW9kYWwgPSBuZXcgRGF0ZU1vZGFsKGFwcCwgZmlsZSwgdGhpcy5maWVsZCwgZGF0ZUZpbGUubmFtZSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZE1vZGFsID0gbmV3IERhdGVNb2RhbChhcHAsIGZpbGUsIHRoaXMuZmllbGQsIHBbdGhpcy5maWVsZC5uYW1lXS5wYXRoLnNwbGl0KFwiL1wiKS5sYXN0KCkucmVwbGFjZShcIi5tZFwiLCBcIlwiKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBbdGhpcy5maWVsZC5uYW1lXSkge1xuICAgICAgICAgICAgICAgIGZpZWxkTW9kYWwgPSBuZXcgRGF0ZU1vZGFsKGFwcCwgZmlsZSwgdGhpcy5maWVsZCwgcFt0aGlzLmZpZWxkLm5hbWVdKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWVsZE1vZGFsID0gbmV3IERhdGVNb2RhbChhcHAsIGZpbGUsIHRoaXMuZmllbGQsIFwiXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInBhdGggZG9lc24ndCBjb3JyZXNwb25kIHRvIGEgcHJvcGVyIGZpbGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgZmllbGRNb2RhbC5vbkNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgZmllbGRNb2RhbC5jb250ZW50RWwuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBkYXRlQnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBmaWVsZE1vZGFsLm9wZW4oKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhdHRycz8ub3B0aW9ucz8uYWx3YXlzT24pIHtcbiAgICAgICAgICAgIGRhdGVCdG4uaGlkZSgpXG4gICAgICAgICAgICBzcGFjZXIuc2hvdygpXG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5vbm1vdXNlb3ZlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBkYXRlQnRuLnNob3coKVxuICAgICAgICAgICAgICAgIHNwYWNlci5oaWRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLm9ubW91c2VvdXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGF0ZUJ0bi5oaWRlKClcbiAgICAgICAgICAgICAgICBzcGFjZXIuc2hvdygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpbml0aWFsIHN0YXRlICovXG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGZpZWxkVmFsdWUpO1xuICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChkYXRlQnRuKTtcbiAgICAgICAgZmllbGRDb250YWluZXIuYXBwZW5kQ2hpbGQoc3BhY2VyKTtcbiAgICB9XG5cbiAgICBnZXRPcHRpb25zU3RyKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLm9wdGlvbnMuZGF0ZUZvcm1hdDtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZU9wdGlvbnMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGFzeW5jIHZhbGlkYXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gbW9tZW50KHZhbHVlLnJlcGxhY2UoL15cXFtcXFsvZywgXCJcIikucmVwbGFjZSgvXFxdXFxdJC9nLCBcIlwiKS5zcGxpdChcInxcIikuZmlyc3QoKT8uc3BsaXQoXCIvXCIpLmxhc3QoKSwgdGhpcy5maWVsZC5vcHRpb25zLmRhdGVGb3JtYXQpLmlzVmFsaWQoKVxuICAgIH1cbn0iLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgVGV4dENvbXBvbmVudCwgVEZpbGUsIFRvZ2dsZUNvbXBvbmVudCwgQnV0dG9uQ29tcG9uZW50LCBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBpbnNlcnRWYWx1ZXMgfSBmcm9tIFwic3JjL2NvbW1hbmRzL2luc2VydFZhbHVlc1wiO1xuaW1wb3J0IHsgcmVwbGFjZVZhbHVlcyB9IGZyb20gXCJzcmMvY29tbWFuZHMvcmVwbGFjZVZhbHVlc1wiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCJzcmMvZmllbGRzL0ZpZWxkXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIgfSBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZE1hbmFnZXJcIjtcbmltcG9ydCB7IG1vbWVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IGZsYXRwaWNrciBmcm9tIFwiZmxhdHBpY2tyXCI7XG5pbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBGaWVsZEljb24sIEZpZWxkVHlwZSB9IGZyb20gXCJzcmMvdHlwZXMvZmllbGRUeXBlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRlTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cbiAgICBwcml2YXRlIGZpbGU6IFRGaWxlO1xuICAgIHByaXZhdGUgdmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIGxpbmVOdW1iZXI6IG51bWJlcjtcbiAgICBwcml2YXRlIGluRnJvbnRtYXR0ZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBhZnRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIGluc2VydEFzTGluazogYm9vbGVhbjtcbiAgICBwcml2YXRlIGZpZWxkOiBGaWVsZDtcbiAgICBwcml2YXRlIGlucHV0RWw6IFRleHRDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSBlcnJvckZpZWxkOiBIVE1MRGl2RWxlbWVudDtcbiAgICBwcml2YXRlIGZvcm1hdDogc3RyaW5nO1xuICAgIHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZmlsZTogVEZpbGUsIGZpZWxkOiBGaWVsZCwgdmFsdWU6IHN0cmluZywgbGluZU51bWJlcjogbnVtYmVyID0gLTEsIGluRnJvbnRNYXR0ZXI6IGJvb2xlYW4gPSBmYWxzZSwgYWZ0ZXI6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWUgPyB2YWx1ZS50b1N0cmluZygpLnJlcGxhY2UoL15cXFtcXFsvZywgXCJcIikucmVwbGFjZSgvXFxdXFxdJC9nLCBcIlwiKSA6IFwiXCI7XG4gICAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmVOdW1iZXI7XG4gICAgICAgIHRoaXMuaW5Gcm9udG1hdHRlciA9IGluRnJvbnRNYXR0ZXI7XG4gICAgICAgIHRoaXMuYWZ0ZXIgPSBhZnRlcjtcbiAgICAgICAgdGhpcy5pbnNlcnRBc0xpbmsgPSBGaWVsZE1hbmFnZXIuc3RyaW5nVG9Cb29sZWFuKHRoaXMuZmllbGQub3B0aW9ucy5kZWZhdWx0SW5zZXJ0QXNMaW5rIHx8IFwiZmFsc2VcIikgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gdGhpcy5maWVsZC5vcHRpb25zLmRhdGVGb3JtYXQgfHwgdGhpcy5maWVsZC5vcHRpb25zLmRlZmF1bHREYXRlRm9ybWF0O1xuICAgICAgICBpZiAodGhpcy5hcHAucGx1Z2lucy5lbmFibGVkUGx1Z2lucy5oYXMoXCJtZXRhZGF0YS1tZW51XCIpKSB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbiA9IHRoaXMuYXBwLnBsdWdpbnMucGx1Z2luc1tcIm1ldGFkYXRhLW1lbnVcIl1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkQ29udGFpbmVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtbW9kYWwtdmFsdWVcIiB9KTtcbiAgICAgICAgdGhpcy5idWlsZEZvcm0oZmllbGRDb250YWluZXIpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGJ1aWxkRm9ybShwYXJlbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50KSB7XG5cbiAgICAgICAgY29uc3QgZm9ybSA9IHBhcmVudENvbnRhaW5lci5jcmVhdGVFbChcImZvcm1cIik7XG4gICAgICAgIGZvcm0udHlwZSA9IFwic3VibWl0XCI7XG4gICAgICAgIHRoaXMuYnVpbGRJbnB1dEVsKGZvcm0pO1xuICAgICAgICB0aGlzLmVycm9yRmllbGQgPSBmb3JtLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtbW9kYWwtdmFsdWUtZXJyb3ItZmllbGRcIiB9KTtcbiAgICAgICAgdGhpcy5lcnJvckZpZWxkLmhpZGUoKTtcbiAgICAgICAgdGhpcy5idWlsZEluc2VydEFzTGlua1RvZ2dsZXIoZm9ybSk7XG4gICAgICAgIGNvbnN0IHNhdmVCdG5Db250YWluZXIgPSBmb3JtLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtdmFsdWUtZ3JpZC1mb290ZXJcIiB9KTtcbiAgICAgICAgY29uc3Qgc2F2ZUJ0biA9IG5ldyBCdXR0b25Db21wb25lbnQoc2F2ZUJ0bkNvbnRhaW5lcilcbiAgICAgICAgc2F2ZUJ0bi5zZXRJY29uKFwiY2hlY2ttYXJrXCIpXG5cbiAgICAgICAgZm9ybS5vbnN1Ym1pdCA9IGFzeW5jIChlOiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbGV0IG5ld1ZhbHVlOiBtb21lbnQuTW9tZW50O1xuICAgICAgICAgICAgLy90cnkgbmF0dXJhbCBsYW5ndWFnZSBkYXRlXG4gICAgICAgICAgICBpZiAoYXBwLnBsdWdpbnMuZW5hYmxlZFBsdWdpbnMuaGFzKCdubGRhdGVzLW9ic2lkaWFuJykpIHtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBubGRhdGVzID0gYXBwLnBsdWdpbnMucGx1Z2luc1snbmxkYXRlcy1vYnNpZGlhbiddO1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IG5sZGF0ZXMucGFyc2VEYXRlKHRoaXMudmFsdWUpLm1vbWVudDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IG1vbWVudCh0aGlzLnZhbHVlLCB0aGlzLmZvcm1hdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IG1vbWVudCh0aGlzLnZhbHVlLCB0aGlzLmZvcm1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlua1BhdGggPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdCh0aGlzLmZpZWxkLm9wdGlvbnMubGlua1BhdGggfHwgXCJcIiArIG5ld1ZhbHVlLmZvcm1hdCh0aGlzLmZvcm1hdCksIHRoaXMuZmlsZS5wYXRoKVxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gdGhpcy5pbnNlcnRBc0xpbmsgPyBgW1ske3RoaXMuZmllbGQub3B0aW9ucy5saW5rUGF0aCB8fCBcIlwifSR7bmV3VmFsdWUuZm9ybWF0KHRoaXMuZm9ybWF0KX0ke2xpbmtQYXRoID8gXCJ8XCIgKyBsaW5rUGF0aC5iYXNlbmFtZSA6IFwiXCJ9XV1gIDogbmV3VmFsdWUuZm9ybWF0KHRoaXMuZm9ybWF0KVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmVOdW1iZXIgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcmVwbGFjZVZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIGZvcm1hdHRlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBpbnNlcnRWYWx1ZXModGhpcy5hcHAsIHRoaXMuZmlsZSwgdGhpcy5maWVsZC5uYW1lLCBmb3JtYXR0ZWRWYWx1ZSwgdGhpcy5saW5lTnVtYmVyLCB0aGlzLmluRnJvbnRtYXR0ZXIsIHRoaXMuYWZ0ZXIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmVOdW1iZXIgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcmVwbGFjZVZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIFwiXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGluc2VydFZhbHVlcyh0aGlzLmFwcCwgdGhpcy5maWxlLCB0aGlzLmZpZWxkLm5hbWUsIFwiXCIsIHRoaXMubGluZU51bWJlciwgdGhpcy5pbkZyb250bWF0dGVyLCB0aGlzLmFmdGVyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yRmllbGQuc2hvdygpO1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JGaWVsZC5zZXRUZXh0KGB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgZGF0ZWApXG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dEVsLmlucHV0RWwuYWRkQ2xhc3MoXCJpcy1pbnZhbGlkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidWlsZEluc2VydEFzTGlua1RvZ2dsZXIoZm9ybTogSFRNTEZvcm1FbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZXJDb250YWluZXIgPSBmb3JtLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LXRvZ2dsZXItd2l0aC1sYWJlbFwiIH0pXG4gICAgICAgIGNvbnN0IHRvZ2dsZXJDb250YWluZXJMYWJlbCA9IHRvZ2dsZXJDb250YWluZXIuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGNsczogXCJtZXRhZGF0YS1tZW51LXRvZ2dsZXItbGFiZWxcIlxuICAgICAgICB9KTtcbiAgICAgICAgdG9nZ2xlckNvbnRhaW5lckxhYmVsLnNldFRleHQoXCJJbnNlcnQgYXMgbGlua1wiKTtcbiAgICAgICAgY29uc3QgdG9nZ2xlRWwgPSBuZXcgVG9nZ2xlQ29tcG9uZW50KHRvZ2dsZXJDb250YWluZXIpO1xuICAgICAgICB0b2dnbGVFbC5zZXRWYWx1ZShGaWVsZE1hbmFnZXIuc3RyaW5nVG9Cb29sZWFuKHRoaXMuZmllbGQub3B0aW9ucy5kZWZhdWx0SW5zZXJ0QXNMaW5rIHx8IFwiZmFsc2VcIikpXG4gICAgICAgIHRvZ2dsZUVsLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRBc0xpbmsgPSB2YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1aWxkSW5wdXRFbChmb3JtOiBIVE1MRm9ybUVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaW5wdXRDb250YWluZXIgPSBmb3JtLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LWRhdGVpbnB1dC13aXRoLXBpY2tlclwiIH0pXG4gICAgICAgIHRoaXMuaW5wdXRFbCA9IG5ldyBUZXh0Q29tcG9uZW50KGlucHV0Q29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsLmlucHV0RWwuZm9jdXMoKTtcbiAgICAgICAgbGV0IGN1cnJlbnREYXRlVmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL15cXFtcXFsvZywgXCJcIikucmVwbGFjZSgvXFxdXFxdJC9nLCBcIlwiKS5zcGxpdChcInxcIikuZmlyc3QoKT8uc3BsaXQoXCIvXCIpLmxhc3QoKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsLnNldFBsYWNlaG9sZGVyKFxuICAgICAgICAgICAgY3VycmVudERhdGVWYWx1ZSA/XG4gICAgICAgICAgICAgICAgbW9tZW50KGN1cnJlbnREYXRlVmFsdWUsIHRoaXMuZmllbGQub3B0aW9ucy5kYXRlRm9ybWF0KS5mb3JtYXQodGhpcy5maWVsZC5vcHRpb25zLmRhdGVGb3JtYXQpXG4gICAgICAgICAgICAgICAgOiBcIlwiKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsLmlucHV0RWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXByb21wdC1pbnB1dFwiKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRFbC5pbnB1dEVsLnJlbW92ZUNsYXNzKFwiaXMtaW52YWxpZFwiKVxuICAgICAgICAgICAgdGhpcy5lcnJvckZpZWxkLmhpZGUoKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JGaWVsZC5zZXRUZXh0KFwiXCIpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjYWxlbmRhckRpc3BsYXlCdG4gPSBpbnB1dENvbnRhaW5lci5jcmVhdGVFbChcImJ1dHRvblwiLCB7IGNsczogXCJtZXRhZGF0YS1tZW51LWNhbGVuZGFyLWRpc3BsYXktYnRuXCIgfSlcbiAgICAgICAgc2V0SWNvbihjYWxlbmRhckRpc3BsYXlCdG4sIEZpZWxkSWNvbltGaWVsZFR5cGUuRGF0ZV0pO1xuICAgICAgICBjb25zdCBkYXRlUGlja2VyQ29udGFpbmVyID0gZm9ybS5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS1waWNrZXItY29udGFpbmVyXCIgfSk7XG4gICAgICAgIGNvbnN0IGRhdGVQaWNrZXIgPSBmbGF0cGlja3IoZGF0ZVBpY2tlckNvbnRhaW5lciwge1xuICAgICAgICAgICAgbG9jYWxlOiB7XG4gICAgICAgICAgICAgICAgZmlyc3REYXlPZldlZWs6IHRoaXMucGx1Z2luLnNldHRpbmdzLmZpcnN0RGF5T2ZXZWVrXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkYXRlUGlja2VyLmNvbmZpZy5vbkNoYW5nZS5wdXNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3RGF0ZSA9IG1vbWVudCh2YWx1ZS50b1N0cmluZygpKS5mb3JtYXQodGhpcy5mb3JtYXQpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dEVsLnNldFZhbHVlKG5ld0RhdGUpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5ld0RhdGU7XG5cbiAgICAgICAgfSlcblxuICAgICAgICBjYWxlbmRhckRpc3BsYXlCdG4ub25jbGljayA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBkYXRlUGlja2VyLnNldERhdGUoZGF0ZVBpY2tlci5wYXJzZURhdGUodGhpcy5pbnB1dEVsLmdldFZhbHVlKCkpIHx8IG5ldyBEYXRlKCkpXG4gICAgICAgICAgICBkYXRlUGlja2VyLm9wZW4oKVxuICAgICAgICB9XG4gICAgfTtcbn07XG4iLCAiZXhwb3J0IHZhciBIT09LUyA9IFtcbiAgICBcIm9uQ2hhbmdlXCIsXG4gICAgXCJvbkNsb3NlXCIsXG4gICAgXCJvbkRheUNyZWF0ZVwiLFxuICAgIFwib25EZXN0cm95XCIsXG4gICAgXCJvbktleURvd25cIixcbiAgICBcIm9uTW9udGhDaGFuZ2VcIixcbiAgICBcIm9uT3BlblwiLFxuICAgIFwib25QYXJzZUNvbmZpZ1wiLFxuICAgIFwib25SZWFkeVwiLFxuICAgIFwib25WYWx1ZVVwZGF0ZVwiLFxuICAgIFwib25ZZWFyQ2hhbmdlXCIsXG4gICAgXCJvblByZUNhbGVuZGFyUG9zaXRpb25cIixcbl07XG5leHBvcnQgdmFyIGRlZmF1bHRzID0ge1xuICAgIF9kaXNhYmxlOiBbXSxcbiAgICBhbGxvd0lucHV0OiBmYWxzZSxcbiAgICBhbGxvd0ludmFsaWRQcmVsb2FkOiBmYWxzZSxcbiAgICBhbHRGb3JtYXQ6IFwiRiBqLCBZXCIsXG4gICAgYWx0SW5wdXQ6IGZhbHNlLFxuICAgIGFsdElucHV0Q2xhc3M6IFwiZm9ybS1jb250cm9sIGlucHV0XCIsXG4gICAgYW5pbWF0ZTogdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiTVNJRVwiKSA9PT0gLTEsXG4gICAgYXJpYURhdGVGb3JtYXQ6IFwiRiBqLCBZXCIsXG4gICAgYXV0b0ZpbGxEZWZhdWx0VGltZTogdHJ1ZSxcbiAgICBjbGlja09wZW5zOiB0cnVlLFxuICAgIGNsb3NlT25TZWxlY3Q6IHRydWUsXG4gICAgY29uanVuY3Rpb246IFwiLCBcIixcbiAgICBkYXRlRm9ybWF0OiBcIlktbS1kXCIsXG4gICAgZGVmYXVsdEhvdXI6IDEyLFxuICAgIGRlZmF1bHRNaW51dGU6IDAsXG4gICAgZGVmYXVsdFNlY29uZHM6IDAsXG4gICAgZGlzYWJsZTogW10sXG4gICAgZGlzYWJsZU1vYmlsZTogZmFsc2UsXG4gICAgZW5hYmxlU2Vjb25kczogZmFsc2UsXG4gICAgZW5hYmxlVGltZTogZmFsc2UsXG4gICAgZXJyb3JIYW5kbGVyOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oZXJyKTtcbiAgICB9LFxuICAgIGdldFdlZWs6IGZ1bmN0aW9uIChnaXZlbkRhdGUpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShnaXZlbkRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgMyAtICgoZGF0ZS5nZXREYXkoKSArIDYpICUgNykpO1xuICAgICAgICB2YXIgd2VlazEgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIDAsIDQpO1xuICAgICAgICByZXR1cm4gKDEgK1xuICAgICAgICAgICAgTWF0aC5yb3VuZCgoKGRhdGUuZ2V0VGltZSgpIC0gd2VlazEuZ2V0VGltZSgpKSAvIDg2NDAwMDAwIC1cbiAgICAgICAgICAgICAgICAzICtcbiAgICAgICAgICAgICAgICAoKHdlZWsxLmdldERheSgpICsgNikgJSA3KSkgL1xuICAgICAgICAgICAgICAgIDcpKTtcbiAgICB9LFxuICAgIGhvdXJJbmNyZW1lbnQ6IDEsXG4gICAgaWdub3JlZEZvY3VzRWxlbWVudHM6IFtdLFxuICAgIGlubGluZTogZmFsc2UsXG4gICAgbG9jYWxlOiBcImRlZmF1bHRcIixcbiAgICBtaW51dGVJbmNyZW1lbnQ6IDUsXG4gICAgbW9kZTogXCJzaW5nbGVcIixcbiAgICBtb250aFNlbGVjdG9yVHlwZTogXCJkcm9wZG93blwiLFxuICAgIG5leHRBcnJvdzogXCI8c3ZnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgdmlld0JveD0nMCAwIDE3IDE3Jz48Zz48L2c+PHBhdGggZD0nTTEzLjIwNyA4LjQ3MmwtNy44NTQgNy44NTQtMC43MDctMC43MDcgNy4xNDYtNy4xNDYtNy4xNDYtNy4xNDggMC43MDctMC43MDcgNy44NTQgNy44NTR6JyAvPjwvc3ZnPlwiLFxuICAgIG5vQ2FsZW5kYXI6IGZhbHNlLFxuICAgIG5vdzogbmV3IERhdGUoKSxcbiAgICBvbkNoYW5nZTogW10sXG4gICAgb25DbG9zZTogW10sXG4gICAgb25EYXlDcmVhdGU6IFtdLFxuICAgIG9uRGVzdHJveTogW10sXG4gICAgb25LZXlEb3duOiBbXSxcbiAgICBvbk1vbnRoQ2hhbmdlOiBbXSxcbiAgICBvbk9wZW46IFtdLFxuICAgIG9uUGFyc2VDb25maWc6IFtdLFxuICAgIG9uUmVhZHk6IFtdLFxuICAgIG9uVmFsdWVVcGRhdGU6IFtdLFxuICAgIG9uWWVhckNoYW5nZTogW10sXG4gICAgb25QcmVDYWxlbmRhclBvc2l0aW9uOiBbXSxcbiAgICBwbHVnaW5zOiBbXSxcbiAgICBwb3NpdGlvbjogXCJhdXRvXCIsXG4gICAgcG9zaXRpb25FbGVtZW50OiB1bmRlZmluZWQsXG4gICAgcHJldkFycm93OiBcIjxzdmcgdmVyc2lvbj0nMS4xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB2aWV3Qm94PScwIDAgMTcgMTcnPjxnPjwvZz48cGF0aCBkPSdNNS4yMDcgOC40NzFsNy4xNDYgNy4xNDctMC43MDcgMC43MDctNy44NTMtNy44NTQgNy44NTQtNy44NTMgMC43MDcgMC43MDctNy4xNDcgNy4xNDZ6JyAvPjwvc3ZnPlwiLFxuICAgIHNob3J0aGFuZEN1cnJlbnRNb250aDogZmFsc2UsXG4gICAgc2hvd01vbnRoczogMSxcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIHRpbWVfMjRocjogZmFsc2UsXG4gICAgd2Vla051bWJlcnM6IGZhbHNlLFxuICAgIHdyYXA6IGZhbHNlLFxufTtcbiIsICJleHBvcnQgdmFyIGVuZ2xpc2ggPSB7XG4gICAgd2Vla2RheXM6IHtcbiAgICAgICAgc2hvcnRoYW5kOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gICAgICAgIGxvbmdoYW5kOiBbXG4gICAgICAgICAgICBcIlN1bmRheVwiLFxuICAgICAgICAgICAgXCJNb25kYXlcIixcbiAgICAgICAgICAgIFwiVHVlc2RheVwiLFxuICAgICAgICAgICAgXCJXZWRuZXNkYXlcIixcbiAgICAgICAgICAgIFwiVGh1cnNkYXlcIixcbiAgICAgICAgICAgIFwiRnJpZGF5XCIsXG4gICAgICAgICAgICBcIlNhdHVyZGF5XCIsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtb250aHM6IHtcbiAgICAgICAgc2hvcnRoYW5kOiBbXG4gICAgICAgICAgICBcIkphblwiLFxuICAgICAgICAgICAgXCJGZWJcIixcbiAgICAgICAgICAgIFwiTWFyXCIsXG4gICAgICAgICAgICBcIkFwclwiLFxuICAgICAgICAgICAgXCJNYXlcIixcbiAgICAgICAgICAgIFwiSnVuXCIsXG4gICAgICAgICAgICBcIkp1bFwiLFxuICAgICAgICAgICAgXCJBdWdcIixcbiAgICAgICAgICAgIFwiU2VwXCIsXG4gICAgICAgICAgICBcIk9jdFwiLFxuICAgICAgICAgICAgXCJOb3ZcIixcbiAgICAgICAgICAgIFwiRGVjXCIsXG4gICAgICAgIF0sXG4gICAgICAgIGxvbmdoYW5kOiBbXG4gICAgICAgICAgICBcIkphbnVhcnlcIixcbiAgICAgICAgICAgIFwiRmVicnVhcnlcIixcbiAgICAgICAgICAgIFwiTWFyY2hcIixcbiAgICAgICAgICAgIFwiQXByaWxcIixcbiAgICAgICAgICAgIFwiTWF5XCIsXG4gICAgICAgICAgICBcIkp1bmVcIixcbiAgICAgICAgICAgIFwiSnVseVwiLFxuICAgICAgICAgICAgXCJBdWd1c3RcIixcbiAgICAgICAgICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgICAgICAgICBcIk9jdG9iZXJcIixcbiAgICAgICAgICAgIFwiTm92ZW1iZXJcIixcbiAgICAgICAgICAgIFwiRGVjZW1iZXJcIixcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIGRheXNJbk1vbnRoOiBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV0sXG4gICAgZmlyc3REYXlPZldlZWs6IDAsXG4gICAgb3JkaW5hbDogZnVuY3Rpb24gKG50aCkge1xuICAgICAgICB2YXIgcyA9IG50aCAlIDEwMDtcbiAgICAgICAgaWYgKHMgPiAzICYmIHMgPCAyMSlcbiAgICAgICAgICAgIHJldHVybiBcInRoXCI7XG4gICAgICAgIHN3aXRjaCAocyAlIDEwKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic3RcIjtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJuZFwiO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiBcInJkXCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBcInRoXCI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJhbmdlU2VwYXJhdG9yOiBcIiB0byBcIixcbiAgICB3ZWVrQWJicmV2aWF0aW9uOiBcIldrXCIsXG4gICAgc2Nyb2xsVGl0bGU6IFwiU2Nyb2xsIHRvIGluY3JlbWVudFwiLFxuICAgIHRvZ2dsZVRpdGxlOiBcIkNsaWNrIHRvIHRvZ2dsZVwiLFxuICAgIGFtUE06IFtcIkFNXCIsIFwiUE1cIl0sXG4gICAgeWVhckFyaWFMYWJlbDogXCJZZWFyXCIsXG4gICAgbW9udGhBcmlhTGFiZWw6IFwiTW9udGhcIixcbiAgICBob3VyQXJpYUxhYmVsOiBcIkhvdXJcIixcbiAgICBtaW51dGVBcmlhTGFiZWw6IFwiTWludXRlXCIsXG4gICAgdGltZV8yNGhyOiBmYWxzZSxcbn07XG5leHBvcnQgZGVmYXVsdCBlbmdsaXNoO1xuIiwgImV4cG9ydCB2YXIgcGFkID0gZnVuY3Rpb24gKG51bWJlciwgbGVuZ3RoKSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7IGxlbmd0aCA9IDI7IH1cbiAgICByZXR1cm4gKFwiMDAwXCIgKyBudW1iZXIpLnNsaWNlKGxlbmd0aCAqIC0xKTtcbn07XG5leHBvcnQgdmFyIGludCA9IGZ1bmN0aW9uIChib29sKSB7IHJldHVybiAoYm9vbCA9PT0gdHJ1ZSA/IDEgOiAwKTsgfTtcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmbiwgd2FpdCkge1xuICAgIHZhciB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBjbGVhclRpbWVvdXQodCk7XG4gICAgICAgIHQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZuLmFwcGx5KF90aGlzLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfTtcbn1cbmV4cG9ydCB2YXIgYXJyYXlpZnkgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5ID8gb2JqIDogW29ial07XG59O1xuIiwgImV4cG9ydCBmdW5jdGlvbiB0b2dnbGVDbGFzcyhlbGVtLCBjbGFzc05hbWUsIGJvb2wpIHtcbiAgICBpZiAoYm9vbCA9PT0gdHJ1ZSlcbiAgICAgICAgcmV0dXJuIGVsZW0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc05hbWUsIGNvbnRlbnQpIHtcbiAgICB2YXIgZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8IFwiXCI7XG4gICAgY29udGVudCA9IGNvbnRlbnQgfHwgXCJcIjtcbiAgICBlLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICBpZiAoY29udGVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBlLnRleHRDb250ZW50ID0gY29udGVudDtcbiAgICByZXR1cm4gZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGVhck5vZGUobm9kZSkge1xuICAgIHdoaWxlIChub2RlLmZpcnN0Q2hpbGQpXG4gICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5maXJzdENoaWxkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFyZW50KG5vZGUsIGNvbmRpdGlvbikge1xuICAgIGlmIChjb25kaXRpb24obm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgcmV0dXJuIGZpbmRQYXJlbnQobm9kZS5wYXJlbnROb2RlLCBjb25kaXRpb24pO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTnVtYmVySW5wdXQoaW5wdXRDbGFzc05hbWUsIG9wdHMpIHtcbiAgICB2YXIgd3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJudW1JbnB1dFdyYXBwZXJcIiksIG51bUlucHV0ID0gY3JlYXRlRWxlbWVudChcImlucHV0XCIsIFwibnVtSW5wdXQgXCIgKyBpbnB1dENsYXNzTmFtZSksIGFycm93VXAgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImFycm93VXBcIiksIGFycm93RG93biA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiYXJyb3dEb3duXCIpO1xuICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJNU0lFIDkuMFwiKSA9PT0gLTEpIHtcbiAgICAgICAgbnVtSW5wdXQudHlwZSA9IFwibnVtYmVyXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBudW1JbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgIG51bUlucHV0LnBhdHRlcm4gPSBcIlxcXFxkKlwiO1xuICAgIH1cbiAgICBpZiAob3B0cyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0cylcbiAgICAgICAgICAgIG51bUlucHV0LnNldEF0dHJpYnV0ZShrZXksIG9wdHNba2V5XSk7XG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChudW1JbnB1dCk7XG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChhcnJvd1VwKTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGFycm93RG93bik7XG4gICAgcmV0dXJuIHdyYXBwZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXQoZXZlbnQpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50LmNvbXBvc2VkUGF0aCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpO1xuICAgICAgICAgICAgcmV0dXJuIHBhdGhbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBldmVudC50YXJnZXQ7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IGludCwgcGFkIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG52YXIgZG9Ob3RoaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9O1xuZXhwb3J0IHZhciBtb250aFRvU3RyID0gZnVuY3Rpb24gKG1vbnRoTnVtYmVyLCBzaG9ydGhhbmQsIGxvY2FsZSkgeyByZXR1cm4gbG9jYWxlLm1vbnRoc1tzaG9ydGhhbmQgPyBcInNob3J0aGFuZFwiIDogXCJsb25naGFuZFwiXVttb250aE51bWJlcl07IH07XG5leHBvcnQgdmFyIHJldkZvcm1hdCA9IHtcbiAgICBEOiBkb05vdGhpbmcsXG4gICAgRjogZnVuY3Rpb24gKGRhdGVPYmosIG1vbnRoTmFtZSwgbG9jYWxlKSB7XG4gICAgICAgIGRhdGVPYmouc2V0TW9udGgobG9jYWxlLm1vbnRocy5sb25naGFuZC5pbmRleE9mKG1vbnRoTmFtZSkpO1xuICAgIH0sXG4gICAgRzogZnVuY3Rpb24gKGRhdGVPYmosIGhvdXIpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRIb3VycygoZGF0ZU9iai5nZXRIb3VycygpID49IDEyID8gMTIgOiAwKSArIHBhcnNlRmxvYXQoaG91cikpO1xuICAgIH0sXG4gICAgSDogZnVuY3Rpb24gKGRhdGVPYmosIGhvdXIpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRIb3VycyhwYXJzZUZsb2F0KGhvdXIpKTtcbiAgICB9LFxuICAgIEo6IGZ1bmN0aW9uIChkYXRlT2JqLCBkYXkpIHtcbiAgICAgICAgZGF0ZU9iai5zZXREYXRlKHBhcnNlRmxvYXQoZGF5KSk7XG4gICAgfSxcbiAgICBLOiBmdW5jdGlvbiAoZGF0ZU9iaiwgYW1QTSwgbG9jYWxlKSB7XG4gICAgICAgIGRhdGVPYmouc2V0SG91cnMoKGRhdGVPYmouZ2V0SG91cnMoKSAlIDEyKSArXG4gICAgICAgICAgICAxMiAqIGludChuZXcgUmVnRXhwKGxvY2FsZS5hbVBNWzFdLCBcImlcIikudGVzdChhbVBNKSkpO1xuICAgIH0sXG4gICAgTTogZnVuY3Rpb24gKGRhdGVPYmosIHNob3J0TW9udGgsIGxvY2FsZSkge1xuICAgICAgICBkYXRlT2JqLnNldE1vbnRoKGxvY2FsZS5tb250aHMuc2hvcnRoYW5kLmluZGV4T2Yoc2hvcnRNb250aCkpO1xuICAgIH0sXG4gICAgUzogZnVuY3Rpb24gKGRhdGVPYmosIHNlY29uZHMpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRTZWNvbmRzKHBhcnNlRmxvYXQoc2Vjb25kcykpO1xuICAgIH0sXG4gICAgVTogZnVuY3Rpb24gKF8sIHVuaXhTZWNvbmRzKSB7IHJldHVybiBuZXcgRGF0ZShwYXJzZUZsb2F0KHVuaXhTZWNvbmRzKSAqIDEwMDApOyB9LFxuICAgIFc6IGZ1bmN0aW9uIChkYXRlT2JqLCB3ZWVrTnVtLCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIHdlZWtOdW1iZXIgPSBwYXJzZUludCh3ZWVrTnVtKTtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShkYXRlT2JqLmdldEZ1bGxZZWFyKCksIDAsIDIgKyAod2Vla051bWJlciAtIDEpICogNywgMCwgMCwgMCwgMCk7XG4gICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIGRhdGUuZ2V0RGF5KCkgKyBsb2NhbGUuZmlyc3REYXlPZldlZWspO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIFk6IGZ1bmN0aW9uIChkYXRlT2JqLCB5ZWFyKSB7XG4gICAgICAgIGRhdGVPYmouc2V0RnVsbFllYXIocGFyc2VGbG9hdCh5ZWFyKSk7XG4gICAgfSxcbiAgICBaOiBmdW5jdGlvbiAoXywgSVNPRGF0ZSkgeyByZXR1cm4gbmV3IERhdGUoSVNPRGF0ZSk7IH0sXG4gICAgZDogZnVuY3Rpb24gKGRhdGVPYmosIGRheSkge1xuICAgICAgICBkYXRlT2JqLnNldERhdGUocGFyc2VGbG9hdChkYXkpKTtcbiAgICB9LFxuICAgIGg6IGZ1bmN0aW9uIChkYXRlT2JqLCBob3VyKSB7XG4gICAgICAgIGRhdGVPYmouc2V0SG91cnMoKGRhdGVPYmouZ2V0SG91cnMoKSA+PSAxMiA/IDEyIDogMCkgKyBwYXJzZUZsb2F0KGhvdXIpKTtcbiAgICB9LFxuICAgIGk6IGZ1bmN0aW9uIChkYXRlT2JqLCBtaW51dGVzKSB7XG4gICAgICAgIGRhdGVPYmouc2V0TWludXRlcyhwYXJzZUZsb2F0KG1pbnV0ZXMpKTtcbiAgICB9LFxuICAgIGo6IGZ1bmN0aW9uIChkYXRlT2JqLCBkYXkpIHtcbiAgICAgICAgZGF0ZU9iai5zZXREYXRlKHBhcnNlRmxvYXQoZGF5KSk7XG4gICAgfSxcbiAgICBsOiBkb05vdGhpbmcsXG4gICAgbTogZnVuY3Rpb24gKGRhdGVPYmosIG1vbnRoKSB7XG4gICAgICAgIGRhdGVPYmouc2V0TW9udGgocGFyc2VGbG9hdChtb250aCkgLSAxKTtcbiAgICB9LFxuICAgIG46IGZ1bmN0aW9uIChkYXRlT2JqLCBtb250aCkge1xuICAgICAgICBkYXRlT2JqLnNldE1vbnRoKHBhcnNlRmxvYXQobW9udGgpIC0gMSk7XG4gICAgfSxcbiAgICBzOiBmdW5jdGlvbiAoZGF0ZU9iaiwgc2Vjb25kcykge1xuICAgICAgICBkYXRlT2JqLnNldFNlY29uZHMocGFyc2VGbG9hdChzZWNvbmRzKSk7XG4gICAgfSxcbiAgICB1OiBmdW5jdGlvbiAoXywgdW5peE1pbGxTZWNvbmRzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShwYXJzZUZsb2F0KHVuaXhNaWxsU2Vjb25kcykpO1xuICAgIH0sXG4gICAgdzogZG9Ob3RoaW5nLFxuICAgIHk6IGZ1bmN0aW9uIChkYXRlT2JqLCB5ZWFyKSB7XG4gICAgICAgIGRhdGVPYmouc2V0RnVsbFllYXIoMjAwMCArIHBhcnNlRmxvYXQoeWVhcikpO1xuICAgIH0sXG59O1xuZXhwb3J0IHZhciB0b2tlblJlZ2V4ID0ge1xuICAgIEQ6IFwiXCIsXG4gICAgRjogXCJcIixcbiAgICBHOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgIEg6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgSjogXCIoXFxcXGRcXFxcZHxcXFxcZClcXFxcdytcIixcbiAgICBLOiBcIlwiLFxuICAgIE06IFwiXCIsXG4gICAgUzogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICBVOiBcIiguKylcIixcbiAgICBXOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgIFk6IFwiKFxcXFxkezR9KVwiLFxuICAgIFo6IFwiKC4rKVwiLFxuICAgIGQ6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgaDogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICBpOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgIGo6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgbDogXCJcIixcbiAgICBtOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgIG46IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgczogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICB1OiBcIiguKylcIixcbiAgICB3OiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgIHk6IFwiKFxcXFxkezJ9KVwiLFxufTtcbmV4cG9ydCB2YXIgZm9ybWF0cyA9IHtcbiAgICBaOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpOyB9LFxuICAgIEQ6IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5cy5zaG9ydGhhbmRbZm9ybWF0cy53KGRhdGUsIGxvY2FsZSwgb3B0aW9ucyldO1xuICAgIH0sXG4gICAgRjogZnVuY3Rpb24gKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbW9udGhUb1N0cihmb3JtYXRzLm4oZGF0ZSwgbG9jYWxlLCBvcHRpb25zKSAtIDEsIGZhbHNlLCBsb2NhbGUpO1xuICAgIH0sXG4gICAgRzogZnVuY3Rpb24gKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gcGFkKGZvcm1hdHMuaChkYXRlLCBsb2NhbGUsIG9wdGlvbnMpKTtcbiAgICB9LFxuICAgIEg6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBwYWQoZGF0ZS5nZXRIb3VycygpKTsgfSxcbiAgICBKOiBmdW5jdGlvbiAoZGF0ZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUub3JkaW5hbCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGRhdGUuZ2V0RGF0ZSgpICsgbG9jYWxlLm9yZGluYWwoZGF0ZS5nZXREYXRlKCkpXG4gICAgICAgICAgICA6IGRhdGUuZ2V0RGF0ZSgpO1xuICAgIH0sXG4gICAgSzogZnVuY3Rpb24gKGRhdGUsIGxvY2FsZSkgeyByZXR1cm4gbG9jYWxlLmFtUE1baW50KGRhdGUuZ2V0SG91cnMoKSA+IDExKV07IH0sXG4gICAgTTogZnVuY3Rpb24gKGRhdGUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbW9udGhUb1N0cihkYXRlLmdldE1vbnRoKCksIHRydWUsIGxvY2FsZSk7XG4gICAgfSxcbiAgICBTOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0U2Vjb25kcygpKTsgfSxcbiAgICBVOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLyAxMDAwOyB9LFxuICAgIFc6IGZ1bmN0aW9uIChkYXRlLCBfLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmdldFdlZWsoZGF0ZSk7XG4gICAgfSxcbiAgICBZOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0RnVsbFllYXIoKSwgNCk7IH0sXG4gICAgZDogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHBhZChkYXRlLmdldERhdGUoKSk7IH0sXG4gICAgaDogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIChkYXRlLmdldEhvdXJzKCkgJSAxMiA/IGRhdGUuZ2V0SG91cnMoKSAlIDEyIDogMTIpOyB9LFxuICAgIGk6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBwYWQoZGF0ZS5nZXRNaW51dGVzKCkpOyB9LFxuICAgIGo6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBkYXRlLmdldERhdGUoKTsgfSxcbiAgICBsOiBmdW5jdGlvbiAoZGF0ZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXMubG9uZ2hhbmRbZGF0ZS5nZXREYXkoKV07XG4gICAgfSxcbiAgICBtOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0TW9udGgoKSArIDEpOyB9LFxuICAgIG46IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBkYXRlLmdldE1vbnRoKCkgKyAxOyB9LFxuICAgIHM6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBkYXRlLmdldFNlY29uZHMoKTsgfSxcbiAgICB1OiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRUaW1lKCk7IH0sXG4gICAgdzogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0RGF5KCk7IH0sXG4gICAgeTogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIFN0cmluZyhkYXRlLmdldEZ1bGxZZWFyKCkpLnN1YnN0cmluZygyKTsgfSxcbn07XG4iLCAiaW1wb3J0IHsgdG9rZW5SZWdleCwgcmV2Rm9ybWF0LCBmb3JtYXRzLCB9IGZyb20gXCIuL2Zvcm1hdHRpbmdcIjtcbmltcG9ydCB7IGRlZmF1bHRzIH0gZnJvbSBcIi4uL3R5cGVzL29wdGlvbnNcIjtcbmltcG9ydCB7IGVuZ2xpc2ggfSBmcm9tIFwiLi4vbDEwbi9kZWZhdWx0XCI7XG5leHBvcnQgdmFyIGNyZWF0ZURhdGVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5jb25maWcsIGNvbmZpZyA9IF9iID09PSB2b2lkIDAgPyBkZWZhdWx0cyA6IF9iLCBfYyA9IF9hLmwxMG4sIGwxMG4gPSBfYyA9PT0gdm9pZCAwID8gZW5nbGlzaCA6IF9jLCBfZCA9IF9hLmlzTW9iaWxlLCBpc01vYmlsZSA9IF9kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9kO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZU9iaiwgZnJtdCwgb3ZlcnJpZGVMb2NhbGUpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IG92ZXJyaWRlTG9jYWxlIHx8IGwxMG47XG4gICAgICAgIGlmIChjb25maWcuZm9ybWF0RGF0ZSAhPT0gdW5kZWZpbmVkICYmICFpc01vYmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy5mb3JtYXREYXRlKGRhdGVPYmosIGZybXQsIGxvY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZybXRcbiAgICAgICAgICAgIC5zcGxpdChcIlwiKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYywgaSwgYXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0c1tjXSAmJiBhcnJbaSAtIDFdICE9PSBcIlxcXFxcIlxuICAgICAgICAgICAgICAgID8gZm9ybWF0c1tjXShkYXRlT2JqLCBsb2NhbGUsIGNvbmZpZylcbiAgICAgICAgICAgICAgICA6IGMgIT09IFwiXFxcXFwiXG4gICAgICAgICAgICAgICAgICAgID8gY1xuICAgICAgICAgICAgICAgICAgICA6IFwiXCI7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbihcIlwiKTtcbiAgICB9O1xufTtcbmV4cG9ydCB2YXIgY3JlYXRlRGF0ZVBhcnNlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBfYiA9IF9hLmNvbmZpZywgY29uZmlnID0gX2IgPT09IHZvaWQgMCA/IGRlZmF1bHRzIDogX2IsIF9jID0gX2EubDEwbiwgbDEwbiA9IF9jID09PSB2b2lkIDAgPyBlbmdsaXNoIDogX2M7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlLCBnaXZlbkZvcm1hdCwgdGltZWxlc3MsIGN1c3RvbUxvY2FsZSkge1xuICAgICAgICBpZiAoZGF0ZSAhPT0gMCAmJiAhZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBsb2NhbGUgPSBjdXN0b21Mb2NhbGUgfHwgbDEwbjtcbiAgICAgICAgdmFyIHBhcnNlZERhdGU7XG4gICAgICAgIHZhciBkYXRlT3JpZyA9IGRhdGU7XG4gICAgICAgIGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSlcbiAgICAgICAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRlICE9PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICBkYXRlLnRvRml4ZWQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRhdGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciBmb3JtYXQgPSBnaXZlbkZvcm1hdCB8fCAoY29uZmlnIHx8IGRlZmF1bHRzKS5kYXRlRm9ybWF0O1xuICAgICAgICAgICAgdmFyIGRhdGVzdHIgPSBTdHJpbmcoZGF0ZSkudHJpbSgpO1xuICAgICAgICAgICAgaWYgKGRhdGVzdHIgPT09IFwidG9kYXlcIikge1xuICAgICAgICAgICAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRpbWVsZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZyAmJiBjb25maWcucGFyc2VEYXRlKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9IGNvbmZpZy5wYXJzZURhdGUoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKC9aJC8udGVzdChkYXRlc3RyKSB8fFxuICAgICAgICAgICAgICAgIC9HTVQkLy50ZXN0KGRhdGVzdHIpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoZWQgPSB2b2lkIDAsIG9wcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXRjaEluZGV4ID0gMCwgcmVnZXhTdHIgPSBcIlwiOyBpIDwgZm9ybWF0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IGZvcm1hdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQmFja1NsYXNoID0gdG9rZW4gPT09IFwiXFxcXFwiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZCA9IGZvcm1hdFtpIC0gMV0gPT09IFwiXFxcXFwiIHx8IGlzQmFja1NsYXNoO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5SZWdleFt0b2tlbl0gJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4U3RyICs9IHRva2VuUmVnZXhbdG9rZW5dO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbmV3IFJlZ0V4cChyZWdleFN0cikuZXhlYyhkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiAobWF0Y2hlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BzW3Rva2VuICE9PSBcIllcIiA/IFwicHVzaFwiIDogXCJ1bnNoaWZ0XCJdKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IHJldkZvcm1hdFt0b2tlbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDogbWF0Y2hbKyttYXRjaEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNCYWNrU2xhc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdleFN0ciArPSBcIi5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICFjb25maWcgfHwgIWNvbmZpZy5ub0NhbGVuZGFyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBEYXRlKG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSwgMCwgMSwgMCwgMCwgMCwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IERhdGUobmV3IERhdGUoKS5zZXRIb3VycygwLCAwLCAwLCAwKSk7XG4gICAgICAgICAgICAgICAgb3BzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IF9hLmZuLCB2YWwgPSBfYS52YWw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocGFyc2VkRGF0ZSA9IGZuKHBhcnNlZERhdGUsIHZhbCwgbG9jYWxlKSB8fCBwYXJzZWREYXRlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwYXJzZWREYXRlID0gbWF0Y2hlZCA/IHBhcnNlZERhdGUgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEocGFyc2VkRGF0ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHBhcnNlZERhdGUuZ2V0VGltZSgpKSkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKFwiSW52YWxpZCBkYXRlIHByb3ZpZGVkOiBcIiArIGRhdGVPcmlnKSk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lbGVzcyA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHBhcnNlZERhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgIH07XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVEYXRlcyhkYXRlMSwgZGF0ZTIsIHRpbWVsZXNzKSB7XG4gICAgaWYgKHRpbWVsZXNzID09PSB2b2lkIDApIHsgdGltZWxlc3MgPSB0cnVlOyB9XG4gICAgaWYgKHRpbWVsZXNzICE9PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gKG5ldyBEYXRlKGRhdGUxLmdldFRpbWUoKSkuc2V0SG91cnMoMCwgMCwgMCwgMCkgLVxuICAgICAgICAgICAgbmV3IERhdGUoZGF0ZTIuZ2V0VGltZSgpKS5zZXRIb3VycygwLCAwLCAwLCAwKSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlMS5nZXRUaW1lKCkgLSBkYXRlMi5nZXRUaW1lKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVRpbWVzKGRhdGUxLCBkYXRlMikge1xuICAgIHJldHVybiAoMzYwMCAqIChkYXRlMS5nZXRIb3VycygpIC0gZGF0ZTIuZ2V0SG91cnMoKSkgK1xuICAgICAgICA2MCAqIChkYXRlMS5nZXRNaW51dGVzKCkgLSBkYXRlMi5nZXRNaW51dGVzKCkpICtcbiAgICAgICAgZGF0ZTEuZ2V0U2Vjb25kcygpIC1cbiAgICAgICAgZGF0ZTIuZ2V0U2Vjb25kcygpKTtcbn1cbmV4cG9ydCB2YXIgaXNCZXR3ZWVuID0gZnVuY3Rpb24gKHRzLCB0czEsIHRzMikge1xuICAgIHJldHVybiB0cyA+IE1hdGgubWluKHRzMSwgdHMyKSAmJiB0cyA8IE1hdGgubWF4KHRzMSwgdHMyKTtcbn07XG5leHBvcnQgdmFyIGNhbGN1bGF0ZVNlY29uZHNTaW5jZU1pZG5pZ2h0ID0gZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XG4gICAgcmV0dXJuIGhvdXJzICogMzYwMCArIG1pbnV0ZXMgKiA2MCArIHNlY29uZHM7XG59O1xuZXhwb3J0IHZhciBwYXJzZVNlY29uZHMgPSBmdW5jdGlvbiAoc2Vjb25kc1NpbmNlTWlkbmlnaHQpIHtcbiAgICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKHNlY29uZHNTaW5jZU1pZG5pZ2h0IC8gMzYwMCksIG1pbnV0ZXMgPSAoc2Vjb25kc1NpbmNlTWlkbmlnaHQgLSBob3VycyAqIDM2MDApIC8gNjA7XG4gICAgcmV0dXJuIFtob3VycywgbWludXRlcywgc2Vjb25kc1NpbmNlTWlkbmlnaHQgLSBob3VycyAqIDM2MDAgLSBtaW51dGVzICogNjBdO1xufTtcbmV4cG9ydCB2YXIgZHVyYXRpb24gPSB7XG4gICAgREFZOiA4NjQwMDAwMCxcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdEhvdXJzKGNvbmZpZykge1xuICAgIHZhciBob3VycyA9IGNvbmZpZy5kZWZhdWx0SG91cjtcbiAgICB2YXIgbWludXRlcyA9IGNvbmZpZy5kZWZhdWx0TWludXRlO1xuICAgIHZhciBzZWNvbmRzID0gY29uZmlnLmRlZmF1bHRTZWNvbmRzO1xuICAgIGlmIChjb25maWcubWluRGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBtaW5Ib3VyID0gY29uZmlnLm1pbkRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgdmFyIG1pbk1pbnV0ZXMgPSBjb25maWcubWluRGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgIHZhciBtaW5TZWNvbmRzID0gY29uZmlnLm1pbkRhdGUuZ2V0U2Vjb25kcygpO1xuICAgICAgICBpZiAoaG91cnMgPCBtaW5Ib3VyKSB7XG4gICAgICAgICAgICBob3VycyA9IG1pbkhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhvdXJzID09PSBtaW5Ib3VyICYmIG1pbnV0ZXMgPCBtaW5NaW51dGVzKSB7XG4gICAgICAgICAgICBtaW51dGVzID0gbWluTWludXRlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaG91cnMgPT09IG1pbkhvdXIgJiYgbWludXRlcyA9PT0gbWluTWludXRlcyAmJiBzZWNvbmRzIDwgbWluU2Vjb25kcylcbiAgICAgICAgICAgIHNlY29uZHMgPSBjb25maWcubWluRGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgfVxuICAgIGlmIChjb25maWcubWF4RGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBtYXhIciA9IGNvbmZpZy5tYXhEYXRlLmdldEhvdXJzKCk7XG4gICAgICAgIHZhciBtYXhNaW51dGVzID0gY29uZmlnLm1heERhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICBob3VycyA9IE1hdGgubWluKGhvdXJzLCBtYXhIcik7XG4gICAgICAgIGlmIChob3VycyA9PT0gbWF4SHIpXG4gICAgICAgICAgICBtaW51dGVzID0gTWF0aC5taW4obWF4TWludXRlcywgbWludXRlcyk7XG4gICAgICAgIGlmIChob3VycyA9PT0gbWF4SHIgJiYgbWludXRlcyA9PT0gbWF4TWludXRlcylcbiAgICAgICAgICAgIHNlY29uZHMgPSBjb25maWcubWF4RGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgfVxuICAgIHJldHVybiB7IGhvdXJzOiBob3VycywgbWludXRlczogbWludXRlcywgc2Vjb25kczogc2Vjb25kcyB9O1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xuaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBPYmplY3QuYXNzaWduID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAodGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIGFyZ3NfMSA9IGFyZ3M7IF9hIDwgYXJnc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3NfMVtfYV07XG4gICAgICAgICAgICBfbG9vcF8xKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xufVxuIiwgInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xuICAgIHJldHVybiByO1xufTtcbmltcG9ydCB7IGRlZmF1bHRzIGFzIGRlZmF1bHRPcHRpb25zLCBIT09LUywgfSBmcm9tIFwiLi90eXBlcy9vcHRpb25zXCI7XG5pbXBvcnQgRW5nbGlzaCBmcm9tIFwiLi9sMTBuL2RlZmF1bHRcIjtcbmltcG9ydCB7IGFycmF5aWZ5LCBkZWJvdW5jZSwgaW50LCBwYWQgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgY2xlYXJOb2RlLCBjcmVhdGVFbGVtZW50LCBjcmVhdGVOdW1iZXJJbnB1dCwgZmluZFBhcmVudCwgdG9nZ2xlQ2xhc3MsIGdldEV2ZW50VGFyZ2V0LCB9IGZyb20gXCIuL3V0aWxzL2RvbVwiO1xuaW1wb3J0IHsgY29tcGFyZURhdGVzLCBjcmVhdGVEYXRlUGFyc2VyLCBjcmVhdGVEYXRlRm9ybWF0dGVyLCBkdXJhdGlvbiwgaXNCZXR3ZWVuLCBnZXREZWZhdWx0SG91cnMsIGNhbGN1bGF0ZVNlY29uZHNTaW5jZU1pZG5pZ2h0LCBwYXJzZVNlY29uZHMsIH0gZnJvbSBcIi4vdXRpbHMvZGF0ZXNcIjtcbmltcG9ydCB7IHRva2VuUmVnZXgsIG1vbnRoVG9TdHIgfSBmcm9tIFwiLi91dGlscy9mb3JtYXR0aW5nXCI7XG5pbXBvcnQgXCIuL3V0aWxzL3BvbHlmaWxsc1wiO1xudmFyIERFQk9VTkNFRF9DSEFOR0VfTVMgPSAzMDA7XG5mdW5jdGlvbiBGbGF0cGlja3JJbnN0YW5jZShlbGVtZW50LCBpbnN0YW5jZUNvbmZpZykge1xuICAgIHZhciBzZWxmID0ge1xuICAgICAgICBjb25maWc6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucyksIGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnKSxcbiAgICAgICAgbDEwbjogRW5nbGlzaCxcbiAgICB9O1xuICAgIHNlbGYucGFyc2VEYXRlID0gY3JlYXRlRGF0ZVBhcnNlcih7IGNvbmZpZzogc2VsZi5jb25maWcsIGwxMG46IHNlbGYubDEwbiB9KTtcbiAgICBzZWxmLl9oYW5kbGVycyA9IFtdO1xuICAgIHNlbGYucGx1Z2luRWxlbWVudHMgPSBbXTtcbiAgICBzZWxmLmxvYWRlZFBsdWdpbnMgPSBbXTtcbiAgICBzZWxmLl9iaW5kID0gYmluZDtcbiAgICBzZWxmLl9zZXRIb3Vyc0Zyb21EYXRlID0gc2V0SG91cnNGcm9tRGF0ZTtcbiAgICBzZWxmLl9wb3NpdGlvbkNhbGVuZGFyID0gcG9zaXRpb25DYWxlbmRhcjtcbiAgICBzZWxmLmNoYW5nZU1vbnRoID0gY2hhbmdlTW9udGg7XG4gICAgc2VsZi5jaGFuZ2VZZWFyID0gY2hhbmdlWWVhcjtcbiAgICBzZWxmLmNsZWFyID0gY2xlYXI7XG4gICAgc2VsZi5jbG9zZSA9IGNsb3NlO1xuICAgIHNlbGYub25Nb3VzZU92ZXIgPSBvbk1vdXNlT3ZlcjtcbiAgICBzZWxmLl9jcmVhdGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudDtcbiAgICBzZWxmLmNyZWF0ZURheSA9IGNyZWF0ZURheTtcbiAgICBzZWxmLmRlc3Ryb3kgPSBkZXN0cm95O1xuICAgIHNlbGYuaXNFbmFibGVkID0gaXNFbmFibGVkO1xuICAgIHNlbGYuanVtcFRvRGF0ZSA9IGp1bXBUb0RhdGU7XG4gICAgc2VsZi51cGRhdGVWYWx1ZSA9IHVwZGF0ZVZhbHVlO1xuICAgIHNlbGYub3BlbiA9IG9wZW47XG4gICAgc2VsZi5yZWRyYXcgPSByZWRyYXc7XG4gICAgc2VsZi5zZXQgPSBzZXQ7XG4gICAgc2VsZi5zZXREYXRlID0gc2V0RGF0ZTtcbiAgICBzZWxmLnRvZ2dsZSA9IHRvZ2dsZTtcbiAgICBmdW5jdGlvbiBzZXR1cEhlbHBlckZ1bmN0aW9ucygpIHtcbiAgICAgICAgc2VsZi51dGlscyA9IHtcbiAgICAgICAgICAgIGdldERheXNJbk1vbnRoOiBmdW5jdGlvbiAobW9udGgsIHlyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vbnRoID09PSB2b2lkIDApIHsgbW9udGggPSBzZWxmLmN1cnJlbnRNb250aDsgfVxuICAgICAgICAgICAgICAgIGlmICh5ciA9PT0gdm9pZCAwKSB7IHlyID0gc2VsZi5jdXJyZW50WWVhcjsgfVxuICAgICAgICAgICAgICAgIGlmIChtb250aCA9PT0gMSAmJiAoKHlyICUgNCA9PT0gMCAmJiB5ciAlIDEwMCAhPT0gMCkgfHwgeXIgJSA0MDAgPT09IDApKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYubDEwbi5kYXlzSW5Nb250aFttb250aF07XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBzZWxmLmVsZW1lbnQgPSBzZWxmLmlucHV0ID0gZWxlbWVudDtcbiAgICAgICAgc2VsZi5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgcGFyc2VDb25maWcoKTtcbiAgICAgICAgc2V0dXBMb2NhbGUoKTtcbiAgICAgICAgc2V0dXBJbnB1dHMoKTtcbiAgICAgICAgc2V0dXBEYXRlcygpO1xuICAgICAgICBzZXR1cEhlbHBlckZ1bmN0aW9ucygpO1xuICAgICAgICBpZiAoIXNlbGYuaXNNb2JpbGUpXG4gICAgICAgICAgICBidWlsZCgpO1xuICAgICAgICBiaW5kRXZlbnRzKCk7XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIHx8IHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSB7XG4gICAgICAgICAgICAgICAgc2V0SG91cnNGcm9tRGF0ZShzZWxmLmNvbmZpZy5ub0NhbGVuZGFyID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlVmFsdWUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHNldENhbGVuZGFyV2lkdGgoKTtcbiAgICAgICAgdmFyIGlzU2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgaWYgKCFzZWxmLmlzTW9iaWxlICYmIGlzU2FmYXJpKSB7XG4gICAgICAgICAgICBwb3NpdGlvbkNhbGVuZGFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJpZ2dlckV2ZW50KFwib25SZWFkeVwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q2xvc2VzdEFjdGl2ZUVsZW1lbnQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoKF9hID0gc2VsZi5jYWxlbmRhckNvbnRhaW5lcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFJvb3ROb2RlKCkpXG4gICAgICAgICAgICAuYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmluZFRvSW5zdGFuY2UoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuLmJpbmQoc2VsZik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldENhbGVuZGFyV2lkdGgoKSB7XG4gICAgICAgIHZhciBjb25maWcgPSBzZWxmLmNvbmZpZztcbiAgICAgICAgaWYgKGNvbmZpZy53ZWVrTnVtYmVycyA9PT0gZmFsc2UgJiYgY29uZmlnLnNob3dNb250aHMgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb25maWcubm9DYWxlbmRhciAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF5c1dpZHRoID0gKHNlbGYuZGF5cy5vZmZzZXRXaWR0aCArIDEpICogY29uZmlnLnNob3dNb250aHM7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci5zdHlsZS53aWR0aCA9IGRheXNXaWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS53aWR0aCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlzV2lkdGggK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzZWxmLndlZWtXcmFwcGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLndlZWtXcmFwcGVyLm9mZnNldFdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInZpc2liaWxpdHlcIik7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoZSkge1xuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdmFyIGRlZmF1bHREYXRlID0gc2VsZi5jb25maWcubWluRGF0ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgY29tcGFyZURhdGVzKG5ldyBEYXRlKCksIHNlbGYuY29uZmlnLm1pbkRhdGUpID49IDBcbiAgICAgICAgICAgICAgICA/IG5ldyBEYXRlKClcbiAgICAgICAgICAgICAgICA6IG5ldyBEYXRlKHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0cyA9IGdldERlZmF1bHRIb3VycyhzZWxmLmNvbmZpZyk7XG4gICAgICAgICAgICBkZWZhdWx0RGF0ZS5zZXRIb3VycyhkZWZhdWx0cy5ob3VycywgZGVmYXVsdHMubWludXRlcywgZGVmYXVsdHMuc2Vjb25kcywgZGVmYXVsdERhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gW2RlZmF1bHREYXRlXTtcbiAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gZGVmYXVsdERhdGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUgIT09IHVuZGVmaW5lZCAmJiBlLnR5cGUgIT09IFwiYmx1clwiKSB7XG4gICAgICAgICAgICB0aW1lV3JhcHBlcihlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldlZhbHVlID0gc2VsZi5faW5wdXQudmFsdWU7XG4gICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICBpZiAoc2VsZi5faW5wdXQudmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgICAgc2VsZi5fZGVib3VuY2VkQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYW1wbTJtaWxpdGFyeShob3VyLCBhbVBNKSB7XG4gICAgICAgIHJldHVybiAoaG91ciAlIDEyKSArIDEyICogaW50KGFtUE0gPT09IHNlbGYubDEwbi5hbVBNWzFdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWlsaXRhcnkyYW1wbShob3VyKSB7XG4gICAgICAgIHN3aXRjaCAoaG91ciAlIDI0KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgIHJldHVybiAxMjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgJSAxMjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRIb3Vyc0Zyb21JbnB1dHMoKSB7XG4gICAgICAgIGlmIChzZWxmLmhvdXJFbGVtZW50ID09PSB1bmRlZmluZWQgfHwgc2VsZi5taW51dGVFbGVtZW50ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBob3VycyA9IChwYXJzZUludChzZWxmLmhvdXJFbGVtZW50LnZhbHVlLnNsaWNlKC0yKSwgMTApIHx8IDApICUgMjQsIG1pbnV0ZXMgPSAocGFyc2VJbnQoc2VsZi5taW51dGVFbGVtZW50LnZhbHVlLCAxMCkgfHwgMCkgJSA2MCwgc2Vjb25kcyA9IHNlbGYuc2Vjb25kRWxlbWVudCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IChwYXJzZUludChzZWxmLnNlY29uZEVsZW1lbnQudmFsdWUsIDEwKSB8fCAwKSAlIDYwXG4gICAgICAgICAgICA6IDA7XG4gICAgICAgIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaG91cnMgPSBhbXBtMm1pbGl0YXJ5KGhvdXJzLCBzZWxmLmFtUE0udGV4dENvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsaW1pdE1pbkhvdXJzID0gc2VsZi5jb25maWcubWluVGltZSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAoc2VsZi5jb25maWcubWluRGF0ZSAmJlxuICAgICAgICAgICAgICAgIHNlbGYubWluRGF0ZUhhc1RpbWUgJiZcbiAgICAgICAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiAmJlxuICAgICAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiwgc2VsZi5jb25maWcubWluRGF0ZSwgdHJ1ZSkgPT09XG4gICAgICAgICAgICAgICAgICAgIDApO1xuICAgICAgICB2YXIgbGltaXRNYXhIb3VycyA9IHNlbGYuY29uZmlnLm1heFRpbWUgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1heERhdGUgJiZcbiAgICAgICAgICAgICAgICBzZWxmLm1heERhdGVIYXNUaW1lICYmXG4gICAgICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmosIHNlbGYuY29uZmlnLm1heERhdGUsIHRydWUpID09PVxuICAgICAgICAgICAgICAgICAgICAwKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heFRpbWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgc2VsZi5jb25maWcubWluVGltZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5UaW1lID4gc2VsZi5jb25maWcubWF4VGltZSkge1xuICAgICAgICAgICAgdmFyIG1pbkJvdW5kID0gY2FsY3VsYXRlU2Vjb25kc1NpbmNlTWlkbmlnaHQoc2VsZi5jb25maWcubWluVGltZS5nZXRIb3VycygpLCBzZWxmLmNvbmZpZy5taW5UaW1lLmdldE1pbnV0ZXMoKSwgc2VsZi5jb25maWcubWluVGltZS5nZXRTZWNvbmRzKCkpO1xuICAgICAgICAgICAgdmFyIG1heEJvdW5kID0gY2FsY3VsYXRlU2Vjb25kc1NpbmNlTWlkbmlnaHQoc2VsZi5jb25maWcubWF4VGltZS5nZXRIb3VycygpLCBzZWxmLmNvbmZpZy5tYXhUaW1lLmdldE1pbnV0ZXMoKSwgc2VsZi5jb25maWcubWF4VGltZS5nZXRTZWNvbmRzKCkpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gY2FsY3VsYXRlU2Vjb25kc1NpbmNlTWlkbmlnaHQoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID4gbWF4Qm91bmQgJiYgY3VycmVudFRpbWUgPCBtaW5Cb3VuZCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBwYXJzZVNlY29uZHMobWluQm91bmQpO1xuICAgICAgICAgICAgICAgIGhvdXJzID0gcmVzdWx0WzBdO1xuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSByZXN1bHRbMV07XG4gICAgICAgICAgICAgICAgc2Vjb25kcyA9IHJlc3VsdFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsaW1pdE1heEhvdXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heFRpbWUgPSBzZWxmLmNvbmZpZy5tYXhUaW1lICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5tYXhUaW1lXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWF4RGF0ZTtcbiAgICAgICAgICAgICAgICBob3VycyA9IE1hdGgubWluKGhvdXJzLCBtYXhUaW1lLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgICAgIGlmIChob3VycyA9PT0gbWF4VGltZS5nZXRIb3VycygpKVxuICAgICAgICAgICAgICAgICAgICBtaW51dGVzID0gTWF0aC5taW4obWludXRlcywgbWF4VGltZS5nZXRNaW51dGVzKCkpO1xuICAgICAgICAgICAgICAgIGlmIChtaW51dGVzID09PSBtYXhUaW1lLmdldE1pbnV0ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IE1hdGgubWluKHNlY29uZHMsIG1heFRpbWUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaW1pdE1pbkhvdXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1pblRpbWUgPSBzZWxmLmNvbmZpZy5taW5UaW1lICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5taW5UaW1lXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWluRGF0ZTtcbiAgICAgICAgICAgICAgICBob3VycyA9IE1hdGgubWF4KGhvdXJzLCBtaW5UaW1lLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgICAgIGlmIChob3VycyA9PT0gbWluVGltZS5nZXRIb3VycygpICYmIG1pbnV0ZXMgPCBtaW5UaW1lLmdldE1pbnV0ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgbWludXRlcyA9IG1pblRpbWUuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICAgIGlmIChtaW51dGVzID09PSBtaW5UaW1lLmdldE1pbnV0ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IE1hdGgubWF4KHNlY29uZHMsIG1pblRpbWUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXRIb3Vycyhob3VycywgbWludXRlcywgc2Vjb25kcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldEhvdXJzRnJvbURhdGUoZGF0ZU9iaikge1xuICAgICAgICB2YXIgZGF0ZSA9IGRhdGVPYmogfHwgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmo7XG4gICAgICAgIGlmIChkYXRlICYmIGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICBzZXRIb3VycyhkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0SG91cnMoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpIHtcbiAgICAgICAgaWYgKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLnNldEhvdXJzKGhvdXJzICUgMjQsIG1pbnV0ZXMsIHNlY29uZHMgfHwgMCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzZWxmLmhvdXJFbGVtZW50IHx8ICFzZWxmLm1pbnV0ZUVsZW1lbnQgfHwgc2VsZi5pc01vYmlsZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc2VsZi5ob3VyRWxlbWVudC52YWx1ZSA9IHBhZCghc2VsZi5jb25maWcudGltZV8yNGhyXG4gICAgICAgICAgICA/ICgoMTIgKyBob3VycykgJSAxMikgKyAxMiAqIGludChob3VycyAlIDEyID09PSAwKVxuICAgICAgICAgICAgOiBob3Vycyk7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC52YWx1ZSA9IHBhZChtaW51dGVzKTtcbiAgICAgICAgaWYgKHNlbGYuYW1QTSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgc2VsZi5hbVBNLnRleHRDb250ZW50ID0gc2VsZi5sMTBuLmFtUE1baW50KGhvdXJzID49IDEyKV07XG4gICAgICAgIGlmIChzZWxmLnNlY29uZEVsZW1lbnQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHNlbGYuc2Vjb25kRWxlbWVudC52YWx1ZSA9IHBhZChzZWNvbmRzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25ZZWFySW5wdXQoZXZlbnQpIHtcbiAgICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZXZlbnQpO1xuICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KGV2ZW50VGFyZ2V0LnZhbHVlKSArIChldmVudC5kZWx0YSB8fCAwKTtcbiAgICAgICAgaWYgKHllYXIgLyAxMDAwID4gMSB8fFxuICAgICAgICAgICAgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiICYmICEvW15cXGRdLy50ZXN0KHllYXIudG9TdHJpbmcoKSkpKSB7XG4gICAgICAgICAgICBjaGFuZ2VZZWFyKHllYXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJpbmQoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgQXJyYXkpXG4gICAgICAgICAgICByZXR1cm4gZXZlbnQuZm9yRWFjaChmdW5jdGlvbiAoZXYpIHsgcmV0dXJuIGJpbmQoZWxlbWVudCwgZXYsIGhhbmRsZXIsIG9wdGlvbnMpOyB9KTtcbiAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBBcnJheSlcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiBiaW5kKGVsLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7IH0pO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICBzZWxmLl9oYW5kbGVycy5wdXNoKHtcbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTsgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyaWdnZXJDaGFuZ2UoKSB7XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm9uQ2hhbmdlXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBiaW5kRXZlbnRzKCkge1xuICAgICAgICBpZiAoc2VsZi5jb25maWcud3JhcCkge1xuICAgICAgICAgICAgW1wib3BlblwiLCBcImNsb3NlXCIsIFwidG9nZ2xlXCIsIFwiY2xlYXJcIl0uZm9yRWFjaChmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzZWxmLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLVwiICsgZXZ0ICsgXCJdXCIpLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJpbmQoZWwsIFwiY2xpY2tcIiwgc2VsZltldnRdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmlzTW9iaWxlKSB7XG4gICAgICAgICAgICBzZXR1cE1vYmlsZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWJvdW5jZWRSZXNpemUgPSBkZWJvdW5jZShvblJlc2l6ZSwgNTApO1xuICAgICAgICBzZWxmLl9kZWJvdW5jZWRDaGFuZ2UgPSBkZWJvdW5jZSh0cmlnZ2VyQ2hhbmdlLCBERUJPVU5DRURfQ0hBTkdFX01TKTtcbiAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lciAmJiAhL2lQaG9uZXxpUGFkfGlQb2QvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKVxuICAgICAgICAgICAgYmluZChzZWxmLmRheXNDb250YWluZXIsIFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIilcbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZU92ZXIoZ2V0RXZlbnRUYXJnZXQoZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGJpbmQoc2VsZi5faW5wdXQsIFwia2V5ZG93blwiLCBvbktleURvd24pO1xuICAgICAgICBpZiAoc2VsZi5jYWxlbmRhckNvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBiaW5kKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwia2V5ZG93blwiLCBvbktleURvd24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VsZi5jb25maWcuaW5saW5lICYmICFzZWxmLmNvbmZpZy5zdGF0aWMpXG4gICAgICAgICAgICBiaW5kKHdpbmRvdywgXCJyZXNpemVcIiwgZGVib3VuY2VkUmVzaXplKTtcbiAgICAgICAgaWYgKHdpbmRvdy5vbnRvdWNoc3RhcnQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGJpbmQod2luZG93LmRvY3VtZW50LCBcInRvdWNoc3RhcnRcIiwgZG9jdW1lbnRDbGljayk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJpbmQod2luZG93LmRvY3VtZW50LCBcIm1vdXNlZG93blwiLCBkb2N1bWVudENsaWNrKTtcbiAgICAgICAgYmluZCh3aW5kb3cuZG9jdW1lbnQsIFwiZm9jdXNcIiwgZG9jdW1lbnRDbGljaywgeyBjYXB0dXJlOiB0cnVlIH0pO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuY2xpY2tPcGVucyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgYmluZChzZWxmLl9pbnB1dCwgXCJmb2N1c1wiLCBzZWxmLm9wZW4pO1xuICAgICAgICAgICAgYmluZChzZWxmLl9pbnB1dCwgXCJjbGlja1wiLCBzZWxmLm9wZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYmluZChzZWxmLm1vbnRoTmF2LCBcImNsaWNrXCIsIG9uTW9udGhOYXZDbGljayk7XG4gICAgICAgICAgICBiaW5kKHNlbGYubW9udGhOYXYsIFtcImtleXVwXCIsIFwiaW5jcmVtZW50XCJdLCBvblllYXJJbnB1dCk7XG4gICAgICAgICAgICBiaW5kKHNlbGYuZGF5c0NvbnRhaW5lciwgXCJjbGlja1wiLCBzZWxlY3REYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi50aW1lQ29udGFpbmVyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHNlbGYubWludXRlRWxlbWVudCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBzZWxUZXh0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXZlbnRUYXJnZXQoZSkuc2VsZWN0KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYmluZChzZWxmLnRpbWVDb250YWluZXIsIFtcImluY3JlbWVudFwiXSwgdXBkYXRlVGltZSk7XG4gICAgICAgICAgICBiaW5kKHNlbGYudGltZUNvbnRhaW5lciwgXCJibHVyXCIsIHVwZGF0ZVRpbWUsIHsgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGJpbmQoc2VsZi50aW1lQ29udGFpbmVyLCBcImNsaWNrXCIsIHRpbWVJbmNyZW1lbnQpO1xuICAgICAgICAgICAgYmluZChbc2VsZi5ob3VyRWxlbWVudCwgc2VsZi5taW51dGVFbGVtZW50XSwgW1wiZm9jdXNcIiwgXCJjbGlja1wiXSwgc2VsVGV4dCk7XG4gICAgICAgICAgICBpZiAoc2VsZi5zZWNvbmRFbGVtZW50ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgYmluZChzZWxmLnNlY29uZEVsZW1lbnQsIFwiZm9jdXNcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5zZWNvbmRFbGVtZW50ICYmIHNlbGYuc2Vjb25kRWxlbWVudC5zZWxlY3QoKTsgfSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBiaW5kKHNlbGYuYW1QTSwgXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVUaW1lKGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5hbGxvd0lucHV0KSB7XG4gICAgICAgICAgICBiaW5kKHNlbGYuX2lucHV0LCBcImJsdXJcIiwgb25CbHVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBqdW1wVG9EYXRlKGp1bXBEYXRlLCB0cmlnZ2VyQ2hhbmdlKSB7XG4gICAgICAgIHZhciBqdW1wVG8gPSBqdW1wRGF0ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHNlbGYucGFyc2VEYXRlKGp1bXBEYXRlKVxuICAgICAgICAgICAgOiBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiB8fFxuICAgICAgICAgICAgICAgIChzZWxmLmNvbmZpZy5taW5EYXRlICYmIHNlbGYuY29uZmlnLm1pbkRhdGUgPiBzZWxmLm5vd1xuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLm1pbkRhdGVcbiAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy5tYXhEYXRlICYmIHNlbGYuY29uZmlnLm1heERhdGUgPCBzZWxmLm5vd1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5tYXhEYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYubm93KTtcbiAgICAgICAgdmFyIG9sZFllYXIgPSBzZWxmLmN1cnJlbnRZZWFyO1xuICAgICAgICB2YXIgb2xkTW9udGggPSBzZWxmLmN1cnJlbnRNb250aDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChqdW1wVG8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBqdW1wVG8uZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IGp1bXBUby5nZXRNb250aCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlLm1lc3NhZ2UgPSBcIkludmFsaWQgZGF0ZSBzdXBwbGllZDogXCIgKyBqdW1wVG87XG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5lcnJvckhhbmRsZXIoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgJiYgc2VsZi5jdXJyZW50WWVhciAhPT0gb2xkWWVhcikge1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25ZZWFyQ2hhbmdlXCIpO1xuICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlICYmXG4gICAgICAgICAgICAoc2VsZi5jdXJyZW50WWVhciAhPT0gb2xkWWVhciB8fCBzZWxmLmN1cnJlbnRNb250aCAhPT0gb2xkTW9udGgpKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbk1vbnRoQ2hhbmdlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRpbWVJbmNyZW1lbnQoZSkge1xuICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChlKTtcbiAgICAgICAgaWYgKH5ldmVudFRhcmdldC5jbGFzc05hbWUuaW5kZXhPZihcImFycm93XCIpKVxuICAgICAgICAgICAgaW5jcmVtZW50TnVtSW5wdXQoZSwgZXZlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYXJyb3dVcFwiKSA/IDEgOiAtMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluY3JlbWVudE51bUlucHV0KGUsIGRlbHRhLCBpbnB1dEVsZW0pIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGUgJiYgZ2V0RXZlbnRUYXJnZXQoZSk7XG4gICAgICAgIHZhciBpbnB1dCA9IGlucHV0RWxlbSB8fFxuICAgICAgICAgICAgKHRhcmdldCAmJiB0YXJnZXQucGFyZW50Tm9kZSAmJiB0YXJnZXQucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbiAgICAgICAgdmFyIGV2ZW50ID0gY3JlYXRlRXZlbnQoXCJpbmNyZW1lbnRcIik7XG4gICAgICAgIGV2ZW50LmRlbHRhID0gZGVsdGE7XG4gICAgICAgIGlucHV0ICYmIGlucHV0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZCgpIHtcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItY2FsZW5kYXJcIik7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIudGFiSW5kZXggPSAtMTtcbiAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKSB7XG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChidWlsZE1vbnRoTmF2KCkpO1xuICAgICAgICAgICAgc2VsZi5pbm5lckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItaW5uZXJDb250YWluZXJcIik7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcud2Vla051bWJlcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBidWlsZFdlZWtzKCksIHdlZWtXcmFwcGVyID0gX2Eud2Vla1dyYXBwZXIsIHdlZWtOdW1iZXJzID0gX2Eud2Vla051bWJlcnM7XG4gICAgICAgICAgICAgICAgc2VsZi5pbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZCh3ZWVrV3JhcHBlcik7XG4gICAgICAgICAgICAgICAgc2VsZi53ZWVrTnVtYmVycyA9IHdlZWtOdW1iZXJzO1xuICAgICAgICAgICAgICAgIHNlbGYud2Vla1dyYXBwZXIgPSB3ZWVrV3JhcHBlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItckNvbnRhaW5lclwiKTtcbiAgICAgICAgICAgIHNlbGYuckNvbnRhaW5lci5hcHBlbmRDaGlsZChidWlsZFdlZWtkYXlzKCkpO1xuICAgICAgICAgICAgaWYgKCFzZWxmLmRheXNDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRheXNDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWRheXNcIik7XG4gICAgICAgICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyLnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWlsZERheXMoKTtcbiAgICAgICAgICAgIHNlbGYuckNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxmLmRheXNDb250YWluZXIpO1xuICAgICAgICAgICAgc2VsZi5pbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxmLnJDb250YWluZXIpO1xuICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoc2VsZi5pbm5lckNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUpIHtcbiAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGJ1aWxkVGltZSgpKTtcbiAgICAgICAgfVxuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcInJhbmdlTW9kZVwiLCBzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFuaW1hdGVcIiwgc2VsZi5jb25maWcuYW5pbWF0ZSA9PT0gdHJ1ZSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwibXVsdGlNb250aFwiLCBzZWxmLmNvbmZpZy5zaG93TW9udGhzID4gMSk7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuICAgICAgICB2YXIgY3VzdG9tQXBwZW5kID0gc2VsZi5jb25maWcuYXBwZW5kVG8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgc2VsZi5jb25maWcuYXBwZW5kVG8ubm9kZVR5cGUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmlubGluZSB8fCBzZWxmLmNvbmZpZy5zdGF0aWMpIHtcbiAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChzZWxmLmNvbmZpZy5pbmxpbmUgPyBcImlubGluZVwiIDogXCJzdGF0aWNcIik7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuaW5saW5lKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjdXN0b21BcHBlbmQgJiYgc2VsZi5lbGVtZW50LnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBzZWxmLl9pbnB1dC5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi5jb25maWcuYXBwZW5kVG8gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcuYXBwZW5kVG8uYXBwZW5kQ2hpbGQoc2VsZi5jYWxlbmRhckNvbnRhaW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuc3RhdGljKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXdyYXBwZXJcIik7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuZWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUod3JhcHBlciwgc2VsZi5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNlbGYuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQpXG4gICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi5hbHRJbnB1dCk7XG4gICAgICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNlbGYuY29uZmlnLnN0YXRpYyAmJiAhc2VsZi5jb25maWcuaW5saW5lKVxuICAgICAgICAgICAgKHNlbGYuY29uZmlnLmFwcGVuZFRvICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLmFwcGVuZFRvXG4gICAgICAgICAgICAgICAgOiB3aW5kb3cuZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2VsZi5jYWxlbmRhckNvbnRhaW5lcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZURheShjbGFzc05hbWUsIGRhdGUsIF9kYXlOdW1iZXIsIGkpIHtcbiAgICAgICAgdmFyIGRhdGVJc0VuYWJsZWQgPSBpc0VuYWJsZWQoZGF0ZSwgdHJ1ZSksIGRheUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBjbGFzc05hbWUsIGRhdGUuZ2V0RGF0ZSgpLnRvU3RyaW5nKCkpO1xuICAgICAgICBkYXlFbGVtZW50LmRhdGVPYmogPSBkYXRlO1xuICAgICAgICBkYXlFbGVtZW50LiRpID0gaTtcbiAgICAgICAgZGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHNlbGYuZm9ybWF0RGF0ZShkYXRlLCBzZWxmLmNvbmZpZy5hcmlhRGF0ZUZvcm1hdCkpO1xuICAgICAgICBpZiAoY2xhc3NOYW1lLmluZGV4T2YoXCJoaWRkZW5cIikgPT09IC0xICYmXG4gICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5ub3cpID09PSAwKSB7XG4gICAgICAgICAgICBzZWxmLnRvZGF5RGF0ZUVsZW0gPSBkYXlFbGVtZW50O1xuICAgICAgICAgICAgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG9kYXlcIik7XG4gICAgICAgICAgICBkYXlFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtY3VycmVudFwiLCBcImRhdGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGVJc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIGRheUVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgIGlmIChpc0RhdGVTZWxlY3RlZChkYXRlKSkge1xuICAgICAgICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlRWxlbSA9IGRheUVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIikge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhkYXlFbGVtZW50LCBcInN0YXJ0UmFuZ2VcIiwgc2VsZi5zZWxlY3RlZERhdGVzWzBdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLCB0cnVlKSA9PT0gMCk7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGRheUVsZW1lbnQsIFwiZW5kUmFuZ2VcIiwgc2VsZi5zZWxlY3RlZERhdGVzWzFdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzFdLCB0cnVlKSA9PT0gMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT09IFwibmV4dE1vbnRoRGF5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJpblJhbmdlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImZsYXRwaWNrci1kaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiKSB7XG4gICAgICAgICAgICBpZiAoaXNEYXRlSW5SYW5nZShkYXRlKSAmJiAhaXNEYXRlU2VsZWN0ZWQoZGF0ZSkpXG4gICAgICAgICAgICAgICAgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaW5SYW5nZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi53ZWVrTnVtYmVycyAmJlxuICAgICAgICAgICAgc2VsZi5jb25maWcuc2hvd01vbnRocyA9PT0gMSAmJlxuICAgICAgICAgICAgY2xhc3NOYW1lICE9PSBcInByZXZNb250aERheVwiICYmXG4gICAgICAgICAgICBpICUgNyA9PT0gNikge1xuICAgICAgICAgICAgc2VsZi53ZWVrTnVtYmVycy5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgXCI8c3BhbiBjbGFzcz0nZmxhdHBpY2tyLWRheSc+XCIgKyBzZWxmLmNvbmZpZy5nZXRXZWVrKGRhdGUpICsgXCI8L3NwYW4+XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm9uRGF5Q3JlYXRlXCIsIGRheUVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gZGF5RWxlbWVudDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9jdXNPbkRheUVsZW0odGFyZ2V0Tm9kZSkge1xuICAgICAgICB0YXJnZXROb2RlLmZvY3VzKCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpXG4gICAgICAgICAgICBvbk1vdXNlT3Zlcih0YXJnZXROb2RlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3RBdmFpbGFibGVEYXkoZGVsdGEpIHtcbiAgICAgICAgdmFyIHN0YXJ0TW9udGggPSBkZWx0YSA+IDAgPyAwIDogc2VsZi5jb25maWcuc2hvd01vbnRocyAtIDE7XG4gICAgICAgIHZhciBlbmRNb250aCA9IGRlbHRhID4gMCA/IHNlbGYuY29uZmlnLnNob3dNb250aHMgOiAtMTtcbiAgICAgICAgZm9yICh2YXIgbSA9IHN0YXJ0TW9udGg7IG0gIT0gZW5kTW9udGg7IG0gKz0gZGVsdGEpIHtcbiAgICAgICAgICAgIHZhciBtb250aCA9IHNlbGYuZGF5c0NvbnRhaW5lci5jaGlsZHJlblttXTtcbiAgICAgICAgICAgIHZhciBzdGFydEluZGV4ID0gZGVsdGEgPiAwID8gMCA6IG1vbnRoLmNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB2YXIgZW5kSW5kZXggPSBkZWx0YSA+IDAgPyBtb250aC5jaGlsZHJlbi5sZW5ndGggOiAtMTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpICE9IGVuZEluZGV4OyBpICs9IGRlbHRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBtb250aC5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoYy5jbGFzc05hbWUuaW5kZXhPZihcImhpZGRlblwiKSA9PT0gLTEgJiYgaXNFbmFibGVkKGMuZGF0ZU9iaikpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldE5leHRBdmFpbGFibGVEYXkoY3VycmVudCwgZGVsdGEpIHtcbiAgICAgICAgdmFyIGdpdmVuTW9udGggPSBjdXJyZW50LmNsYXNzTmFtZS5pbmRleE9mKFwiTW9udGhcIikgPT09IC0xXG4gICAgICAgICAgICA/IGN1cnJlbnQuZGF0ZU9iai5nZXRNb250aCgpXG4gICAgICAgICAgICA6IHNlbGYuY3VycmVudE1vbnRoO1xuICAgICAgICB2YXIgZW5kTW9udGggPSBkZWx0YSA+IDAgPyBzZWxmLmNvbmZpZy5zaG93TW9udGhzIDogLTE7XG4gICAgICAgIHZhciBsb29wRGVsdGEgPSBkZWx0YSA+IDAgPyAxIDogLTE7XG4gICAgICAgIGZvciAodmFyIG0gPSBnaXZlbk1vbnRoIC0gc2VsZi5jdXJyZW50TW9udGg7IG0gIT0gZW5kTW9udGg7IG0gKz0gbG9vcERlbHRhKSB7XG4gICAgICAgICAgICB2YXIgbW9udGggPSBzZWxmLmRheXNDb250YWluZXIuY2hpbGRyZW5bbV07XG4gICAgICAgICAgICB2YXIgc3RhcnRJbmRleCA9IGdpdmVuTW9udGggLSBzZWxmLmN1cnJlbnRNb250aCA9PT0gbVxuICAgICAgICAgICAgICAgID8gY3VycmVudC4kaSArIGRlbHRhXG4gICAgICAgICAgICAgICAgOiBkZWx0YSA8IDBcbiAgICAgICAgICAgICAgICAgICAgPyBtb250aC5jaGlsZHJlbi5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgIHZhciBudW1Nb250aERheXMgPSBtb250aC5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA+PSAwICYmIGkgPCBudW1Nb250aERheXMgJiYgaSAhPSAoZGVsdGEgPiAwID8gbnVtTW9udGhEYXlzIDogLTEpOyBpICs9IGxvb3BEZWx0YSkge1xuICAgICAgICAgICAgICAgIHZhciBjID0gbW9udGguY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgaWYgKGMuY2xhc3NOYW1lLmluZGV4T2YoXCJoaWRkZW5cIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgIGlzRW5hYmxlZChjLmRhdGVPYmopICYmXG4gICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKGN1cnJlbnQuJGkgLSBpKSA+PSBNYXRoLmFicyhkZWx0YSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb2N1c09uRGF5RWxlbShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZWxmLmNoYW5nZU1vbnRoKGxvb3BEZWx0YSk7XG4gICAgICAgIGZvY3VzT25EYXkoZ2V0Rmlyc3RBdmFpbGFibGVEYXkobG9vcERlbHRhKSwgMCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvY3VzT25EYXkoY3VycmVudCwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gZ2V0Q2xvc2VzdEFjdGl2ZUVsZW1lbnQoKTtcbiAgICAgICAgdmFyIGRheUZvY3VzZWQgPSBpc0luVmlldyhhY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkpO1xuICAgICAgICB2YXIgc3RhcnRFbGVtID0gY3VycmVudCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGN1cnJlbnRcbiAgICAgICAgICAgIDogZGF5Rm9jdXNlZFxuICAgICAgICAgICAgICAgID8gYWN0aXZlRWxlbWVudFxuICAgICAgICAgICAgICAgIDogc2VsZi5zZWxlY3RlZERhdGVFbGVtICE9PSB1bmRlZmluZWQgJiYgaXNJblZpZXcoc2VsZi5zZWxlY3RlZERhdGVFbGVtKVxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuc2VsZWN0ZWREYXRlRWxlbVxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYudG9kYXlEYXRlRWxlbSAhPT0gdW5kZWZpbmVkICYmIGlzSW5WaWV3KHNlbGYudG9kYXlEYXRlRWxlbSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi50b2RheURhdGVFbGVtXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGdldEZpcnN0QXZhaWxhYmxlRGF5KG9mZnNldCA+IDAgPyAxIDogLTEpO1xuICAgICAgICBpZiAoc3RhcnRFbGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGYuX2lucHV0LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWRheUZvY3VzZWQpIHtcbiAgICAgICAgICAgIGZvY3VzT25EYXlFbGVtKHN0YXJ0RWxlbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXROZXh0QXZhaWxhYmxlRGF5KHN0YXJ0RWxlbSwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZE1vbnRoRGF5cyh5ZWFyLCBtb250aCkge1xuICAgICAgICB2YXIgZmlyc3RPZk1vbnRoID0gKG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKS5nZXREYXkoKSAtIHNlbGYubDEwbi5maXJzdERheU9mV2VlayArIDcpICUgNztcbiAgICAgICAgdmFyIHByZXZNb250aERheXMgPSBzZWxmLnV0aWxzLmdldERheXNJbk1vbnRoKChtb250aCAtIDEgKyAxMikgJSAxMiwgeWVhcik7XG4gICAgICAgIHZhciBkYXlzSW5Nb250aCA9IHNlbGYudXRpbHMuZ2V0RGF5c0luTW9udGgobW9udGgsIHllYXIpLCBkYXlzID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgaXNNdWx0aU1vbnRoID0gc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEsIHByZXZNb250aERheUNsYXNzID0gaXNNdWx0aU1vbnRoID8gXCJwcmV2TW9udGhEYXkgaGlkZGVuXCIgOiBcInByZXZNb250aERheVwiLCBuZXh0TW9udGhEYXlDbGFzcyA9IGlzTXVsdGlNb250aCA/IFwibmV4dE1vbnRoRGF5IGhpZGRlblwiIDogXCJuZXh0TW9udGhEYXlcIjtcbiAgICAgICAgdmFyIGRheU51bWJlciA9IHByZXZNb250aERheXMgKyAxIC0gZmlyc3RPZk1vbnRoLCBkYXlJbmRleCA9IDA7XG4gICAgICAgIGZvciAoOyBkYXlOdW1iZXIgPD0gcHJldk1vbnRoRGF5czsgZGF5TnVtYmVyKyssIGRheUluZGV4KyspIHtcbiAgICAgICAgICAgIGRheXMuYXBwZW5kQ2hpbGQoY3JlYXRlRGF5KFwiZmxhdHBpY2tyLWRheSBcIiArIHByZXZNb250aERheUNsYXNzLCBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheU51bWJlciksIGRheU51bWJlciwgZGF5SW5kZXgpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGRheU51bWJlciA9IDE7IGRheU51bWJlciA8PSBkYXlzSW5Nb250aDsgZGF5TnVtYmVyKyssIGRheUluZGV4KyspIHtcbiAgICAgICAgICAgIGRheXMuYXBwZW5kQ2hpbGQoY3JlYXRlRGF5KFwiZmxhdHBpY2tyLWRheVwiLCBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5TnVtYmVyKSwgZGF5TnVtYmVyLCBkYXlJbmRleCkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGRheU51bSA9IGRheXNJbk1vbnRoICsgMTsgZGF5TnVtIDw9IDQyIC0gZmlyc3RPZk1vbnRoICYmXG4gICAgICAgICAgICAoc2VsZi5jb25maWcuc2hvd01vbnRocyA9PT0gMSB8fCBkYXlJbmRleCAlIDcgIT09IDApOyBkYXlOdW0rKywgZGF5SW5kZXgrKykge1xuICAgICAgICAgICAgZGF5cy5hcHBlbmRDaGlsZChjcmVhdGVEYXkoXCJmbGF0cGlja3ItZGF5IFwiICsgbmV4dE1vbnRoRGF5Q2xhc3MsIG5ldyBEYXRlKHllYXIsIG1vbnRoICsgMSwgZGF5TnVtICUgZGF5c0luTW9udGgpLCBkYXlOdW0sIGRheUluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheUNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJkYXlDb250YWluZXJcIik7XG4gICAgICAgIGRheUNvbnRhaW5lci5hcHBlbmRDaGlsZChkYXlzKTtcbiAgICAgICAgcmV0dXJuIGRheUNvbnRhaW5lcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGREYXlzKCkge1xuICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjbGVhck5vZGUoc2VsZi5kYXlzQ29udGFpbmVyKTtcbiAgICAgICAgaWYgKHNlbGYud2Vla051bWJlcnMpXG4gICAgICAgICAgICBjbGVhck5vZGUoc2VsZi53ZWVrTnVtYmVycyk7XG4gICAgICAgIHZhciBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuY29uZmlnLnNob3dNb250aHM7IGkrKykge1xuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShzZWxmLmN1cnJlbnRZZWFyLCBzZWxmLmN1cnJlbnRNb250aCwgMSk7XG4gICAgICAgICAgICBkLnNldE1vbnRoKHNlbGYuY3VycmVudE1vbnRoICsgaSk7XG4gICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGJ1aWxkTW9udGhEYXlzKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWcpO1xuICAgICAgICBzZWxmLmRheXMgPSBzZWxmLmRheXNDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIiAmJiBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBvbk1vdXNlT3ZlcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkTW9udGhTd2l0Y2goKSB7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5zaG93TW9udGhzID4gMSB8fFxuICAgICAgICAgICAgc2VsZi5jb25maWcubW9udGhTZWxlY3RvclR5cGUgIT09IFwiZHJvcGRvd25cIilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHNob3VsZEJ1aWxkTW9udGggPSBmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkgJiZcbiAgICAgICAgICAgICAgICBtb250aCA8IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0TW9udGgoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAhKHNlbGYuY29uZmlnLm1heERhdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSAmJlxuICAgICAgICAgICAgICAgIG1vbnRoID4gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRNb250aCgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgc2VsZi5tb250aHNEcm9wZG93bkNvbnRhaW5lci50YWJJbmRleCA9IC0xO1xuICAgICAgICBzZWxmLm1vbnRoc0Ryb3Bkb3duQ29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFzaG91bGRCdWlsZE1vbnRoKGkpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCBcImZsYXRwaWNrci1tb250aERyb3Bkb3duLW1vbnRoXCIpO1xuICAgICAgICAgICAgbW9udGgudmFsdWUgPSBuZXcgRGF0ZShzZWxmLmN1cnJlbnRZZWFyLCBpKS5nZXRNb250aCgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBtb250aC50ZXh0Q29udGVudCA9IG1vbnRoVG9TdHIoaSwgc2VsZi5jb25maWcuc2hvcnRoYW5kQ3VycmVudE1vbnRoLCBzZWxmLmwxMG4pO1xuICAgICAgICAgICAgbW9udGgudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgIGlmIChzZWxmLmN1cnJlbnRNb250aCA9PT0gaSkge1xuICAgICAgICAgICAgICAgIG1vbnRoLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIuYXBwZW5kQ2hpbGQobW9udGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkTW9udGgoKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLW1vbnRoXCIpO1xuICAgICAgICB2YXIgbW9udGhOYXZGcmFnbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIHZhciBtb250aEVsZW1lbnQ7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5zaG93TW9udGhzID4gMSB8fFxuICAgICAgICAgICAgc2VsZi5jb25maWcubW9udGhTZWxlY3RvclR5cGUgPT09IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgIG1vbnRoRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiY3VyLW1vbnRoXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5tb250aHNEcm9wZG93bkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwgXCJmbGF0cGlja3ItbW9udGhEcm9wZG93bi1tb250aHNcIik7XG4gICAgICAgICAgICBzZWxmLm1vbnRoc0Ryb3Bkb3duQ29udGFpbmVyLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgc2VsZi5sMTBuLm1vbnRoQXJpYUxhYmVsKTtcbiAgICAgICAgICAgIGJpbmQoc2VsZi5tb250aHNEcm9wZG93bkNvbnRhaW5lciwgXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZSk7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkTW9udGggPSBwYXJzZUludCh0YXJnZXQudmFsdWUsIDEwKTtcbiAgICAgICAgICAgICAgICBzZWxmLmNoYW5nZU1vbnRoKHNlbGVjdGVkTW9udGggLSBzZWxmLmN1cnJlbnRNb250aCk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25Nb250aENoYW5nZVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpO1xuICAgICAgICAgICAgbW9udGhFbGVtZW50ID0gc2VsZi5tb250aHNEcm9wZG93bkNvbnRhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgeWVhcklucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJjdXIteWVhclwiLCB7IHRhYmluZGV4OiBcIi0xXCIgfSk7XG4gICAgICAgIHZhciB5ZWFyRWxlbWVudCA9IHllYXJJbnB1dC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWzBdO1xuICAgICAgICB5ZWFyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHNlbGYubDEwbi55ZWFyQXJpYUxhYmVsKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1pbkRhdGUpIHtcbiAgICAgICAgICAgIHllYXJFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1pblwiLCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heERhdGUpIHtcbiAgICAgICAgICAgIHllYXJFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1heFwiLCBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB5ZWFyRWxlbWVudC5kaXNhYmxlZCA9XG4gICAgICAgICAgICAgICAgISFzZWxmLmNvbmZpZy5taW5EYXRlICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKSA9PT0gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50TW9udGggPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWN1cnJlbnQtbW9udGhcIik7XG4gICAgICAgIGN1cnJlbnRNb250aC5hcHBlbmRDaGlsZChtb250aEVsZW1lbnQpO1xuICAgICAgICBjdXJyZW50TW9udGguYXBwZW5kQ2hpbGQoeWVhcklucHV0KTtcbiAgICAgICAgbW9udGhOYXZGcmFnbWVudC5hcHBlbmRDaGlsZChjdXJyZW50TW9udGgpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobW9udGhOYXZGcmFnbWVudCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgICAgIHllYXJFbGVtZW50OiB5ZWFyRWxlbWVudCxcbiAgICAgICAgICAgIG1vbnRoRWxlbWVudDogbW9udGhFbGVtZW50LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZE1vbnRocygpIHtcbiAgICAgICAgY2xlYXJOb2RlKHNlbGYubW9udGhOYXYpO1xuICAgICAgICBzZWxmLm1vbnRoTmF2LmFwcGVuZENoaWxkKHNlbGYucHJldk1vbnRoTmF2KTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLnNob3dNb250aHMpIHtcbiAgICAgICAgICAgIHNlbGYueWVhckVsZW1lbnRzID0gW107XG4gICAgICAgICAgICBzZWxmLm1vbnRoRWxlbWVudHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBtID0gc2VsZi5jb25maWcuc2hvd01vbnRoczsgbS0tOykge1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gYnVpbGRNb250aCgpO1xuICAgICAgICAgICAgc2VsZi55ZWFyRWxlbWVudHMucHVzaChtb250aC55ZWFyRWxlbWVudCk7XG4gICAgICAgICAgICBzZWxmLm1vbnRoRWxlbWVudHMucHVzaChtb250aC5tb250aEVsZW1lbnQpO1xuICAgICAgICAgICAgc2VsZi5tb250aE5hdi5hcHBlbmRDaGlsZChtb250aC5jb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYubW9udGhOYXYuYXBwZW5kQ2hpbGQoc2VsZi5uZXh0TW9udGhOYXYpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZE1vbnRoTmF2KCkge1xuICAgICAgICBzZWxmLm1vbnRoTmF2ID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1tb250aHNcIik7XG4gICAgICAgIHNlbGYueWVhckVsZW1lbnRzID0gW107XG4gICAgICAgIHNlbGYubW9udGhFbGVtZW50cyA9IFtdO1xuICAgICAgICBzZWxmLnByZXZNb250aE5hdiA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXByZXYtbW9udGhcIik7XG4gICAgICAgIHNlbGYucHJldk1vbnRoTmF2LmlubmVySFRNTCA9IHNlbGYuY29uZmlnLnByZXZBcnJvdztcbiAgICAgICAgc2VsZi5uZXh0TW9udGhOYXYgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci1uZXh0LW1vbnRoXCIpO1xuICAgICAgICBzZWxmLm5leHRNb250aE5hdi5pbm5lckhUTUwgPSBzZWxmLmNvbmZpZy5uZXh0QXJyb3c7XG4gICAgICAgIGJ1aWxkTW9udGhzKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBcIl9oaWRlUHJldk1vbnRoQXJyb3dcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLl9faGlkZVByZXZNb250aEFycm93OyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLl9faGlkZVByZXZNb250aEFycm93ICE9PSBib29sKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYucHJldk1vbnRoTmF2LCBcImZsYXRwaWNrci1kaXNhYmxlZFwiLCBib29sKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fX2hpZGVQcmV2TW9udGhBcnJvdyA9IGJvb2w7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBcIl9oaWRlTmV4dE1vbnRoQXJyb3dcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLl9faGlkZU5leHRNb250aEFycm93OyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLl9faGlkZU5leHRNb250aEFycm93ICE9PSBib29sKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYubmV4dE1vbnRoTmF2LCBcImZsYXRwaWNrci1kaXNhYmxlZFwiLCBib29sKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fX2hpZGVOZXh0TW9udGhBcnJvdyA9IGJvb2w7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGYuY3VycmVudFllYXJFbGVtZW50ID0gc2VsZi55ZWFyRWxlbWVudHNbMF07XG4gICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcbiAgICAgICAgcmV0dXJuIHNlbGYubW9udGhOYXY7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkVGltZSgpIHtcbiAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGFzVGltZVwiKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIpXG4gICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJub0NhbGVuZGFyXCIpO1xuICAgICAgICB2YXIgZGVmYXVsdHMgPSBnZXREZWZhdWx0SG91cnMoc2VsZi5jb25maWcpO1xuICAgICAgICBzZWxmLnRpbWVDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXRpbWVcIik7XG4gICAgICAgIHNlbGYudGltZUNvbnRhaW5lci50YWJJbmRleCA9IC0xO1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItdGltZS1zZXBhcmF0b3JcIiwgXCI6XCIpO1xuICAgICAgICB2YXIgaG91cklucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJmbGF0cGlja3ItaG91clwiLCB7XG4gICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogc2VsZi5sMTBuLmhvdXJBcmlhTGFiZWwsXG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLmhvdXJFbGVtZW50ID0gaG91cklucHV0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIilbMF07XG4gICAgICAgIHZhciBtaW51dGVJbnB1dCA9IGNyZWF0ZU51bWJlcklucHV0KFwiZmxhdHBpY2tyLW1pbnV0ZVwiLCB7XG4gICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogc2VsZi5sMTBuLm1pbnV0ZUFyaWFMYWJlbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudCA9IG1pbnV0ZUlucHV0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIilbMF07XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQudGFiSW5kZXggPSBzZWxmLm1pbnV0ZUVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgc2VsZi5ob3VyRWxlbWVudC52YWx1ZSA9IHBhZChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9ialxuICAgICAgICAgICAgPyBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5nZXRIb3VycygpXG4gICAgICAgICAgICA6IHNlbGYuY29uZmlnLnRpbWVfMjRoclxuICAgICAgICAgICAgICAgID8gZGVmYXVsdHMuaG91cnNcbiAgICAgICAgICAgICAgICA6IG1pbGl0YXJ5MmFtcG0oZGVmYXVsdHMuaG91cnMpKTtcbiAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnZhbHVlID0gcGFkKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqXG4gICAgICAgICAgICA/IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLmdldE1pbnV0ZXMoKVxuICAgICAgICAgICAgOiBkZWZhdWx0cy5taW51dGVzKTtcbiAgICAgICAgc2VsZi5ob3VyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIHNlbGYuY29uZmlnLmhvdXJJbmNyZW1lbnQudG9TdHJpbmcoKSk7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIHNlbGYuY29uZmlnLm1pbnV0ZUluY3JlbWVudC50b1N0cmluZygpKTtcbiAgICAgICAgc2VsZi5ob3VyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgc2VsZi5jb25maWcudGltZV8yNGhyID8gXCIwXCIgOiBcIjFcIik7XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWF4XCIsIHNlbGYuY29uZmlnLnRpbWVfMjRociA/IFwiMjNcIiA6IFwiMTJcIik7XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWF4bGVuZ3RoXCIsIFwiMlwiKTtcbiAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1pblwiLCBcIjBcIik7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgXCI1OVwiKTtcbiAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1heGxlbmd0aFwiLCBcIjJcIik7XG4gICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChob3VySW5wdXQpO1xuICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VwYXJhdG9yKTtcbiAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKG1pbnV0ZUlucHV0KTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLnRpbWVfMjRocilcbiAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidGltZTI0aHJcIik7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVTZWNvbmRzKSB7XG4gICAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhc1NlY29uZHNcIik7XG4gICAgICAgICAgICB2YXIgc2Vjb25kSW5wdXQgPSBjcmVhdGVOdW1iZXJJbnB1dChcImZsYXRwaWNrci1zZWNvbmRcIik7XG4gICAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQgPSBzZWNvbmRJbnB1dC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWzBdO1xuICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlID0gcGFkKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqXG4gICAgICAgICAgICAgICAgPyBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5nZXRTZWNvbmRzKClcbiAgICAgICAgICAgICAgICA6IGRlZmF1bHRzLnNlY29uZHMpO1xuICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnNldEF0dHJpYnV0ZShcInN0ZXBcIiwgc2VsZi5taW51dGVFbGVtZW50LmdldEF0dHJpYnV0ZShcInN0ZXBcIikpO1xuICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1pblwiLCBcIjBcIik7XG4gICAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWF4XCIsIFwiNTlcIik7XG4gICAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWF4bGVuZ3RoXCIsIFwiMlwiKTtcbiAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci10aW1lLXNlcGFyYXRvclwiLCBcIjpcIikpO1xuICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY29uZElucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNlbGYuY29uZmlnLnRpbWVfMjRocikge1xuICAgICAgICAgICAgc2VsZi5hbVBNID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItYW0tcG1cIiwgc2VsZi5sMTBuLmFtUE1baW50KChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9ialxuICAgICAgICAgICAgICAgID8gc2VsZi5ob3VyRWxlbWVudC52YWx1ZVxuICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcuZGVmYXVsdEhvdXIpID4gMTEpXSk7XG4gICAgICAgICAgICBzZWxmLmFtUE0udGl0bGUgPSBzZWxmLmwxMG4udG9nZ2xlVGl0bGU7XG4gICAgICAgICAgICBzZWxmLmFtUE0udGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxmLmFtUE0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxmLnRpbWVDb250YWluZXI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkV2Vla2RheXMoKSB7XG4gICAgICAgIGlmICghc2VsZi53ZWVrZGF5Q29udGFpbmVyKVxuICAgICAgICAgICAgc2VsZi53ZWVrZGF5Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13ZWVrZGF5c1wiKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY2xlYXJOb2RlKHNlbGYud2Vla2RheUNvbnRhaW5lcik7XG4gICAgICAgIGZvciAodmFyIGkgPSBzZWxmLmNvbmZpZy5zaG93TW9udGhzOyBpLS07KSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13ZWVrZGF5Y29udGFpbmVyXCIpO1xuICAgICAgICAgICAgc2VsZi53ZWVrZGF5Q29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlV2Vla2RheXMoKTtcbiAgICAgICAgcmV0dXJuIHNlbGYud2Vla2RheUNvbnRhaW5lcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlV2Vla2RheXMoKSB7XG4gICAgICAgIGlmICghc2VsZi53ZWVrZGF5Q29udGFpbmVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZpcnN0RGF5T2ZXZWVrID0gc2VsZi5sMTBuLmZpcnN0RGF5T2ZXZWVrO1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBfX3NwcmVhZEFycmF5cyhzZWxmLmwxMG4ud2Vla2RheXMuc2hvcnRoYW5kKTtcbiAgICAgICAgaWYgKGZpcnN0RGF5T2ZXZWVrID4gMCAmJiBmaXJzdERheU9mV2VlayA8IHdlZWtkYXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgd2Vla2RheXMgPSBfX3NwcmVhZEFycmF5cyh3ZWVrZGF5cy5zcGxpY2UoZmlyc3REYXlPZldlZWssIHdlZWtkYXlzLmxlbmd0aCksIHdlZWtkYXlzLnNwbGljZSgwLCBmaXJzdERheU9mV2VlaykpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSBzZWxmLmNvbmZpZy5zaG93TW9udGhzOyBpLS07KSB7XG4gICAgICAgICAgICBzZWxmLndlZWtkYXlDb250YWluZXIuY2hpbGRyZW5baV0uaW5uZXJIVE1MID0gXCJcXG4gICAgICA8c3BhbiBjbGFzcz0nZmxhdHBpY2tyLXdlZWtkYXknPlxcbiAgICAgICAgXCIgKyB3ZWVrZGF5cy5qb2luKFwiPC9zcGFuPjxzcGFuIGNsYXNzPSdmbGF0cGlja3Itd2Vla2RheSc+XCIpICsgXCJcXG4gICAgICA8L3NwYW4+XFxuICAgICAgXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRXZWVrcygpIHtcbiAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGFzV2Vla3NcIik7XG4gICAgICAgIHZhciB3ZWVrV3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd2Vla3dyYXBwZXJcIik7XG4gICAgICAgIHdlZWtXcmFwcGVyLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXdlZWtkYXlcIiwgc2VsZi5sMTBuLndlZWtBYmJyZXZpYXRpb24pKTtcbiAgICAgICAgdmFyIHdlZWtOdW1iZXJzID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13ZWVrc1wiKTtcbiAgICAgICAgd2Vla1dyYXBwZXIuYXBwZW5kQ2hpbGQod2Vla051bWJlcnMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2Vla1dyYXBwZXI6IHdlZWtXcmFwcGVyLFxuICAgICAgICAgICAgd2Vla051bWJlcnM6IHdlZWtOdW1iZXJzLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGFuZ2VNb250aCh2YWx1ZSwgaXNPZmZzZXQpIHtcbiAgICAgICAgaWYgKGlzT2Zmc2V0ID09PSB2b2lkIDApIHsgaXNPZmZzZXQgPSB0cnVlOyB9XG4gICAgICAgIHZhciBkZWx0YSA9IGlzT2Zmc2V0ID8gdmFsdWUgOiB2YWx1ZSAtIHNlbGYuY3VycmVudE1vbnRoO1xuICAgICAgICBpZiAoKGRlbHRhIDwgMCAmJiBzZWxmLl9oaWRlUHJldk1vbnRoQXJyb3cgPT09IHRydWUpIHx8XG4gICAgICAgICAgICAoZGVsdGEgPiAwICYmIHNlbGYuX2hpZGVOZXh0TW9udGhBcnJvdyA9PT0gdHJ1ZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHNlbGYuY3VycmVudE1vbnRoICs9IGRlbHRhO1xuICAgICAgICBpZiAoc2VsZi5jdXJyZW50TW9udGggPCAwIHx8IHNlbGYuY3VycmVudE1vbnRoID4gMTEpIHtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgKz0gc2VsZi5jdXJyZW50TW9udGggPiAxMSA/IDEgOiAtMTtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gKHNlbGYuY3VycmVudE1vbnRoICsgMTIpICUgMTI7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblllYXJDaGFuZ2VcIik7XG4gICAgICAgICAgICBidWlsZE1vbnRoU3dpdGNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnVpbGREYXlzKCk7XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm9uTW9udGhDaGFuZ2VcIik7XG4gICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xlYXIodHJpZ2dlckNoYW5nZUV2ZW50LCB0b0luaXRpYWwpIHtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCA9PT0gdm9pZCAwKSB7IHRyaWdnZXJDaGFuZ2VFdmVudCA9IHRydWU7IH1cbiAgICAgICAgaWYgKHRvSW5pdGlhbCA9PT0gdm9pZCAwKSB7IHRvSW5pdGlhbCA9IHRydWU7IH1cbiAgICAgICAgc2VsZi5pbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIGlmIChzZWxmLmFsdElucHV0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBzZWxmLmFsdElucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBbXTtcbiAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0b0luaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBzZWxmLl9pbml0aWFsRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBzZWxmLl9pbml0aWFsRGF0ZS5nZXRNb250aCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lID09PSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBnZXREZWZhdWx0SG91cnMoc2VsZi5jb25maWcpLCBob3VycyA9IF9hLmhvdXJzLCBtaW51dGVzID0gX2EubWludXRlcywgc2Vjb25kcyA9IF9hLnNlY29uZHM7XG4gICAgICAgICAgICBzZXRIb3Vycyhob3VycywgbWludXRlcywgc2Vjb25kcyk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5yZWRyYXcoKTtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudClcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uQ2hhbmdlXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgc2VsZi5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgaWYgKCFzZWxmLmlzTW9iaWxlKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5jYWxlbmRhckNvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwib3BlblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLl9pbnB1dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5faW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkNsb3NlXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBpZiAoc2VsZi5jb25maWcgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uRGVzdHJveVwiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHNlbGYuX2hhbmRsZXJzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgc2VsZi5faGFuZGxlcnNbaV0ucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5faGFuZGxlcnMgPSBbXTtcbiAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLm1vYmlsZUlucHV0LnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNlbGYubW9iaWxlSW5wdXQpO1xuICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxmLmNhbGVuZGFyQ29udGFpbmVyICYmIHNlbGYuY2FsZW5kYXJDb250YWluZXIucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLnN0YXRpYyAmJiBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IHNlbGYuY2FsZW5kYXJDb250YWluZXIucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmxhc3RDaGlsZCAmJiB3cmFwcGVyLnJlbW92ZUNoaWxkKHdyYXBwZXIubGFzdENoaWxkKTtcbiAgICAgICAgICAgICAgICBpZiAod3JhcHBlci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh3cmFwcGVyLmZpcnN0Q2hpbGQpXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdyYXBwZXIuZmlyc3RDaGlsZCwgd3JhcHBlcik7XG4gICAgICAgICAgICAgICAgICAgIHdyYXBwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3cmFwcGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNlbGYuY2FsZW5kYXJDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmFsdElucHV0KSB7XG4gICAgICAgICAgICBzZWxmLmlucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgICAgIGlmIChzZWxmLmFsdElucHV0LnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNlbGYuYWx0SW5wdXQpO1xuICAgICAgICAgICAgZGVsZXRlIHNlbGYuYWx0SW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuaW5wdXQpIHtcbiAgICAgICAgICAgIHNlbGYuaW5wdXQudHlwZSA9IHNlbGYuaW5wdXQuX3R5cGU7XG4gICAgICAgICAgICBzZWxmLmlucHV0LmNsYXNzTGlzdC5yZW1vdmUoXCJmbGF0cGlja3ItaW5wdXRcIik7XG4gICAgICAgICAgICBzZWxmLmlucHV0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpO1xuICAgICAgICB9XG4gICAgICAgIFtcbiAgICAgICAgICAgIFwiX3Nob3dUaW1lSW5wdXRcIixcbiAgICAgICAgICAgIFwibGF0ZXN0U2VsZWN0ZWREYXRlT2JqXCIsXG4gICAgICAgICAgICBcIl9oaWRlTmV4dE1vbnRoQXJyb3dcIixcbiAgICAgICAgICAgIFwiX2hpZGVQcmV2TW9udGhBcnJvd1wiLFxuICAgICAgICAgICAgXCJfX2hpZGVOZXh0TW9udGhBcnJvd1wiLFxuICAgICAgICAgICAgXCJfX2hpZGVQcmV2TW9udGhBcnJvd1wiLFxuICAgICAgICAgICAgXCJpc01vYmlsZVwiLFxuICAgICAgICAgICAgXCJpc09wZW5cIixcbiAgICAgICAgICAgIFwic2VsZWN0ZWREYXRlRWxlbVwiLFxuICAgICAgICAgICAgXCJtaW5EYXRlSGFzVGltZVwiLFxuICAgICAgICAgICAgXCJtYXhEYXRlSGFzVGltZVwiLFxuICAgICAgICAgICAgXCJkYXlzXCIsXG4gICAgICAgICAgICBcImRheXNDb250YWluZXJcIixcbiAgICAgICAgICAgIFwiX2lucHV0XCIsXG4gICAgICAgICAgICBcIl9wb3NpdGlvbkVsZW1lbnRcIixcbiAgICAgICAgICAgIFwiaW5uZXJDb250YWluZXJcIixcbiAgICAgICAgICAgIFwickNvbnRhaW5lclwiLFxuICAgICAgICAgICAgXCJtb250aE5hdlwiLFxuICAgICAgICAgICAgXCJ0b2RheURhdGVFbGVtXCIsXG4gICAgICAgICAgICBcImNhbGVuZGFyQ29udGFpbmVyXCIsXG4gICAgICAgICAgICBcIndlZWtkYXlDb250YWluZXJcIixcbiAgICAgICAgICAgIFwicHJldk1vbnRoTmF2XCIsXG4gICAgICAgICAgICBcIm5leHRNb250aE5hdlwiLFxuICAgICAgICAgICAgXCJtb250aHNEcm9wZG93bkNvbnRhaW5lclwiLFxuICAgICAgICAgICAgXCJjdXJyZW50TW9udGhFbGVtZW50XCIsXG4gICAgICAgICAgICBcImN1cnJlbnRZZWFyRWxlbWVudFwiLFxuICAgICAgICAgICAgXCJuYXZpZ2F0aW9uQ3VycmVudE1vbnRoXCIsXG4gICAgICAgICAgICBcInNlbGVjdGVkRGF0ZUVsZW1cIixcbiAgICAgICAgICAgIFwiY29uZmlnXCIsXG4gICAgICAgIF0uZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2VsZltrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfKSB7IH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQ2FsZW5kYXJFbGVtKGVsZW0pIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY29udGFpbnMoZWxlbSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRvY3VtZW50Q2xpY2soZSkge1xuICAgICAgICBpZiAoc2VsZi5pc09wZW4gJiYgIXNlbGYuY29uZmlnLmlubGluZSkge1xuICAgICAgICAgICAgdmFyIGV2ZW50VGFyZ2V0XzEgPSBnZXRFdmVudFRhcmdldChlKTtcbiAgICAgICAgICAgIHZhciBpc0NhbGVuZGFyRWxlbWVudCA9IGlzQ2FsZW5kYXJFbGVtKGV2ZW50VGFyZ2V0XzEpO1xuICAgICAgICAgICAgdmFyIGlzSW5wdXQgPSBldmVudFRhcmdldF8xID09PSBzZWxmLmlucHV0IHx8XG4gICAgICAgICAgICAgICAgZXZlbnRUYXJnZXRfMSA9PT0gc2VsZi5hbHRJbnB1dCB8fFxuICAgICAgICAgICAgICAgIHNlbGYuZWxlbWVudC5jb250YWlucyhldmVudFRhcmdldF8xKSB8fFxuICAgICAgICAgICAgICAgIChlLnBhdGggJiZcbiAgICAgICAgICAgICAgICAgICAgZS5wYXRoLmluZGV4T2YgJiZcbiAgICAgICAgICAgICAgICAgICAgKH5lLnBhdGguaW5kZXhPZihzZWxmLmlucHV0KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgfmUucGF0aC5pbmRleE9mKHNlbGYuYWx0SW5wdXQpKSk7XG4gICAgICAgICAgICB2YXIgbG9zdEZvY3VzID0gIWlzSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAhaXNDYWxlbmRhckVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICAhaXNDYWxlbmRhckVsZW0oZS5yZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciBpc0lnbm9yZWQgPSAhc2VsZi5jb25maWcuaWdub3JlZEZvY3VzRWxlbWVudHMuc29tZShmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmNvbnRhaW5zKGV2ZW50VGFyZ2V0XzEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobG9zdEZvY3VzICYmIGlzSWdub3JlZCkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hbGxvd0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0RGF0ZShzZWxmLl9pbnB1dC52YWx1ZSwgZmFsc2UsIHNlbGYuY29uZmlnLmFsdElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLmFsdEZvcm1hdFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYudGltZUNvbnRhaW5lciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWludXRlRWxlbWVudCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnZhbHVlICE9PSBcIlwiICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5wdXQudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVUaW1lKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXIoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoYW5nZVllYXIobmV3WWVhcikge1xuICAgICAgICBpZiAoIW5ld1llYXIgfHxcbiAgICAgICAgICAgIChzZWxmLmNvbmZpZy5taW5EYXRlICYmIG5ld1llYXIgPCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkpIHx8XG4gICAgICAgICAgICAoc2VsZi5jb25maWcubWF4RGF0ZSAmJiBuZXdZZWFyID4gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIG5ld1llYXJOdW0gPSBuZXdZZWFyLCBpc05ld1llYXIgPSBzZWxmLmN1cnJlbnRZZWFyICE9PSBuZXdZZWFyTnVtO1xuICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID0gbmV3WWVhck51bSB8fCBzZWxmLmN1cnJlbnRZZWFyO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4RGF0ZSAmJlxuICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9PT0gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IE1hdGgubWluKHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKSwgc2VsZi5jdXJyZW50TW9udGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlbGYuY29uZmlnLm1pbkRhdGUgJiZcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKSkge1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBNYXRoLm1heChzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1vbnRoKCksIHNlbGYuY3VycmVudE1vbnRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXdZZWFyKSB7XG4gICAgICAgICAgICBzZWxmLnJlZHJhdygpO1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25ZZWFyQ2hhbmdlXCIpO1xuICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzRW5hYmxlZChkYXRlLCB0aW1lbGVzcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aW1lbGVzcyA9PT0gdm9pZCAwKSB7IHRpbWVsZXNzID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgZGF0ZVRvQ2hlY2sgPSBzZWxmLnBhcnNlRGF0ZShkYXRlLCB1bmRlZmluZWQsIHRpbWVsZXNzKTtcbiAgICAgICAgaWYgKChzZWxmLmNvbmZpZy5taW5EYXRlICYmXG4gICAgICAgICAgICBkYXRlVG9DaGVjayAmJlxuICAgICAgICAgICAgY29tcGFyZURhdGVzKGRhdGVUb0NoZWNrLCBzZWxmLmNvbmZpZy5taW5EYXRlLCB0aW1lbGVzcyAhPT0gdW5kZWZpbmVkID8gdGltZWxlc3MgOiAhc2VsZi5taW5EYXRlSGFzVGltZSkgPCAwKSB8fFxuICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1heERhdGUgJiZcbiAgICAgICAgICAgICAgICBkYXRlVG9DaGVjayAmJlxuICAgICAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhkYXRlVG9DaGVjaywgc2VsZi5jb25maWcubWF4RGF0ZSwgdGltZWxlc3MgIT09IHVuZGVmaW5lZCA/IHRpbWVsZXNzIDogIXNlbGYubWF4RGF0ZUhhc1RpbWUpID4gMCkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghc2VsZi5jb25maWcuZW5hYmxlICYmIHNlbGYuY29uZmlnLmRpc2FibGUubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChkYXRlVG9DaGVjayA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgYm9vbCA9ICEhc2VsZi5jb25maWcuZW5hYmxlLCBhcnJheSA9IChfYSA9IHNlbGYuY29uZmlnLmVuYWJsZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogc2VsZi5jb25maWcuZGlzYWJsZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGQgPSB2b2lkIDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZCA9IGFycmF5W2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICBkKGRhdGVUb0NoZWNrKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9vbDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGQgaW5zdGFuY2VvZiBEYXRlICYmXG4gICAgICAgICAgICAgICAgZGF0ZVRvQ2hlY2sgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIGQuZ2V0VGltZSgpID09PSBkYXRlVG9DaGVjay5nZXRUaW1lKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvb2w7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBzZWxmLnBhcnNlRGF0ZShkLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQgJiYgcGFyc2VkLmdldFRpbWUoKSA9PT0gZGF0ZVRvQ2hlY2suZ2V0VGltZSgpXG4gICAgICAgICAgICAgICAgICAgID8gYm9vbFxuICAgICAgICAgICAgICAgICAgICA6ICFib29sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgICAgICBkYXRlVG9DaGVjayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgZC5mcm9tICYmXG4gICAgICAgICAgICAgICAgZC50byAmJlxuICAgICAgICAgICAgICAgIGRhdGVUb0NoZWNrLmdldFRpbWUoKSA+PSBkLmZyb20uZ2V0VGltZSgpICYmXG4gICAgICAgICAgICAgICAgZGF0ZVRvQ2hlY2suZ2V0VGltZSgpIDw9IGQudG8uZ2V0VGltZSgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBib29sO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhYm9vbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNJblZpZXcoZWxlbSkge1xuICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gKGVsZW0uY2xhc3NOYW1lLmluZGV4T2YoXCJoaWRkZW5cIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc05hbWUuaW5kZXhPZihcImZsYXRwaWNrci1kaXNhYmxlZFwiKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICBzZWxmLmRheXNDb250YWluZXIuY29udGFpbnMoZWxlbSkpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQmx1cihlKSB7XG4gICAgICAgIHZhciBpc0lucHV0ID0gZS50YXJnZXQgPT09IHNlbGYuX2lucHV0O1xuICAgICAgICB2YXIgdmFsdWVDaGFuZ2VkID0gc2VsZi5faW5wdXQudmFsdWUudHJpbUVuZCgpICE9PSBnZXREYXRlU3RyKCk7XG4gICAgICAgIGlmIChpc0lucHV0ICYmXG4gICAgICAgICAgICB2YWx1ZUNoYW5nZWQgJiZcbiAgICAgICAgICAgICEoZS5yZWxhdGVkVGFyZ2V0ICYmIGlzQ2FsZW5kYXJFbGVtKGUucmVsYXRlZFRhcmdldCkpKSB7XG4gICAgICAgICAgICBzZWxmLnNldERhdGUoc2VsZi5faW5wdXQudmFsdWUsIHRydWUsIGUudGFyZ2V0ID09PSBzZWxmLmFsdElucHV0XG4gICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5hbHRGb3JtYXRcbiAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgICAgIHZhciBldmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICB2YXIgaXNJbnB1dCA9IHNlbGYuY29uZmlnLndyYXBcbiAgICAgICAgICAgID8gZWxlbWVudC5jb250YWlucyhldmVudFRhcmdldClcbiAgICAgICAgICAgIDogZXZlbnRUYXJnZXQgPT09IHNlbGYuX2lucHV0O1xuICAgICAgICB2YXIgYWxsb3dJbnB1dCA9IHNlbGYuY29uZmlnLmFsbG93SW5wdXQ7XG4gICAgICAgIHZhciBhbGxvd0tleWRvd24gPSBzZWxmLmlzT3BlbiAmJiAoIWFsbG93SW5wdXQgfHwgIWlzSW5wdXQpO1xuICAgICAgICB2YXIgYWxsb3dJbmxpbmVLZXlkb3duID0gc2VsZi5jb25maWcuaW5saW5lICYmIGlzSW5wdXQgJiYgIWFsbG93SW5wdXQ7XG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzICYmIGlzSW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChhbGxvd0lucHV0KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZXREYXRlKHNlbGYuX2lucHV0LnZhbHVlLCB0cnVlLCBldmVudFRhcmdldCA9PT0gc2VsZi5hbHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLmFsdEZvcm1hdFxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpO1xuICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRUYXJnZXQuYmx1cigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5vcGVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNDYWxlbmRhckVsZW0oZXZlbnRUYXJnZXQpIHx8XG4gICAgICAgICAgICBhbGxvd0tleWRvd24gfHxcbiAgICAgICAgICAgIGFsbG93SW5saW5lS2V5ZG93bikge1xuICAgICAgICAgICAgdmFyIGlzVGltZU9iaiA9ICEhc2VsZi50aW1lQ29udGFpbmVyICYmXG4gICAgICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmNvbnRhaW5zKGV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVGltZU9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNBbmRDbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdERhdGUoZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNBbmRDbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgY2FzZSA0NjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5wdXQgJiYgIXNlbGYuY29uZmlnLmFsbG93SW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNUaW1lT2JqICYmICFpc0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGdldENsb3Nlc3RBY3RpdmVFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYWxsb3dJbnB1dCA9PT0gZmFsc2UgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFjdGl2ZUVsZW1lbnQgJiYgaXNJblZpZXcoYWN0aXZlRWxlbWVudCkpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YV8xID0gZS5rZXlDb2RlID09PSAzOSA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWUuY3RybEtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNPbkRheSh1bmRlZmluZWQsIGRlbHRhXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VNb250aChkZWx0YV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNPbkRheShnZXRGaXJzdEF2YWlsYWJsZURheSgxKSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYuaG91ckVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLmtleUNvZGUgPT09IDQwID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHNlbGYuZGF5c0NvbnRhaW5lciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuJGkgIT09IHVuZGVmaW5lZCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0ID09PSBzZWxmLmlucHV0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldCA9PT0gc2VsZi5hbHRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlWWVhcihzZWxmLmN1cnJlbnRZZWFyIC0gZGVsdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzT25EYXkoZ2V0Rmlyc3RBdmFpbGFibGVEYXkoMSksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWlzVGltZU9iailcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c09uRGF5KHVuZGVmaW5lZCwgZGVsdGEgKiA3KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudFRhcmdldCA9PT0gc2VsZi5jdXJyZW50WWVhckVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVllYXIoc2VsZi5jdXJyZW50WWVhciAtIGRlbHRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVGltZU9iaiAmJiBzZWxmLmhvdXJFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9kZWJvdW5jZWRDaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RpbWVPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWludXRlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hbVBNLFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoc2VsZi5wbHVnaW5FbGVtZW50cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gZWxlbXMuaW5kZXhPZihldmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZWxlbXNbaSArIChlLnNoaWZ0S2V5ID8gLTEgOiAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0YXJnZXQgfHwgc2VsZi5faW5wdXQpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIXNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyLmNvbnRhaW5zKGV2ZW50VGFyZ2V0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5faW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQgJiYgZXZlbnRUYXJnZXQgPT09IHNlbGYuYW1QTSkge1xuICAgICAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgICAgIGNhc2Ugc2VsZi5sMTBuLmFtUE1bMF0uY2hhckF0KDApOlxuICAgICAgICAgICAgICAgIGNhc2Ugc2VsZi5sMTBuLmFtUE1bMF0uY2hhckF0KDApLnRvTG93ZXJDYXNlKCk6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9IHNlbGYubDEwbi5hbVBNWzBdO1xuICAgICAgICAgICAgICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBzZWxmLmwxMG4uYW1QTVsxXS5jaGFyQXQoMCk6XG4gICAgICAgICAgICAgICAgY2FzZSBzZWxmLmwxMG4uYW1QTVsxXS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKTpcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hbVBNLnRleHRDb250ZW50ID0gc2VsZi5sMTBuLmFtUE1bMV07XG4gICAgICAgICAgICAgICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJbnB1dCB8fCBpc0NhbGVuZGFyRWxlbShldmVudFRhcmdldCkpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uS2V5RG93blwiLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbk1vdXNlT3ZlcihlbGVtLCBjZWxsQ2xhc3MpIHtcbiAgICAgICAgaWYgKGNlbGxDbGFzcyA9PT0gdm9pZCAwKSB7IGNlbGxDbGFzcyA9IFwiZmxhdHBpY2tyLWRheVwiOyB9XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoICE9PSAxIHx8XG4gICAgICAgICAgICAoZWxlbSAmJlxuICAgICAgICAgICAgICAgICghZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoY2VsbENsYXNzKSB8fFxuICAgICAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhcImZsYXRwaWNrci1kaXNhYmxlZFwiKSkpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgaG92ZXJEYXRlID0gZWxlbVxuICAgICAgICAgICAgPyBlbGVtLmRhdGVPYmouZ2V0VGltZSgpXG4gICAgICAgICAgICA6IHNlbGYuZGF5cy5maXJzdEVsZW1lbnRDaGlsZC5kYXRlT2JqLmdldFRpbWUoKSwgaW5pdGlhbERhdGUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLnNlbGVjdGVkRGF0ZXNbMF0sIHVuZGVmaW5lZCwgdHJ1ZSkuZ2V0VGltZSgpLCByYW5nZVN0YXJ0RGF0ZSA9IE1hdGgubWluKGhvdmVyRGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSksIHJhbmdlRW5kRGF0ZSA9IE1hdGgubWF4KGhvdmVyRGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSk7XG4gICAgICAgIHZhciBjb250YWluc0Rpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBtaW5SYW5nZSA9IDAsIG1heFJhbmdlID0gMDtcbiAgICAgICAgZm9yICh2YXIgdCA9IHJhbmdlU3RhcnREYXRlOyB0IDwgcmFuZ2VFbmREYXRlOyB0ICs9IGR1cmF0aW9uLkRBWSkge1xuICAgICAgICAgICAgaWYgKCFpc0VuYWJsZWQobmV3IERhdGUodCksIHRydWUpKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbnNEaXNhYmxlZCA9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zRGlzYWJsZWQgfHwgKHQgPiByYW5nZVN0YXJ0RGF0ZSAmJiB0IDwgcmFuZ2VFbmREYXRlKTtcbiAgICAgICAgICAgICAgICBpZiAodCA8IGluaXRpYWxEYXRlICYmICghbWluUmFuZ2UgfHwgdCA+IG1pblJhbmdlKSlcbiAgICAgICAgICAgICAgICAgICAgbWluUmFuZ2UgPSB0O1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHQgPiBpbml0aWFsRGF0ZSAmJiAoIW1heFJhbmdlIHx8IHQgPCBtYXhSYW5nZSkpXG4gICAgICAgICAgICAgICAgICAgIG1heFJhbmdlID0gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgaG92ZXJhYmxlQ2VsbHMgPSBBcnJheS5mcm9tKHNlbGYuckNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiKjpudGgtY2hpbGQoLW4rXCIgKyBzZWxmLmNvbmZpZy5zaG93TW9udGhzICsgXCIpID4gLlwiICsgY2VsbENsYXNzKSk7XG4gICAgICAgIGhvdmVyYWJsZUNlbGxzLmZvckVhY2goZnVuY3Rpb24gKGRheUVsZW0pIHtcbiAgICAgICAgICAgIHZhciBkYXRlID0gZGF5RWxlbS5kYXRlT2JqO1xuICAgICAgICAgICAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgdmFyIG91dE9mUmFuZ2UgPSAobWluUmFuZ2UgPiAwICYmIHRpbWVzdGFtcCA8IG1pblJhbmdlKSB8fFxuICAgICAgICAgICAgICAgIChtYXhSYW5nZSA+IDAgJiYgdGltZXN0YW1wID4gbWF4UmFuZ2UpO1xuICAgICAgICAgICAgaWYgKG91dE9mUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBkYXlFbGVtLmNsYXNzTGlzdC5hZGQoXCJub3RBbGxvd2VkXCIpO1xuICAgICAgICAgICAgICAgIFtcImluUmFuZ2VcIiwgXCJzdGFydFJhbmdlXCIsIFwiZW5kUmFuZ2VcIl0uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgICAgICBkYXlFbGVtLmNsYXNzTGlzdC5yZW1vdmUoYyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29udGFpbnNEaXNhYmxlZCAmJiAhb3V0T2ZSYW5nZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBbXCJzdGFydFJhbmdlXCIsIFwiaW5SYW5nZVwiLCBcImVuZFJhbmdlXCIsIFwibm90QWxsb3dlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZWxlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKGhvdmVyRGF0ZSA8PSBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpXG4gICAgICAgICAgICAgICAgICAgID8gXCJzdGFydFJhbmdlXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcImVuZFJhbmdlXCIpO1xuICAgICAgICAgICAgICAgIGlmIChpbml0aWFsRGF0ZSA8IGhvdmVyRGF0ZSAmJiB0aW1lc3RhbXAgPT09IGluaXRpYWxEYXRlKVxuICAgICAgICAgICAgICAgICAgICBkYXlFbGVtLmNsYXNzTGlzdC5hZGQoXCJzdGFydFJhbmdlXCIpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluaXRpYWxEYXRlID4gaG92ZXJEYXRlICYmIHRpbWVzdGFtcCA9PT0gaW5pdGlhbERhdGUpXG4gICAgICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LmFkZChcImVuZFJhbmdlXCIpO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lc3RhbXAgPj0gbWluUmFuZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgKG1heFJhbmdlID09PSAwIHx8IHRpbWVzdGFtcCA8PSBtYXhSYW5nZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNCZXR3ZWVuKHRpbWVzdGFtcCwgaW5pdGlhbERhdGUsIGhvdmVyRGF0ZSkpXG4gICAgICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LmFkZChcImluUmFuZ2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKHNlbGYuaXNPcGVuICYmICFzZWxmLmNvbmZpZy5zdGF0aWMgJiYgIXNlbGYuY29uZmlnLmlubGluZSlcbiAgICAgICAgICAgIHBvc2l0aW9uQ2FsZW5kYXIoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb3BlbihlLCBwb3NpdGlvbkVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uRWxlbWVudCA9PT0gdm9pZCAwKSB7IHBvc2l0aW9uRWxlbWVudCA9IHNlbGYuX3Bvc2l0aW9uRWxlbWVudDsgfVxuICAgICAgICBpZiAoc2VsZi5pc01vYmlsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZSk7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmJsdXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQuY2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uT3BlblwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxmLl9pbnB1dC5kaXNhYmxlZCB8fCBzZWxmLmNvbmZpZy5pbmxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2FzT3BlbiA9IHNlbGYuaXNPcGVuO1xuICAgICAgICBzZWxmLmlzT3BlbiA9IHRydWU7XG4gICAgICAgIGlmICghd2FzT3Blbikge1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwib3BlblwiKTtcbiAgICAgICAgICAgIHNlbGYuX2lucHV0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbk9wZW5cIik7XG4gICAgICAgICAgICBwb3NpdGlvbkNhbGVuZGFyKHBvc2l0aW9uRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgPT09IHRydWUgJiYgc2VsZi5jb25maWcubm9DYWxlbmRhciA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmFsbG93SW5wdXQgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgKGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICAhc2VsZi50aW1lQ29udGFpbmVyLmNvbnRhaW5zKGUucmVsYXRlZFRhcmdldCkpKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLmhvdXJFbGVtZW50LnNlbGVjdCgpOyB9LCA1MCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbWluTWF4RGF0ZVNldHRlcih0eXBlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICAgICAgdmFyIGRhdGVPYmogPSAoc2VsZi5jb25maWdbXCJfXCIgKyB0eXBlICsgXCJEYXRlXCJdID0gc2VsZi5wYXJzZURhdGUoZGF0ZSwgc2VsZi5jb25maWcuZGF0ZUZvcm1hdCkpO1xuICAgICAgICAgICAgdmFyIGludmVyc2VEYXRlT2JqID0gc2VsZi5jb25maWdbXCJfXCIgKyAodHlwZSA9PT0gXCJtaW5cIiA/IFwibWF4XCIgOiBcIm1pblwiKSArIFwiRGF0ZVwiXTtcbiAgICAgICAgICAgIGlmIChkYXRlT2JqICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmW3R5cGUgPT09IFwibWluXCIgPyBcIm1pbkRhdGVIYXNUaW1lXCIgOiBcIm1heERhdGVIYXNUaW1lXCJdID1cbiAgICAgICAgICAgICAgICAgICAgZGF0ZU9iai5nZXRIb3VycygpID4gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZU9iai5nZXRNaW51dGVzKCkgPiAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlT2JqLmdldFNlY29uZHMoKSA+IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gc2VsZi5zZWxlY3RlZERhdGVzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gaXNFbmFibGVkKGQpOyB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggJiYgdHlwZSA9PT0gXCJtaW5cIilcbiAgICAgICAgICAgICAgICAgICAgc2V0SG91cnNGcm9tRGF0ZShkYXRlT2JqKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHJlZHJhdygpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRlT2JqICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXJFbGVtZW50W3R5cGVdID0gZGF0ZU9iai5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodHlwZSk7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhckVsZW1lbnQuZGlzYWJsZWQgPVxuICAgICAgICAgICAgICAgICAgICAhIWludmVyc2VEYXRlT2JqICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlT2JqICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VEYXRlT2JqLmdldEZ1bGxZZWFyKCkgPT09IGRhdGVPYmouZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VDb25maWcoKSB7XG4gICAgICAgIHZhciBib29sT3B0cyA9IFtcbiAgICAgICAgICAgIFwid3JhcFwiLFxuICAgICAgICAgICAgXCJ3ZWVrTnVtYmVyc1wiLFxuICAgICAgICAgICAgXCJhbGxvd0lucHV0XCIsXG4gICAgICAgICAgICBcImFsbG93SW52YWxpZFByZWxvYWRcIixcbiAgICAgICAgICAgIFwiY2xpY2tPcGVuc1wiLFxuICAgICAgICAgICAgXCJ0aW1lXzI0aHJcIixcbiAgICAgICAgICAgIFwiZW5hYmxlVGltZVwiLFxuICAgICAgICAgICAgXCJub0NhbGVuZGFyXCIsXG4gICAgICAgICAgICBcImFsdElucHV0XCIsXG4gICAgICAgICAgICBcInNob3J0aGFuZEN1cnJlbnRNb250aFwiLFxuICAgICAgICAgICAgXCJpbmxpbmVcIixcbiAgICAgICAgICAgIFwic3RhdGljXCIsXG4gICAgICAgICAgICBcImVuYWJsZVNlY29uZHNcIixcbiAgICAgICAgICAgIFwiZGlzYWJsZU1vYmlsZVwiLFxuICAgICAgICBdO1xuICAgICAgICB2YXIgdXNlckNvbmZpZyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGVsZW1lbnQuZGF0YXNldCB8fCB7fSkpKSwgaW5zdGFuY2VDb25maWcpO1xuICAgICAgICB2YXIgZm9ybWF0cyA9IHt9O1xuICAgICAgICBzZWxmLmNvbmZpZy5wYXJzZURhdGUgPSB1c2VyQ29uZmlnLnBhcnNlRGF0ZTtcbiAgICAgICAgc2VsZi5jb25maWcuZm9ybWF0RGF0ZSA9IHVzZXJDb25maWcuZm9ybWF0RGF0ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcImVuYWJsZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9lbmFibGU7IH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlcykge1xuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLl9lbmFibGUgPSBwYXJzZURhdGVSdWxlcyhkYXRlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcImRpc2FibGVcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLmNvbmZpZy5fZGlzYWJsZTsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGRhdGVzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jb25maWcuX2Rpc2FibGUgPSBwYXJzZURhdGVSdWxlcyhkYXRlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHRpbWVNb2RlID0gdXNlckNvbmZpZy5tb2RlID09PSBcInRpbWVcIjtcbiAgICAgICAgaWYgKCF1c2VyQ29uZmlnLmRhdGVGb3JtYXQgJiYgKHVzZXJDb25maWcuZW5hYmxlVGltZSB8fCB0aW1lTW9kZSkpIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0RGF0ZUZvcm1hdCA9IGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnLmRhdGVGb3JtYXQgfHwgZGVmYXVsdE9wdGlvbnMuZGF0ZUZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdHMuZGF0ZUZvcm1hdCA9XG4gICAgICAgICAgICAgICAgdXNlckNvbmZpZy5ub0NhbGVuZGFyIHx8IHRpbWVNb2RlXG4gICAgICAgICAgICAgICAgICAgID8gXCJIOmlcIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyBcIjpTXCIgOiBcIlwiKVxuICAgICAgICAgICAgICAgICAgICA6IGRlZmF1bHREYXRlRm9ybWF0ICsgXCIgSDppXCIgKyAodXNlckNvbmZpZy5lbmFibGVTZWNvbmRzID8gXCI6U1wiIDogXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZXJDb25maWcuYWx0SW5wdXQgJiZcbiAgICAgICAgICAgICh1c2VyQ29uZmlnLmVuYWJsZVRpbWUgfHwgdGltZU1vZGUpICYmXG4gICAgICAgICAgICAhdXNlckNvbmZpZy5hbHRGb3JtYXQpIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0QWx0Rm9ybWF0ID0gZmxhdHBpY2tyLmRlZmF1bHRDb25maWcuYWx0Rm9ybWF0IHx8IGRlZmF1bHRPcHRpb25zLmFsdEZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdHMuYWx0Rm9ybWF0ID1cbiAgICAgICAgICAgICAgICB1c2VyQ29uZmlnLm5vQ2FsZW5kYXIgfHwgdGltZU1vZGVcbiAgICAgICAgICAgICAgICAgICAgPyBcImg6aVwiICsgKHVzZXJDb25maWcuZW5hYmxlU2Vjb25kcyA/IFwiOlMgS1wiIDogXCIgS1wiKVxuICAgICAgICAgICAgICAgICAgICA6IGRlZmF1bHRBbHRGb3JtYXQgKyAoXCIgaDppXCIgKyAodXNlckNvbmZpZy5lbmFibGVTZWNvbmRzID8gXCI6U1wiIDogXCJcIikgKyBcIiBLXCIpO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJtaW5EYXRlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5jb25maWcuX21pbkRhdGU7IH0sXG4gICAgICAgICAgICBzZXQ6IG1pbk1heERhdGVTZXR0ZXIoXCJtaW5cIiksXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwibWF4RGF0ZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9tYXhEYXRlOyB9LFxuICAgICAgICAgICAgc2V0OiBtaW5NYXhEYXRlU2V0dGVyKFwibWF4XCIpLFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG1pbk1heFRpbWVTZXR0ZXIgPSBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgc2VsZi5jb25maWdbdHlwZSA9PT0gXCJtaW5cIiA/IFwiX21pblRpbWVcIiA6IFwiX21heFRpbWVcIl0gPSBzZWxmLnBhcnNlRGF0ZSh2YWwsIFwiSDppOlNcIik7XG4gICAgICAgIH07IH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJtaW5UaW1lXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5jb25maWcuX21pblRpbWU7IH0sXG4gICAgICAgICAgICBzZXQ6IG1pbk1heFRpbWVTZXR0ZXIoXCJtaW5cIiksXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwibWF4VGltZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9tYXhUaW1lOyB9LFxuICAgICAgICAgICAgc2V0OiBtaW5NYXhUaW1lU2V0dGVyKFwibWF4XCIpLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHVzZXJDb25maWcubW9kZSA9PT0gXCJ0aW1lXCIpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi5jb25maWcuZW5hYmxlVGltZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmFzc2lnbihzZWxmLmNvbmZpZywgZm9ybWF0cywgdXNlckNvbmZpZyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9vbE9wdHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBzZWxmLmNvbmZpZ1tib29sT3B0c1tpXV0gPVxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnW2Jvb2xPcHRzW2ldXSA9PT0gdHJ1ZSB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1tib29sT3B0c1tpXV0gPT09IFwidHJ1ZVwiO1xuICAgICAgICBIT09LUy5maWx0ZXIoZnVuY3Rpb24gKGhvb2spIHsgcmV0dXJuIHNlbGYuY29uZmlnW2hvb2tdICE9PSB1bmRlZmluZWQ7IH0pLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnW2hvb2tdID0gYXJyYXlpZnkoc2VsZi5jb25maWdbaG9va10gfHwgW10pLm1hcChiaW5kVG9JbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLmlzTW9iaWxlID1cbiAgICAgICAgICAgICFzZWxmLmNvbmZpZy5kaXNhYmxlTW9iaWxlICYmXG4gICAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLmlubGluZSAmJlxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1vZGUgPT09IFwic2luZ2xlXCIgJiZcbiAgICAgICAgICAgICAgICAhc2VsZi5jb25maWcuZGlzYWJsZS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAhc2VsZi5jb25maWcuZW5hYmxlICYmXG4gICAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLndlZWtOdW1iZXJzICYmXG4gICAgICAgICAgICAgICAgL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuY29uZmlnLnBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwbHVnaW5Db25mID0gc2VsZi5jb25maWcucGx1Z2luc1tpXShzZWxmKSB8fCB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBwbHVnaW5Db25mKSB7XG4gICAgICAgICAgICAgICAgaWYgKEhPT0tTLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnW2tleV0gPSBhcnJheWlmeShwbHVnaW5Db25mW2tleV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGJpbmRUb0luc3RhbmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChzZWxmLmNvbmZpZ1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHVzZXJDb25maWdba2V5XSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWdba2V5XSA9IHBsdWdpbkNvbmZba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXVzZXJDb25maWcuYWx0SW5wdXRDbGFzcykge1xuICAgICAgICAgICAgc2VsZi5jb25maWcuYWx0SW5wdXRDbGFzcyA9XG4gICAgICAgICAgICAgICAgZ2V0SW5wdXRFbGVtKCkuY2xhc3NOYW1lICsgXCIgXCIgKyBzZWxmLmNvbmZpZy5hbHRJbnB1dENsYXNzO1xuICAgICAgICB9XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm9uUGFyc2VDb25maWdcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldElucHV0RWxlbSgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLndyYXBcbiAgICAgICAgICAgID8gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtaW5wdXRdXCIpXG4gICAgICAgICAgICA6IGVsZW1lbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldHVwTG9jYWxlKCkge1xuICAgICAgICBpZiAodHlwZW9mIHNlbGYuY29uZmlnLmxvY2FsZSAhPT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgdHlwZW9mIGZsYXRwaWNrci5sMTBuc1tzZWxmLmNvbmZpZy5sb2NhbGVdID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKG5ldyBFcnJvcihcImZsYXRwaWNrcjogaW52YWxpZCBsb2NhbGUgXCIgKyBzZWxmLmNvbmZpZy5sb2NhbGUpKTtcbiAgICAgICAgc2VsZi5sMTBuID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZsYXRwaWNrci5sMTBucy5kZWZhdWx0KSwgKHR5cGVvZiBzZWxmLmNvbmZpZy5sb2NhbGUgPT09IFwib2JqZWN0XCJcbiAgICAgICAgICAgID8gc2VsZi5jb25maWcubG9jYWxlXG4gICAgICAgICAgICA6IHNlbGYuY29uZmlnLmxvY2FsZSAhPT0gXCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgICA/IGZsYXRwaWNrci5sMTBuc1tzZWxmLmNvbmZpZy5sb2NhbGVdXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpKTtcbiAgICAgICAgdG9rZW5SZWdleC5EID0gXCIoXCIgKyBzZWxmLmwxMG4ud2Vla2RheXMuc2hvcnRoYW5kLmpvaW4oXCJ8XCIpICsgXCIpXCI7XG4gICAgICAgIHRva2VuUmVnZXgubCA9IFwiKFwiICsgc2VsZi5sMTBuLndlZWtkYXlzLmxvbmdoYW5kLmpvaW4oXCJ8XCIpICsgXCIpXCI7XG4gICAgICAgIHRva2VuUmVnZXguTSA9IFwiKFwiICsgc2VsZi5sMTBuLm1vbnRocy5zaG9ydGhhbmQuam9pbihcInxcIikgKyBcIilcIjtcbiAgICAgICAgdG9rZW5SZWdleC5GID0gXCIoXCIgKyBzZWxmLmwxMG4ubW9udGhzLmxvbmdoYW5kLmpvaW4oXCJ8XCIpICsgXCIpXCI7XG4gICAgICAgIHRva2VuUmVnZXguSyA9IFwiKFwiICsgc2VsZi5sMTBuLmFtUE1bMF0gKyBcInxcIiArIHNlbGYubDEwbi5hbVBNWzFdICsgXCJ8XCIgKyBzZWxmLmwxMG4uYW1QTVswXS50b0xvd2VyQ2FzZSgpICsgXCJ8XCIgKyBzZWxmLmwxMG4uYW1QTVsxXS50b0xvd2VyQ2FzZSgpICsgXCIpXCI7XG4gICAgICAgIHZhciB1c2VyQ29uZmlnID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGluc3RhbmNlQ29uZmlnKSwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbGVtZW50LmRhdGFzZXQgfHwge30pKSk7XG4gICAgICAgIGlmICh1c2VyQ29uZmlnLnRpbWVfMjRociA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBmbGF0cGlja3IuZGVmYXVsdENvbmZpZy50aW1lXzI0aHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2VsZi5jb25maWcudGltZV8yNGhyID0gc2VsZi5sMTBuLnRpbWVfMjRocjtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmZvcm1hdERhdGUgPSBjcmVhdGVEYXRlRm9ybWF0dGVyKHNlbGYpO1xuICAgICAgICBzZWxmLnBhcnNlRGF0ZSA9IGNyZWF0ZURhdGVQYXJzZXIoeyBjb25maWc6IHNlbGYuY29uZmlnLCBsMTBuOiBzZWxmLmwxMG4gfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvc2l0aW9uQ2FsZW5kYXIoY3VzdG9tUG9zaXRpb25FbGVtZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZi5jb25maWcucG9zaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgc2VsZi5jb25maWcucG9zaXRpb24oc2VsZiwgY3VzdG9tUG9zaXRpb25FbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5jYWxlbmRhckNvbnRhaW5lciA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblByZUNhbGVuZGFyUG9zaXRpb25cIik7XG4gICAgICAgIHZhciBwb3NpdGlvbkVsZW1lbnQgPSBjdXN0b21Qb3NpdGlvbkVsZW1lbnQgfHwgc2VsZi5fcG9zaXRpb25FbGVtZW50O1xuICAgICAgICB2YXIgY2FsZW5kYXJIZWlnaHQgPSBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jaGlsZHJlbiwgKGZ1bmN0aW9uIChhY2MsIGNoaWxkKSB7IHJldHVybiBhY2MgKyBjaGlsZC5vZmZzZXRIZWlnaHQ7IH0pLCAwKSwgY2FsZW5kYXJXaWR0aCA9IHNlbGYuY2FsZW5kYXJDb250YWluZXIub2Zmc2V0V2lkdGgsIGNvbmZpZ1BvcyA9IHNlbGYuY29uZmlnLnBvc2l0aW9uLnNwbGl0KFwiIFwiKSwgY29uZmlnUG9zVmVydGljYWwgPSBjb25maWdQb3NbMF0sIGNvbmZpZ1Bvc0hvcml6b250YWwgPSBjb25maWdQb3MubGVuZ3RoID4gMSA/IGNvbmZpZ1Bvc1sxXSA6IG51bGwsIGlucHV0Qm91bmRzID0gcG9zaXRpb25FbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBkaXN0YW5jZUZyb21Cb3R0b20gPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSBpbnB1dEJvdW5kcy5ib3R0b20sIHNob3dPblRvcCA9IGNvbmZpZ1Bvc1ZlcnRpY2FsID09PSBcImFib3ZlXCIgfHxcbiAgICAgICAgICAgIChjb25maWdQb3NWZXJ0aWNhbCAhPT0gXCJiZWxvd1wiICYmXG4gICAgICAgICAgICAgICAgZGlzdGFuY2VGcm9tQm90dG9tIDwgY2FsZW5kYXJIZWlnaHQgJiZcbiAgICAgICAgICAgICAgICBpbnB1dEJvdW5kcy50b3AgPiBjYWxlbmRhckhlaWdodCk7XG4gICAgICAgIHZhciB0b3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgK1xuICAgICAgICAgICAgaW5wdXRCb3VuZHMudG9wICtcbiAgICAgICAgICAgICghc2hvd09uVG9wID8gcG9zaXRpb25FbGVtZW50Lm9mZnNldEhlaWdodCArIDIgOiAtY2FsZW5kYXJIZWlnaHQgLSAyKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJhcnJvd1RvcFwiLCAhc2hvd09uVG9wKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJhcnJvd0JvdHRvbVwiLCBzaG93T25Ub3ApO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuaW5saW5lKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgbGVmdCA9IHdpbmRvdy5wYWdlWE9mZnNldCArIGlucHV0Qm91bmRzLmxlZnQ7XG4gICAgICAgIHZhciBpc0NlbnRlciA9IGZhbHNlO1xuICAgICAgICB2YXIgaXNSaWdodCA9IGZhbHNlO1xuICAgICAgICBpZiAoY29uZmlnUG9zSG9yaXpvbnRhbCA9PT0gXCJjZW50ZXJcIikge1xuICAgICAgICAgICAgbGVmdCAtPSAoY2FsZW5kYXJXaWR0aCAtIGlucHV0Qm91bmRzLndpZHRoKSAvIDI7XG4gICAgICAgICAgICBpc0NlbnRlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29uZmlnUG9zSG9yaXpvbnRhbCA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgICAgICBsZWZ0IC09IGNhbGVuZGFyV2lkdGggLSBpbnB1dEJvdW5kcy53aWR0aDtcbiAgICAgICAgICAgIGlzUmlnaHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dMZWZ0XCIsICFpc0NlbnRlciAmJiAhaXNSaWdodCk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dDZW50ZXJcIiwgaXNDZW50ZXIpO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFycm93UmlnaHRcIiwgaXNSaWdodCk7XG4gICAgICAgIHZhciByaWdodCA9IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC1cbiAgICAgICAgICAgICh3aW5kb3cucGFnZVhPZmZzZXQgKyBpbnB1dEJvdW5kcy5yaWdodCk7XG4gICAgICAgIHZhciByaWdodE1vc3QgPSBsZWZ0ICsgY2FsZW5kYXJXaWR0aCA+IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoO1xuICAgICAgICB2YXIgY2VudGVyTW9zdCA9IHJpZ2h0ICsgY2FsZW5kYXJXaWR0aCA+IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcInJpZ2h0TW9zdFwiLCByaWdodE1vc3QpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuc3RhdGljKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnRvcCA9IHRvcCArIFwicHhcIjtcbiAgICAgICAgaWYgKCFyaWdodE1vc3QpIHtcbiAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnJpZ2h0ID0gXCJhdXRvXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWNlbnRlck1vc3QpIHtcbiAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUubGVmdCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yaWdodCA9IHJpZ2h0ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50U3R5bGVTaGVldCgpO1xuICAgICAgICAgICAgaWYgKGRvYyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBib2R5V2lkdGggPSB3aW5kb3cuZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIHZhciBjZW50ZXJMZWZ0ID0gTWF0aC5tYXgoMCwgYm9keVdpZHRoIC8gMiAtIGNhbGVuZGFyV2lkdGggLyAyKTtcbiAgICAgICAgICAgIHZhciBjZW50ZXJCZWZvcmUgPSBcIi5mbGF0cGlja3ItY2FsZW5kYXIuY2VudGVyTW9zdDpiZWZvcmVcIjtcbiAgICAgICAgICAgIHZhciBjZW50ZXJBZnRlciA9IFwiLmZsYXRwaWNrci1jYWxlbmRhci5jZW50ZXJNb3N0OmFmdGVyXCI7XG4gICAgICAgICAgICB2YXIgY2VudGVySW5kZXggPSBkb2MuY3NzUnVsZXMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGNlbnRlclN0eWxlID0gXCJ7bGVmdDpcIiArIGlucHV0Qm91bmRzLmxlZnQgKyBcInB4O3JpZ2h0OmF1dG87fVwiO1xuICAgICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJyaWdodE1vc3RcIiwgZmFsc2UpO1xuICAgICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJjZW50ZXJNb3N0XCIsIHRydWUpO1xuICAgICAgICAgICAgZG9jLmluc2VydFJ1bGUoY2VudGVyQmVmb3JlICsgXCIsXCIgKyBjZW50ZXJBZnRlciArIGNlbnRlclN0eWxlLCBjZW50ZXJJbmRleCk7XG4gICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBjZW50ZXJMZWZ0ICsgXCJweFwiO1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERvY3VtZW50U3R5bGVTaGVldCgpIHtcbiAgICAgICAgdmFyIGVkaXRhYmxlU2hlZXQgPSBudWxsO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICAgICAgICAgIGlmICghc2hlZXQuY3NzUnVsZXMpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHNoZWV0LmNzc1J1bGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWRpdGFibGVTaGVldCA9IHNoZWV0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVkaXRhYmxlU2hlZXQgIT0gbnVsbCA/IGVkaXRhYmxlU2hlZXQgOiBjcmVhdGVTdHlsZVNoZWV0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgIHJldHVybiBzdHlsZS5zaGVldDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubm9DYWxlbmRhciB8fCBzZWxmLmlzTW9iaWxlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBidWlsZE1vbnRoU3dpdGNoKCk7XG4gICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcbiAgICAgICAgYnVpbGREYXlzKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvY3VzQW5kQ2xvc2UoKSB7XG4gICAgICAgIHNlbGYuX2lucHV0LmZvY3VzKCk7XG4gICAgICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiTVNJRVwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoc2VsZi5jbG9zZSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2VsZWN0RGF0ZShlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyIGlzU2VsZWN0YWJsZSA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXkuY2xhc3NMaXN0ICYmXG4gICAgICAgICAgICAgICAgZGF5LmNsYXNzTGlzdC5jb250YWlucyhcImZsYXRwaWNrci1kYXlcIikgJiZcbiAgICAgICAgICAgICAgICAhZGF5LmNsYXNzTGlzdC5jb250YWlucyhcImZsYXRwaWNrci1kaXNhYmxlZFwiKSAmJlxuICAgICAgICAgICAgICAgICFkYXkuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm90QWxsb3dlZFwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHQgPSBmaW5kUGFyZW50KGdldEV2ZW50VGFyZ2V0KGUpLCBpc1NlbGVjdGFibGUpO1xuICAgICAgICBpZiAodCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdDtcbiAgICAgICAgdmFyIHNlbGVjdGVkRGF0ZSA9IChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IG5ldyBEYXRlKHRhcmdldC5kYXRlT2JqLmdldFRpbWUoKSkpO1xuICAgICAgICB2YXIgc2hvdWxkQ2hhbmdlTW9udGggPSAoc2VsZWN0ZWREYXRlLmdldE1vbnRoKCkgPCBzZWxmLmN1cnJlbnRNb250aCB8fFxuICAgICAgICAgICAgc2VsZWN0ZWREYXRlLmdldE1vbnRoKCkgPlxuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoICsgc2VsZi5jb25maWcuc2hvd01vbnRocyAtIDEpICYmXG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlICE9PSBcInJhbmdlXCI7XG4gICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlRWxlbSA9IHRhcmdldDtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwic2luZ2xlXCIpXG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBbc2VsZWN0ZWREYXRlXTtcbiAgICAgICAgZWxzZSBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IGlzRGF0ZVNlbGVjdGVkKHNlbGVjdGVkRGF0ZSk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleClcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMuc3BsaWNlKHBhcnNlSW50KHNlbGVjdGVkSW5kZXgpLCAxKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMucHVzaChzZWxlY3RlZERhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIikge1xuICAgICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNsZWFyKGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IHNlbGVjdGVkRGF0ZTtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5wdXNoKHNlbGVjdGVkRGF0ZSk7XG4gICAgICAgICAgICBpZiAoY29tcGFyZURhdGVzKHNlbGVjdGVkRGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLCB0cnVlKSAhPT0gMClcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5nZXRUaW1lKCkgLSBiLmdldFRpbWUoKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0SG91cnNGcm9tSW5wdXRzKCk7XG4gICAgICAgIGlmIChzaG91bGRDaGFuZ2VNb250aCkge1xuICAgICAgICAgICAgdmFyIGlzTmV3WWVhciA9IHNlbGYuY3VycmVudFllYXIgIT09IHNlbGVjdGVkRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IHNlbGVjdGVkRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBzZWxlY3RlZERhdGUuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIGlmIChpc05ld1llYXIpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblllYXJDaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25Nb250aENoYW5nZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG4gICAgICAgIGJ1aWxkRGF5cygpO1xuICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICBpZiAoIXNob3VsZENoYW5nZU1vbnRoICYmXG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlICE9PSBcInJhbmdlXCIgJiZcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLnNob3dNb250aHMgPT09IDEpXG4gICAgICAgICAgICBmb2N1c09uRGF5RWxlbSh0YXJnZXQpO1xuICAgICAgICBlbHNlIGlmIChzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgc2VsZi5ob3VyRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gJiYgc2VsZi5zZWxlY3RlZERhdGVFbGVtLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuaG91ckVsZW1lbnQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJiBzZWxmLmhvdXJFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5jbG9zZU9uU2VsZWN0KSB7XG4gICAgICAgICAgICB2YXIgc2luZ2xlID0gc2VsZi5jb25maWcubW9kZSA9PT0gXCJzaW5nbGVcIiAmJiAhc2VsZi5jb25maWcuZW5hYmxlVGltZTtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIiAmJlxuICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDIgJiZcbiAgICAgICAgICAgICAgICAhc2VsZi5jb25maWcuZW5hYmxlVGltZTtcbiAgICAgICAgICAgIGlmIChzaW5nbGUgfHwgcmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBmb2N1c0FuZENsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJpZ2dlckNoYW5nZSgpO1xuICAgIH1cbiAgICB2YXIgQ0FMTEJBQ0tTID0ge1xuICAgICAgICBsb2NhbGU6IFtzZXR1cExvY2FsZSwgdXBkYXRlV2Vla2RheXNdLFxuICAgICAgICBzaG93TW9udGhzOiBbYnVpbGRNb250aHMsIHNldENhbGVuZGFyV2lkdGgsIGJ1aWxkV2Vla2RheXNdLFxuICAgICAgICBtaW5EYXRlOiBbanVtcFRvRGF0ZV0sXG4gICAgICAgIG1heERhdGU6IFtqdW1wVG9EYXRlXSxcbiAgICAgICAgcG9zaXRpb25FbGVtZW50OiBbdXBkYXRlUG9zaXRpb25FbGVtZW50XSxcbiAgICAgICAgY2xpY2tPcGVuczogW1xuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5jbGlja09wZW5zID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJpbmQoc2VsZi5faW5wdXQsIFwiZm9jdXNcIiwgc2VsZi5vcGVuKTtcbiAgICAgICAgICAgICAgICAgICAgYmluZChzZWxmLl9pbnB1dCwgXCJjbGlja1wiLCBzZWxmLm9wZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5faW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHNlbGYub3Blbik7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2lucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzZWxmLm9wZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfTtcbiAgICBmdW5jdGlvbiBzZXQob3B0aW9uLCB2YWx1ZSkge1xuICAgICAgICBpZiAob3B0aW9uICE9PSBudWxsICYmIHR5cGVvZiBvcHRpb24gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc2VsZi5jb25maWcsIG9wdGlvbik7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKENBTExCQUNLU1trZXldICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIENBTExCQUNLU1trZXldLmZvckVhY2goZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgoKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxmLmNvbmZpZ1tvcHRpb25dID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAoQ0FMTEJBQ0tTW29wdGlvbl0gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBDQUxMQkFDS1Nbb3B0aW9uXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4KCk7IH0pO1xuICAgICAgICAgICAgZWxzZSBpZiAoSE9PS1MuaW5kZXhPZihvcHRpb24pID4gLTEpXG4gICAgICAgICAgICAgICAgc2VsZi5jb25maWdbb3B0aW9uXSA9IGFycmF5aWZ5KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnJlZHJhdygpO1xuICAgICAgICB1cGRhdGVWYWx1ZSh0cnVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0U2VsZWN0ZWREYXRlKGlucHV0RGF0ZSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciBkYXRlcyA9IFtdO1xuICAgICAgICBpZiAoaW5wdXREYXRlIGluc3RhbmNlb2YgQXJyYXkpXG4gICAgICAgICAgICBkYXRlcyA9IGlucHV0RGF0ZS5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHNlbGYucGFyc2VEYXRlKGQsIGZvcm1hdCk7IH0pO1xuICAgICAgICBlbHNlIGlmIChpbnB1dERhdGUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBpbnB1dERhdGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICBkYXRlcyA9IFtzZWxmLnBhcnNlRGF0ZShpbnB1dERhdGUsIGZvcm1hdCldO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXREYXRlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHNlbGYuY29uZmlnLm1vZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwic2luZ2xlXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcInRpbWVcIjpcbiAgICAgICAgICAgICAgICAgICAgZGF0ZXMgPSBbc2VsZi5wYXJzZURhdGUoaW5wdXREYXRlLCBmb3JtYXQpXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgICAgICAgIGRhdGVzID0gaW5wdXREYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoc2VsZi5jb25maWcuY29uanVuY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBzZWxmLnBhcnNlRGF0ZShkYXRlLCBmb3JtYXQpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInJhbmdlXCI6XG4gICAgICAgICAgICAgICAgICAgIGRhdGVzID0gaW5wdXREYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoc2VsZi5sMTBuLnJhbmdlU2VwYXJhdG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gc2VsZi5wYXJzZURhdGUoZGF0ZSwgZm9ybWF0KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLmVycm9ySGFuZGxlcihuZXcgRXJyb3IoXCJJbnZhbGlkIGRhdGUgc3VwcGxpZWQ6IFwiICsgSlNPTi5zdHJpbmdpZnkoaW5wdXREYXRlKSkpO1xuICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMgPSAoc2VsZi5jb25maWcuYWxsb3dJbnZhbGlkUHJlbG9hZFxuICAgICAgICAgICAgPyBkYXRlc1xuICAgICAgICAgICAgOiBkYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQgaW5zdGFuY2VvZiBEYXRlICYmIGlzRW5hYmxlZChkLCBmYWxzZSk7IH0pKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIilcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmdldFRpbWUoKSAtIGIuZ2V0VGltZSgpOyB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0RGF0ZShkYXRlLCB0cmlnZ2VyQ2hhbmdlLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgPT09IHZvaWQgMCkgeyB0cmlnZ2VyQ2hhbmdlID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gdm9pZCAwKSB7IGZvcm1hdCA9IHNlbGYuY29uZmlnLmRhdGVGb3JtYXQ7IH1cbiAgICAgICAgaWYgKChkYXRlICE9PSAwICYmICFkYXRlKSB8fCAoZGF0ZSBpbnN0YW5jZW9mIEFycmF5ICYmIGRhdGUubGVuZ3RoID09PSAwKSlcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmNsZWFyKHRyaWdnZXJDaGFuZ2UpO1xuICAgICAgICBzZXRTZWxlY3RlZERhdGUoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPVxuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzW3NlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgc2VsZi5yZWRyYXcoKTtcbiAgICAgICAganVtcFRvRGF0ZSh1bmRlZmluZWQsIHRyaWdnZXJDaGFuZ2UpO1xuICAgICAgICBzZXRIb3Vyc0Zyb21EYXRlKCk7XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzZWxmLmNsZWFyKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVWYWx1ZSh0cmlnZ2VyQ2hhbmdlKTtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UpXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkNoYW5nZVwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VEYXRlUnVsZXMoYXJyKSB7XG4gICAgICAgIHJldHVybiBhcnJcbiAgICAgICAgICAgIC5zbGljZSgpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJ1bGUgPT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgcnVsZSA9PT0gXCJudW1iZXJcIiB8fFxuICAgICAgICAgICAgICAgIHJ1bGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucGFyc2VEYXRlKHJ1bGUsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChydWxlICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHJ1bGUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgICAgICBydWxlLmZyb20gJiZcbiAgICAgICAgICAgICAgICBydWxlLnRvKVxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206IHNlbGYucGFyc2VEYXRlKHJ1bGUuZnJvbSwgdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICAgICAgdG86IHNlbGYucGFyc2VEYXRlKHJ1bGUudG8sIHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geDsgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldHVwRGF0ZXMoKSB7XG4gICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IFtdO1xuICAgICAgICBzZWxmLm5vdyA9IHNlbGYucGFyc2VEYXRlKHNlbGYuY29uZmlnLm5vdykgfHwgbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIHByZWxvYWRlZERhdGUgPSBzZWxmLmNvbmZpZy5kZWZhdWx0RGF0ZSB8fFxuICAgICAgICAgICAgKChzZWxmLmlucHV0Lm5vZGVOYW1lID09PSBcIklOUFVUXCIgfHxcbiAgICAgICAgICAgICAgICBzZWxmLmlucHV0Lm5vZGVOYW1lID09PSBcIlRFWFRBUkVBXCIpICYmXG4gICAgICAgICAgICAgICAgc2VsZi5pbnB1dC5wbGFjZWhvbGRlciAmJlxuICAgICAgICAgICAgICAgIHNlbGYuaW5wdXQudmFsdWUgPT09IHNlbGYuaW5wdXQucGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IHNlbGYuaW5wdXQudmFsdWUpO1xuICAgICAgICBpZiAocHJlbG9hZGVkRGF0ZSlcbiAgICAgICAgICAgIHNldFNlbGVjdGVkRGF0ZShwcmVsb2FkZWREYXRlLCBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KTtcbiAgICAgICAgc2VsZi5faW5pdGlhbERhdGUgPVxuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IHNlbGYuc2VsZWN0ZWREYXRlc1swXVxuICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWluRGF0ZSAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5EYXRlLmdldFRpbWUoKSA+IHNlbGYubm93LmdldFRpbWUoKVxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLm1pbkRhdGVcbiAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy5tYXhEYXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldFRpbWUoKSA8IHNlbGYubm93LmdldFRpbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5tYXhEYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYubm93O1xuICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID0gc2VsZi5faW5pdGlhbERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBzZWxmLl9pbml0aWFsRGF0ZS5nZXRNb250aCgpO1xuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IHNlbGYuc2VsZWN0ZWREYXRlc1swXTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1pblRpbWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pblRpbWUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLmNvbmZpZy5taW5UaW1lLCBcIkg6aVwiKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heFRpbWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm1heFRpbWUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLmNvbmZpZy5tYXhUaW1lLCBcIkg6aVwiKTtcbiAgICAgICAgc2VsZi5taW5EYXRlSGFzVGltZSA9XG4gICAgICAgICAgICAhIXNlbGYuY29uZmlnLm1pbkRhdGUgJiZcbiAgICAgICAgICAgICAgICAoc2VsZi5jb25maWcubWluRGF0ZS5nZXRIb3VycygpID4gMCB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1pbnV0ZXMoKSA+IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWluRGF0ZS5nZXRTZWNvbmRzKCkgPiAwKTtcbiAgICAgICAgc2VsZi5tYXhEYXRlSGFzVGltZSA9XG4gICAgICAgICAgICAhIXNlbGYuY29uZmlnLm1heERhdGUgJiZcbiAgICAgICAgICAgICAgICAoc2VsZi5jb25maWcubWF4RGF0ZS5nZXRIb3VycygpID4gMCB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldE1pbnV0ZXMoKSA+IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRTZWNvbmRzKCkgPiAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0dXBJbnB1dHMoKSB7XG4gICAgICAgIHNlbGYuaW5wdXQgPSBnZXRJbnB1dEVsZW0oKTtcbiAgICAgICAgaWYgKCFzZWxmLmlucHV0KSB7XG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKFwiSW52YWxpZCBpbnB1dCBlbGVtZW50IHNwZWNpZmllZFwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5pbnB1dC5fdHlwZSA9IHNlbGYuaW5wdXQudHlwZTtcbiAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgIHNlbGYuaW5wdXQuY2xhc3NMaXN0LmFkZChcImZsYXRwaWNrci1pbnB1dFwiKTtcbiAgICAgICAgc2VsZi5faW5wdXQgPSBzZWxmLmlucHV0O1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuYWx0SW5wdXQpIHtcbiAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQgPSBjcmVhdGVFbGVtZW50KHNlbGYuaW5wdXQubm9kZU5hbWUsIHNlbGYuY29uZmlnLmFsdElucHV0Q2xhc3MpO1xuICAgICAgICAgICAgc2VsZi5faW5wdXQgPSBzZWxmLmFsdElucHV0O1xuICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC5wbGFjZWhvbGRlciA9IHNlbGYuaW5wdXQucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICBzZWxmLmFsdElucHV0LmRpc2FibGVkID0gc2VsZi5pbnB1dC5kaXNhYmxlZDtcbiAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQucmVxdWlyZWQgPSBzZWxmLmlucHV0LnJlcXVpcmVkO1xuICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC50YWJJbmRleCA9IHNlbGYuaW5wdXQudGFiSW5kZXg7XG4gICAgICAgICAgICBzZWxmLmFsdElucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgICAgIHNlbGYuaW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgICAgIGlmICghc2VsZi5jb25maWcuc3RhdGljICYmIHNlbGYuaW5wdXQucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYuYWx0SW5wdXQsIHNlbGYuaW5wdXQubmV4dFNpYmxpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VsZi5jb25maWcuYWxsb3dJbnB1dClcbiAgICAgICAgICAgIHNlbGYuX2lucHV0LnNldEF0dHJpYnV0ZShcInJlYWRvbmx5XCIsIFwicmVhZG9ubHlcIik7XG4gICAgICAgIHVwZGF0ZVBvc2l0aW9uRWxlbWVudCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbkVsZW1lbnQoKSB7XG4gICAgICAgIHNlbGYuX3Bvc2l0aW9uRWxlbWVudCA9IHNlbGYuY29uZmlnLnBvc2l0aW9uRWxlbWVudCB8fCBzZWxmLl9pbnB1dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0dXBNb2JpbGUoKSB7XG4gICAgICAgIHZhciBpbnB1dFR5cGUgPSBzZWxmLmNvbmZpZy5lbmFibGVUaW1lXG4gICAgICAgICAgICA/IHNlbGYuY29uZmlnLm5vQ2FsZW5kYXJcbiAgICAgICAgICAgICAgICA/IFwidGltZVwiXG4gICAgICAgICAgICAgICAgOiBcImRhdGV0aW1lLWxvY2FsXCJcbiAgICAgICAgICAgIDogXCJkYXRlXCI7XG4gICAgICAgIHNlbGYubW9iaWxlSW5wdXQgPSBjcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgc2VsZi5pbnB1dC5jbGFzc05hbWUgKyBcIiBmbGF0cGlja3ItbW9iaWxlXCIpO1xuICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnRhYkluZGV4ID0gMTtcbiAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC50eXBlID0gaW5wdXRUeXBlO1xuICAgICAgICBzZWxmLm1vYmlsZUlucHV0LmRpc2FibGVkID0gc2VsZi5pbnB1dC5kaXNhYmxlZDtcbiAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5yZXF1aXJlZCA9IHNlbGYuaW5wdXQucmVxdWlyZWQ7XG4gICAgICAgIHNlbGYubW9iaWxlSW5wdXQucGxhY2Vob2xkZXIgPSBzZWxmLmlucHV0LnBsYWNlaG9sZGVyO1xuICAgICAgICBzZWxmLm1vYmlsZUZvcm1hdFN0ciA9XG4gICAgICAgICAgICBpbnB1dFR5cGUgPT09IFwiZGF0ZXRpbWUtbG9jYWxcIlxuICAgICAgICAgICAgICAgID8gXCJZLW0tZFxcXFxUSDppOlNcIlxuICAgICAgICAgICAgICAgIDogaW5wdXRUeXBlID09PSBcImRhdGVcIlxuICAgICAgICAgICAgICAgICAgICA/IFwiWS1tLWRcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiSDppOlNcIjtcbiAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LmRlZmF1bHRWYWx1ZSA9IHNlbGYubW9iaWxlSW5wdXQudmFsdWUgPSBzZWxmLmZvcm1hdERhdGUoc2VsZi5zZWxlY3RlZERhdGVzWzBdLCBzZWxmLm1vYmlsZUZvcm1hdFN0cik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1pbkRhdGUpXG4gICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0Lm1pbiA9IHNlbGYuZm9ybWF0RGF0ZShzZWxmLmNvbmZpZy5taW5EYXRlLCBcIlktbS1kXCIpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4RGF0ZSlcbiAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQubWF4ID0gc2VsZi5mb3JtYXREYXRlKHNlbGYuY29uZmlnLm1heERhdGUsIFwiWS1tLWRcIik7XG4gICAgICAgIGlmIChzZWxmLmlucHV0LmdldEF0dHJpYnV0ZShcInN0ZXBcIikpXG4gICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnN0ZXAgPSBTdHJpbmcoc2VsZi5pbnB1dC5nZXRBdHRyaWJ1dGUoXCJzdGVwXCIpKTtcbiAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcbiAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5pbnB1dC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIHNlbGYuaW5wdXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5tb2JpbGVJbnB1dCwgc2VsZi5pbnB1dC5uZXh0U2libGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgYmluZChzZWxmLm1vYmlsZUlucHV0LCBcImNoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgc2VsZi5zZXREYXRlKGdldEV2ZW50VGFyZ2V0KGUpLnZhbHVlLCBmYWxzZSwgc2VsZi5tb2JpbGVGb3JtYXRTdHIpO1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25DaGFuZ2VcIik7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkNsb3NlXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9nZ2xlKGUpIHtcbiAgICAgICAgaWYgKHNlbGYuaXNPcGVuID09PSB0cnVlKVxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2xvc2UoKTtcbiAgICAgICAgc2VsZi5vcGVuKGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBob29rcyA9IHNlbGYuY29uZmlnW2V2ZW50XTtcbiAgICAgICAgaWYgKGhvb2tzICE9PSB1bmRlZmluZWQgJiYgaG9va3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGhvb2tzW2ldICYmIGkgPCBob29rcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBob29rc1tpXShzZWxmLnNlbGVjdGVkRGF0ZXMsIHNlbGYuaW5wdXQudmFsdWUsIHNlbGYsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudCA9PT0gXCJvbkNoYW5nZVwiKSB7XG4gICAgICAgICAgICBzZWxmLmlucHV0LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoXCJjaGFuZ2VcIikpO1xuICAgICAgICAgICAgc2VsZi5pbnB1dC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KFwiaW5wdXRcIikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KG5hbWUpIHtcbiAgICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgICAgICBlLmluaXRFdmVudChuYW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzRGF0ZVNlbGVjdGVkKGRhdGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZERhdGUgPSBzZWxmLnNlbGVjdGVkRGF0ZXNbaV07XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWREYXRlIGluc3RhbmNlb2YgRGF0ZSAmJlxuICAgICAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhzZWxlY3RlZERhdGUsIGRhdGUpID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiICsgaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzRGF0ZUluUmFuZ2UoZGF0ZSkge1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiIHx8IHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPCAyKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gKGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0pID49IDAgJiZcbiAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMV0pIDw9IDApO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCkge1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubm9DYWxlbmRhciB8fCBzZWxmLmlzTW9iaWxlIHx8ICFzZWxmLm1vbnRoTmF2KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzZWxmLnllYXJFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh5ZWFyRWxlbWVudCwgaSkge1xuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShzZWxmLmN1cnJlbnRZZWFyLCBzZWxmLmN1cnJlbnRNb250aCwgMSk7XG4gICAgICAgICAgICBkLnNldE1vbnRoKHNlbGYuY3VycmVudE1vbnRoICsgaSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEgfHxcbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tb250aFNlbGVjdG9yVHlwZSA9PT0gXCJzdGF0aWNcIikge1xuICAgICAgICAgICAgICAgIHNlbGYubW9udGhFbGVtZW50c1tpXS50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICAgICAgICAgIG1vbnRoVG9TdHIoZC5nZXRNb250aCgpLCBzZWxmLmNvbmZpZy5zaG9ydGhhbmRDdXJyZW50TW9udGgsIHNlbGYubDEwbikgKyBcIiBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIudmFsdWUgPSBkLmdldE1vbnRoKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHllYXJFbGVtZW50LnZhbHVlID0gZC5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLl9oaWRlUHJldk1vbnRoQXJyb3cgPVxuICAgICAgICAgICAgc2VsZi5jb25maWcubWluRGF0ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgKHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY3VycmVudE1vbnRoIDw9IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0TW9udGgoKVxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY3VycmVudFllYXIgPCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkpO1xuICAgICAgICBzZWxmLl9oaWRlTmV4dE1vbnRoQXJyb3cgPVxuICAgICAgICAgICAgc2VsZi5jb25maWcubWF4RGF0ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgKHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY3VycmVudE1vbnRoICsgMSA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKVxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY3VycmVudFllYXIgPiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXREYXRlU3RyKHNwZWNpZmljRm9ybWF0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSBzcGVjaWZpY0Zvcm1hdCB8fFxuICAgICAgICAgICAgKHNlbGYuY29uZmlnLmFsdElucHV0ID8gc2VsZi5jb25maWcuYWx0Rm9ybWF0IDogc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7XG4gICAgICAgIHJldHVybiBzZWxmLnNlbGVjdGVkRGF0ZXNcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGRPYmopIHsgcmV0dXJuIHNlbGYuZm9ybWF0RGF0ZShkT2JqLCBmb3JtYXQpOyB9KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoZCwgaSwgYXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiIHx8XG4gICAgICAgICAgICAgICAgc2VsZi5jb25maWcuZW5hYmxlVGltZSB8fFxuICAgICAgICAgICAgICAgIGFyci5pbmRleE9mKGQpID09PSBpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiXG4gICAgICAgICAgICA/IHNlbGYuY29uZmlnLmNvbmp1bmN0aW9uXG4gICAgICAgICAgICA6IHNlbGYubDEwbi5yYW5nZVNlcGFyYXRvcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKHRyaWdnZXJDaGFuZ2UpIHtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgPT09IHZvaWQgMCkgeyB0cmlnZ2VyQ2hhbmdlID0gdHJ1ZTsgfVxuICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dCAhPT0gdW5kZWZpbmVkICYmIHNlbGYubW9iaWxlRm9ybWF0U3RyKSB7XG4gICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnZhbHVlID1cbiAgICAgICAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZi5mb3JtYXREYXRlKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLCBzZWxmLm1vYmlsZUZvcm1hdFN0cilcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuaW5wdXQudmFsdWUgPSBnZXREYXRlU3RyKHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpO1xuICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZWxmLmFsdElucHV0LnZhbHVlID0gZ2V0RGF0ZVN0cihzZWxmLmNvbmZpZy5hbHRGb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlICE9PSBmYWxzZSlcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uVmFsdWVVcGRhdGVcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uTW9udGhOYXZDbGljayhlKSB7XG4gICAgICAgIHZhciBldmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICB2YXIgaXNQcmV2TW9udGggPSBzZWxmLnByZXZNb250aE5hdi5jb250YWlucyhldmVudFRhcmdldCk7XG4gICAgICAgIHZhciBpc05leHRNb250aCA9IHNlbGYubmV4dE1vbnRoTmF2LmNvbnRhaW5zKGV2ZW50VGFyZ2V0KTtcbiAgICAgICAgaWYgKGlzUHJldk1vbnRoIHx8IGlzTmV4dE1vbnRoKSB7XG4gICAgICAgICAgICBjaGFuZ2VNb250aChpc1ByZXZNb250aCA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2VsZi55ZWFyRWxlbWVudHMuaW5kZXhPZihldmVudFRhcmdldCkgPj0gMCkge1xuICAgICAgICAgICAgZXZlbnRUYXJnZXQuc2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYXJyb3dVcFwiKSkge1xuICAgICAgICAgICAgc2VsZi5jaGFuZ2VZZWFyKHNlbGYuY3VycmVudFllYXIgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJhcnJvd0Rvd25cIikpIHtcbiAgICAgICAgICAgIHNlbGYuY2hhbmdlWWVhcihzZWxmLmN1cnJlbnRZZWFyIC0gMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGltZVdyYXBwZXIoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBpc0tleURvd24gPSBlLnR5cGUgPT09IFwia2V5ZG93blwiLCBldmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpLCBpbnB1dCA9IGV2ZW50VGFyZ2V0O1xuICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQgJiYgZXZlbnRUYXJnZXQgPT09IHNlbGYuYW1QTSkge1xuICAgICAgICAgICAgc2VsZi5hbVBNLnRleHRDb250ZW50ID1cbiAgICAgICAgICAgICAgICBzZWxmLmwxMG4uYW1QTVtpbnQoc2VsZi5hbVBNLnRleHRDb250ZW50ID09PSBzZWxmLmwxMG4uYW1QTVswXSldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtaW4gPSBwYXJzZUZsb2F0KGlucHV0LmdldEF0dHJpYnV0ZShcIm1pblwiKSksIG1heCA9IHBhcnNlRmxvYXQoaW5wdXQuZ2V0QXR0cmlidXRlKFwibWF4XCIpKSwgc3RlcCA9IHBhcnNlRmxvYXQoaW5wdXQuZ2V0QXR0cmlidXRlKFwic3RlcFwiKSksIGN1clZhbHVlID0gcGFyc2VJbnQoaW5wdXQudmFsdWUsIDEwKSwgZGVsdGEgPSBlLmRlbHRhIHx8XG4gICAgICAgICAgICAoaXNLZXlEb3duID8gKGUud2hpY2ggPT09IDM4ID8gMSA6IC0xKSA6IDApO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXJWYWx1ZSArIHN0ZXAgKiBkZWx0YTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dC52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpbnB1dC52YWx1ZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHZhciBpc0hvdXJFbGVtID0gaW5wdXQgPT09IHNlbGYuaG91ckVsZW1lbnQsIGlzTWludXRlRWxlbSA9IGlucHV0ID09PSBzZWxmLm1pbnV0ZUVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgPCBtaW4pIHtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgIG1heCArXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSArXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnQoIWlzSG91ckVsZW0pICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChpbnQoaXNIb3VyRWxlbSkgJiYgaW50KCFzZWxmLmFtUE0pKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNNaW51dGVFbGVtKVxuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnROdW1JbnB1dCh1bmRlZmluZWQsIC0xLCBzZWxmLmhvdXJFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld1ZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICBpbnB1dCA9PT0gc2VsZi5ob3VyRWxlbWVudCA/IG5ld1ZhbHVlIC0gbWF4IC0gaW50KCFzZWxmLmFtUE0pIDogbWluO1xuICAgICAgICAgICAgICAgIGlmIChpc01pbnV0ZUVsZW0pXG4gICAgICAgICAgICAgICAgICAgIGluY3JlbWVudE51bUlucHV0KHVuZGVmaW5lZCwgMSwgc2VsZi5ob3VyRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5hbVBNICYmXG4gICAgICAgICAgICAgICAgaXNIb3VyRWxlbSAmJlxuICAgICAgICAgICAgICAgIChzdGVwID09PSAxXG4gICAgICAgICAgICAgICAgICAgID8gbmV3VmFsdWUgKyBjdXJWYWx1ZSA9PT0gMjNcbiAgICAgICAgICAgICAgICAgICAgOiBNYXRoLmFicyhuZXdWYWx1ZSAtIGN1clZhbHVlKSA+IHN0ZXApKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hbVBNLnRleHRDb250ZW50ID1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sMTBuLmFtUE1baW50KHNlbGYuYW1QTS50ZXh0Q29udGVudCA9PT0gc2VsZi5sMTBuLmFtUE1bMF0pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gcGFkKG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0KCk7XG4gICAgcmV0dXJuIHNlbGY7XG59XG5mdW5jdGlvbiBfZmxhdHBpY2tyKG5vZGVMaXN0LCBjb25maWcpIHtcbiAgICB2YXIgbm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2VcbiAgICAgICAgLmNhbGwobm9kZUxpc3QpXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggaW5zdGFuY2VvZiBIVE1MRWxlbWVudDsgfSk7XG4gICAgdmFyIGluc3RhbmNlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZnAtb21pdFwiKSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChub2RlLl9mbGF0cGlja3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG5vZGUuX2ZsYXRwaWNrci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgbm9kZS5fZmxhdHBpY2tyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZS5fZmxhdHBpY2tyID0gRmxhdHBpY2tySW5zdGFuY2Uobm9kZSwgY29uZmlnIHx8IHt9KTtcbiAgICAgICAgICAgIGluc3RhbmNlcy5wdXNoKG5vZGUuX2ZsYXRwaWNrcik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlcy5sZW5ndGggPT09IDEgPyBpbnN0YW5jZXNbMF0gOiBpbnN0YW5jZXM7XG59XG5pZiAodHlwZW9mIEhUTUxFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIEhUTUxDb2xsZWN0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIE5vZGVMaXN0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgSFRNTENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXRwaWNrciA9IE5vZGVMaXN0LnByb3RvdHlwZS5mbGF0cGlja3IgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBfZmxhdHBpY2tyKHRoaXMsIGNvbmZpZyk7XG4gICAgfTtcbiAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZmxhdHBpY2tyID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcihbdGhpc10sIGNvbmZpZyk7XG4gICAgfTtcbn1cbnZhciBmbGF0cGlja3IgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGNvbmZpZykge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIF9mbGF0cGlja3Iod2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLCBjb25maWcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIF9mbGF0cGlja3IoW3NlbGVjdG9yXSwgY29uZmlnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBfZmxhdHBpY2tyKHNlbGVjdG9yLCBjb25maWcpO1xuICAgIH1cbn07XG5mbGF0cGlja3IuZGVmYXVsdENvbmZpZyA9IHt9O1xuZmxhdHBpY2tyLmwxMG5zID0ge1xuICAgIGVuOiBfX2Fzc2lnbih7fSwgRW5nbGlzaCksXG4gICAgZGVmYXVsdDogX19hc3NpZ24oe30sIEVuZ2xpc2gpLFxufTtcbmZsYXRwaWNrci5sb2NhbGl6ZSA9IGZ1bmN0aW9uIChsMTBuKSB7XG4gICAgZmxhdHBpY2tyLmwxMG5zLmRlZmF1bHQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmxhdHBpY2tyLmwxMG5zLmRlZmF1bHQpLCBsMTBuKTtcbn07XG5mbGF0cGlja3Iuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcpLCBjb25maWcpO1xufTtcbmZsYXRwaWNrci5wYXJzZURhdGUgPSBjcmVhdGVEYXRlUGFyc2VyKHt9KTtcbmZsYXRwaWNrci5mb3JtYXREYXRlID0gY3JlYXRlRGF0ZUZvcm1hdHRlcih7fSk7XG5mbGF0cGlja3IuY29tcGFyZURhdGVzID0gY29tcGFyZURhdGVzO1xuaWYgKHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGpRdWVyeS5mbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGpRdWVyeS5mbi5mbGF0cGlja3IgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBfZmxhdHBpY2tyKHRoaXMsIGNvbmZpZyk7XG4gICAgfTtcbn1cbkRhdGUucHJvdG90eXBlLmZwX2luY3IgPSBmdW5jdGlvbiAoZGF5cykge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksIHRoaXMuZ2V0TW9udGgoKSwgdGhpcy5nZXREYXRlKCkgKyAodHlwZW9mIGRheXMgPT09IFwic3RyaW5nXCIgPyBwYXJzZUludChkYXlzLCAxMCkgOiBkYXlzKSk7XG59O1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW5kb3cuZmxhdHBpY2tyID0gZmxhdHBpY2tyO1xufVxuZXhwb3J0IGRlZmF1bHQgZmxhdHBpY2tyO1xuIiwgImltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCB7IEFwcCwgTWVudSwgTm90aWNlLCBzZXRJY29uLCBUZXh0QXJlYUNvbXBvbmVudCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwgZnJvbSBcInNyYy9vcHRpb25zL0ZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbFwiO1xuaW1wb3J0IE11bHRpRmlsZU1vZGFsIGZyb20gXCJzcmMvb3B0aW9uTW9kYWxzL2ZpZWxkcy9NdWx0aUZpbGVNb2RhbFwiO1xuaW1wb3J0IEZpZWxkU2V0dGluZ3NNb2RhbCBmcm9tIFwic3JjL3NldHRpbmdzL0ZpZWxkU2V0dGluZ3NNb2RhbFwiO1xuaW1wb3J0IHsgRmllbGRJY29uLCBGaWVsZFR5cGUgfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwiLi4vRmllbGRcIjtcbmltcG9ydCB7IEZpZWxkTWFuYWdlciwgU2V0dGluZ0xvY2F0aW9uIH0gZnJvbSBcIi4uL0ZpZWxkTWFuYWdlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNdWx0aUZpbGVGaWVsZCBleHRlbmRzIEZpZWxkTWFuYWdlciB7XG5cbiAgICBwcml2YXRlIGZpbGVWYWxpZGF0b3JGaWVsZDogSFRNTERpdkVsZW1lbnRcbiAgICBwcml2YXRlIGR2UXVlcnlTdHJpbmc6IFRleHRBcmVhQ29tcG9uZW50XG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZDogRmllbGQpIHtcbiAgICAgICAgc3VwZXIoZmllbGQsIEZpZWxkVHlwZS5NdWx0aUZpbGUpXG4gICAgfVxuXG4gICAgc3RhdGljIGJ1aWxkTWFya0Rvd25MaW5rKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgcGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgZGVzdEZpbGUgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChwYXRoLCBmaWxlLnBhdGgpXG4gICAgICAgIGlmIChkZXN0RmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcC5maWxlTWFuYWdlci5nZW5lcmF0ZU1hcmtkb3duTGluayhcbiAgICAgICAgICAgICAgICBkZXN0RmlsZSxcbiAgICAgICAgICAgICAgICBmaWxlLnBhdGgsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGRlc3RGaWxlLmJhc2VuYW1lXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiXCJcbiAgICB9XG5cbiAgICBnZXRGaWxlcyA9ICgpOiBURmlsZVtdID0+IHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGdldFJlc3VsdHMgPSAoYXBpOiBEYXRhdmlld1BsdWdpbltcImFwaVwiXSkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG5ldyBGdW5jdGlvbihcImR2XCIsIGByZXR1cm4gJHt0aGlzLmZpZWxkLm9wdGlvbnMuZHZRdWVyeVN0cmluZ31gKSkoYXBpKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBXcm9uZyBxdWVyeSBmb3IgZmllbGQgPCR7dGhpcy5maWVsZC5uYW1lfT5cXG5jaGVjayB5b3VyIHNldHRpbmdzYCwgMzAwMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGF0YXZpZXcgPSBhcHAucGx1Z2lucy5wbHVnaW5zW1wiZGF0YXZpZXdcIl1cbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLmZpZWxkLm9wdGlvbnMuZHZRdWVyeVN0cmluZyAmJiBkYXRhdmlldz8uc2V0dGluZ3MuZW5hYmxlRGF0YXZpZXdKcyAmJiBkYXRhdmlldz8uc2V0dGluZ3MuZW5hYmxlSW5saW5lRGF0YXZpZXdKcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlc1BhdGggPSBnZXRSZXN1bHRzKGRhdGF2aWV3LmFwaSkudmFsdWVzLm1hcCgodjogYW55KSA9PiB2LmZpbGUucGF0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5maWx0ZXIoZiA9PiBmaWxlc1BhdGguaW5jbHVkZXMoZi5wYXRoKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZEZpZWxkT3B0aW9uKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBsb2NhdGlvbjogTWVudSB8IEZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbCk6IHZvaWQge1xuICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBNdWx0aUZpbGVNb2RhbChhcHAsIGZpbGUsIHRoaXMuZmllbGQsIHZhbHVlKVxuICAgICAgICBpZiAoTXVsdGlGaWxlRmllbGQuaXNNZW51KGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgbG9jYXRpb24uYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoYFVwZGF0ZSAke25hbWV9YCk7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKEZpZWxkSWNvbltGaWVsZFR5cGUuRmlsZV0pO1xuICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljaygoKSA9PiBtb2RhbC5vcGVuKCkpO1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0U2VjdGlvbihcIm1ldGFkYXRhLW1lbnUuZmllbGRzXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoTXVsdGlGaWxlRmllbGQuaXNTdWdnZXN0KGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgbG9jYXRpb24ub3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZDogYHVwZGF0ZV8ke25hbWV9YCxcbiAgICAgICAgICAgICAgICBhY3Rpb25MYWJlbDogYDxzcGFuPlVwZGF0ZSA8Yj4ke25hbWV9PC9iPjwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4gbW9kYWwub3BlbigpLFxuICAgICAgICAgICAgICAgIGljb246IEZpZWxkSWNvbltGaWVsZFR5cGUuRmlsZV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNyZWF0ZUFuZE9wZW5GaWVsZE1vZGFsKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgc2VsZWN0ZWRGaWVsZE5hbWU6IHN0cmluZywgdmFsdWU/OiBzdHJpbmcsIGxpbmVOdW1iZXI/OiBudW1iZXIsIGluRnJvbnRtYXR0ZXI/OiBib29sZWFuLCBhZnRlcj86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZmllbGRNb2RhbCA9IG5ldyBNdWx0aUZpbGVNb2RhbChhcHAsIGZpbGUsIHRoaXMuZmllbGQsIHZhbHVlLCBsaW5lTnVtYmVyLCBpbkZyb250bWF0dGVyLCBhZnRlcik7XG4gICAgICAgIGZpZWxkTW9kYWwudGl0bGVFbC5zZXRUZXh0KGBFbnRlciB2YWx1ZSBmb3IgJHtzZWxlY3RlZEZpZWxkTmFtZX1gKTtcbiAgICAgICAgZmllbGRNb2RhbC5vcGVuKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlRHZGaWVsZChcbiAgICAgICAgcGx1Z2luOiBNZXRhZGF0YU1lbnUsXG4gICAgICAgIGR2OiBhbnksXG4gICAgICAgIHA6IGFueSxcbiAgICAgICAgZmllbGRDb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgICAgICBhdHRycz86IHsgY2xzPzogc3RyaW5nLCBhdHRyPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiwgb3B0aW9ucz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfVxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBmaWVsZFZhbHVlID0gZHYuZWwoJ3NwYW4nLCBwW3RoaXMuZmllbGQubmFtZV0sIGF0dHJzKTtcbiAgICAgICAgY29uc3Qgc2VhcmNoQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKVxuICAgICAgICBzZXRJY29uKHNlYXJjaEJ0biwgRmllbGRJY29uW0ZpZWxkVHlwZS5GaWxlXSlcbiAgICAgICAgc2VhcmNoQnRuLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC1idXR0b25cIilcbiAgICAgICAgLyogZW5kIHNwYWNlciAqL1xuICAgICAgICBjb25zdCBzcGFjZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICAgICAgIHNwYWNlci5zZXRBdHRyKFwiY2xhc3NcIiwgXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLXNwYWNlclwiKVxuXG4gICAgICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBbXCJmaWxlXCJdW1wicGF0aFwiXSlcbiAgICAgICAgLy9sZXQgZmllbGRNb2RhbDogU2luZ2xlRmlsZU1vZGFsO1xuICAgICAgICBsZXQgZmllbGRNb2RhbDogTXVsdGlGaWxlTW9kYWw7XG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICAvL2ZpZWxkTW9kYWwgPSBuZXcgU2luZ2xlRmlsZU1vZGFsKGFwcCwgZmlsZSwgdGhpcy5maWVsZClcbiAgICAgICAgICAgIGZpZWxkTW9kYWwgPSBuZXcgTXVsdGlGaWxlTW9kYWwoYXBwLCBmaWxlLCB0aGlzLmZpZWxkLCBwW3RoaXMuZmllbGQubmFtZV0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInBhdGggZG9lc24ndCBjb3JyZXNwb25kIHRvIGEgcHJvcGVyIGZpbGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgc2VhcmNoQnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBmaWVsZE1vZGFsLm9wZW4oKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhdHRycz8ub3B0aW9ucz8uYWx3YXlzT24pIHtcbiAgICAgICAgICAgIHNlYXJjaEJ0bi5oaWRlKClcbiAgICAgICAgICAgIHNwYWNlci5zaG93KClcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLm9ubW91c2VvdmVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlYXJjaEJ0bi5zaG93KClcbiAgICAgICAgICAgICAgICBzcGFjZXIuaGlkZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5vbm1vdXNlb3V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlYXJjaEJ0bi5oaWRlKClcbiAgICAgICAgICAgICAgICBzcGFjZXIuc2hvdygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpbml0aWFsIHN0YXRlICovXG4gICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGZpZWxkVmFsdWUpO1xuICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWFyY2hCdG4pO1xuICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChzcGFjZXIpO1xuICAgIH1cblxuICAgIGNyZWF0ZUZpbGVDb250YWluZXIocGFyZW50Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBkdlF1ZXJ5U3RyaW5nQ29udGFpbmVyID0gcGFyZW50Q29udGFpbmVyLmNyZWF0ZURpdigpO1xuICAgICAgICBkdlF1ZXJ5U3RyaW5nQ29udGFpbmVyLmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IFwiRGF0YXZpZXcgUXVlcnkgKG9wdGlvbmFsKVwiLCBjbHM6ICdtZXRhZGF0YS1tZW51LWZpZWxkLW9wdGlvbicgfSk7XG4gICAgICAgIHRoaXMuZHZRdWVyeVN0cmluZyA9IG5ldyBUZXh0QXJlYUNvbXBvbmVudChkdlF1ZXJ5U3RyaW5nQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5kdlF1ZXJ5U3RyaW5nLmlucHV0RWwuY29scyA9IDUwO1xuICAgICAgICB0aGlzLmR2UXVlcnlTdHJpbmcuaW5wdXRFbC5yb3dzID0gNDtcbiAgICAgICAgdGhpcy5kdlF1ZXJ5U3RyaW5nLnNldFZhbHVlKHRoaXMuZmllbGQub3B0aW9ucy5kdlF1ZXJ5U3RyaW5nIHx8IFwiXCIpO1xuXG4gICAgICAgIHRoaXMuZHZRdWVyeVN0cmluZy5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnMuZHZRdWVyeVN0cmluZyA9IHZhbHVlO1xuICAgICAgICAgICAgRmllbGRTZXR0aW5nc01vZGFsLnJlbW92ZVZhbGlkYXRpb25FcnJvcih0aGlzLmR2UXVlcnlTdHJpbmcpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNyZWF0ZVNldHRpbmdDb250YWluZXIocGFyZW50Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCwgcGx1Z2luOiBNZXRhZGF0YU1lbnUsIGxvY2F0aW9uPzogU2V0dGluZ0xvY2F0aW9uKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZmlsZVZhbGlkYXRvckZpZWxkID0gcGFyZW50Q29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LW51bWJlci1vcHRpb25zXCIgfSlcbiAgICAgICAgdGhpcy5jcmVhdGVGaWxlQ29udGFpbmVyKHRoaXMuZmlsZVZhbGlkYXRvckZpZWxkKVxuICAgICAgICB0aGlzLmZpbGVWYWxpZGF0b3JGaWVsZC5jcmVhdGVEaXYoeyBjbHM6ICdtZXRhZGF0YS1tZW51LXNlcGFyYXRvcicgfSkuY3JlYXRlRWwoXCJoclwiKTtcbiAgICB9XG5cbiAgICBnZXRPcHRpb25zU3RyKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLm9wdGlvbnMuZHZRdWVyeVN0cmluZyB8fCBcIlwiO1xuICAgIH1cblxuICAgIHZhbGlkYXRlT3B0aW9ucygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgYXN5bmMgdmFsaWRhdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGJhc2VuYW1lID0gdmFsdWUudHJpbSgpLnJlcGxhY2UoL15cXFtcXFsvZywgXCJcIikucmVwbGFjZSgvXFxdXFxdJC9nLCBcIlwiKTtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5nZXRGaWxlcygpLm1hcChmID0+IGYuYmFzZW5hbWUpLmZpbmQoaXRlbSA9PiBpdGVtID09PSBiYXNlbmFtZSk7XG4gICAgfVxufSIsICJpbXBvcnQgeyBURmlsZSwgQXBwLCBGdXp6eVN1Z2dlc3RNb2RhbCwgRnV6enlNYXRjaCwgQnV0dG9uQ29tcG9uZW50LCBzZXRJY29uLCBGaWxlTWFuYWdlciB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCJzcmMvZmllbGRzL0ZpZWxkXCI7XG5pbXBvcnQgeyByZXBsYWNlVmFsdWVzIH0gZnJvbSBcInNyYy9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5pbXBvcnQgeyBpbnNlcnRWYWx1ZXMgfSBmcm9tIFwic3JjL2NvbW1hbmRzL2luc2VydFZhbHVlc1wiO1xuaW1wb3J0IHsgRmllbGRNYW5hZ2VyIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIgYXMgRk0gfSBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZE1hbmFnZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVsdGlGaWxlRnV6enlTdWdnZXN0ZXIgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxURmlsZT4ge1xuXG4gICAgcHJpdmF0ZSBmaWxlOiBURmlsZTtcbiAgICBwcml2YXRlIGZpZWxkOiBGaWVsZDtcbiAgICBwcml2YXRlIGxpbmVOdW1iZXI6IG51bWJlcjtcbiAgICBwcml2YXRlIGluRnJvbnRtYXR0ZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBhZnRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHNlbGVjdGVkRmlsZXM6IFRGaWxlW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBmaWxlOiBURmlsZSwgZmllbGQ6IEZpZWxkLCBpbml0aWFsVmFsdWVPYmplY3Q6IGFueSwgbGluZU51bWJlcjogbnVtYmVyID0gLTEsIGluRnJvbnRNYXR0ZXI6IGJvb2xlYW4gPSBmYWxzZSwgYWZ0ZXI6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLmluRnJvbnRtYXR0ZXIgPSBpbkZyb250TWF0dGVyO1xuICAgICAgICB0aGlzLmFmdGVyID0gYWZ0ZXI7XG4gICAgICAgIGNvbnN0IGR2QXBpID0gdGhpcy5hcHAucGx1Z2lucy5wbHVnaW5zW1wiZGF0YXZpZXdcIl0/LmFwaVxuICAgICAgICBpZiAoZHZBcGkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVmFsdWVzOiBBcnJheTxhbnk+ID0gQXJyYXkuaXNBcnJheShpbml0aWFsVmFsdWVPYmplY3QpID8gaW5pdGlhbFZhbHVlT2JqZWN0IDogW2luaXRpYWxWYWx1ZU9iamVjdF1cbiAgICAgICAgICAgIHNlbGVjdGVkVmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkdkFwaS52YWx1ZS5pc0xpbmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodmFsdWUucGF0aClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkgdGhpcy5zZWxlY3RlZEZpbGVzLnB1c2goZmlsZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LXZhbHVlLXN1Z2dlc3Rlci1hY3Rpb25zXCIgfSlcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LXZhbHVlLXN1Z2dlc3Rlci1hY3Rpb25zLXNwYWNlclwiIH0pXG4gICAgICAgIC8vY29uZmlybSBidXR0b25cbiAgICAgICAgY29uc3QgY29uZmlybUJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQoYnV0dG9uQ29udGFpbmVyKVxuICAgICAgICBjb25maXJtQnV0dG9uLnNldEljb24oXCJjaGVja21hcmtcIilcbiAgICAgICAgY29uZmlybUJ1dHRvbi5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVwbGFjZVZhbHVlcygpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICAgIH0pXG4gICAgICAgIGNvbmZpcm1CdXR0b24uYnV0dG9uRWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXZhbHVlLXN1Z2dlc3Rlci1idXR0b25cIilcbiAgICAgICAgLy9jYW5jZWwgYnV0dG9uXG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQoYnV0dG9uQ29udGFpbmVyKVxuICAgICAgICBjYW5jZWxCdXR0b24uc2V0SWNvbihcImNyb3NzXCIpXG4gICAgICAgIGNhbmNlbEJ1dHRvbi5vbkNsaWNrKCgpID0+IHsgdGhpcy5jbG9zZSgpOyB9KVxuICAgICAgICBjYW5jZWxCdXR0b24uYnV0dG9uRWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXZhbHVlLXN1Z2dlc3Rlci1idXR0b25cIilcbiAgICAgICAgLy9jbGVhciB2YWx1ZSBidXR0b25cbiAgICAgICAgY29uc3QgY2xlYXJCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGJ1dHRvbkNvbnRhaW5lcilcbiAgICAgICAgY2xlYXJCdXR0b24uc2V0SWNvbihcInRyYXNoXCIpXG4gICAgICAgIGNsZWFyQnV0dG9uLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jbGVhclZhbHVlcygpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KVxuICAgICAgICBjbGVhckJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtdmFsdWUtc3VnZ2VzdGVyLWJ1dHRvblwiKVxuICAgICAgICBjbGVhckJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcyhcImRhbmdlclwiKVxuXG4gICAgICAgIHRoaXMubW9kYWxFbC5pbnNlcnRCZWZvcmUoYnV0dG9uQ29udGFpbmVyLCB0aGlzLm1vZGFsRWwuY2hpbGROb2Rlc1swXSlcbiAgICAgICAgc3VwZXIub25PcGVuKClcbiAgICB9XG5cbiAgICBnZXRJdGVtcygpOiBURmlsZVtdIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVNYW5hZ2VyID0gbmV3IEZpZWxkTWFuYWdlclt0aGlzLmZpZWxkLnR5cGVdKHRoaXMuZmllbGQpO1xuICAgICAgICAgICAgcmV0dXJuIGZpbGVNYW5hZ2VyLmdldEZpbGVzKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB0aHJvdyAoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SXRlbVRleHQoaXRlbTogVEZpbGUpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gaXRlbS5iYXNlbmFtZTtcbiAgICB9XG5cbiAgICBhc3luYyByZXBsYWNlVmFsdWVzKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNlbGVjdGVkRmlsZXMubWFwKGZpbGUgPT4gRk0uYnVpbGRNYXJrRG93bkxpbmsodGhpcy5hcHAsIHRoaXMuZmlsZSwgZmlsZS5iYXNlbmFtZSkpXG4gICAgICAgIGlmICh0aGlzLmxpbmVOdW1iZXIgPT0gLTEpIHtcbiAgICAgICAgICAgIGF3YWl0IHJlcGxhY2VWYWx1ZXMoXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlLFxuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQubmFtZSxcbiAgICAgICAgICAgICAgICByZXN1bHQuam9pbihcIiwgXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgaW5zZXJ0VmFsdWVzKFxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxuICAgICAgICAgICAgICAgIHRoaXMuZmlsZSxcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgcmVzdWx0LmpvaW4oXCIsIFwiKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgdGhpcy5pbkZyb250bWF0dGVyLFxuICAgICAgICAgICAgICAgIHRoaXMuYWZ0ZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYXN5bmMgY2xlYXJWYWx1ZXMoKSB7XG4gICAgICAgIGF3YWl0IHJlcGxhY2VWYWx1ZXMoXG4gICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgIHRoaXMuZmlsZSxcbiAgICAgICAgICAgIHRoaXMuZmllbGQubmFtZSxcbiAgICAgICAgICAgIFwiXCJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXJTdWdnZXN0aW9uKHZhbHVlOiBGdXp6eU1hdGNoPFRGaWxlPiwgZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGVsLnNldFRleHQodmFsdWUuaXRlbS5iYXNlbmFtZSlcbiAgICAgICAgZWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LXZhbHVlLXN1Z2dlc3Rlci12YWx1ZS1jb250YWluZXJcIilcbiAgICAgICAgY29uc3Qgc3BhY2VyID0gdGhpcy5jb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1zdWdnZXN0ZXItdmFsdWUtY29udGFpbmVyLXNwYWNlclwiIH0pXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKHNwYWNlcilcblxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEZpbGVzLnNvbWUoZmlsZSA9PiBmaWxlLnBhdGggPT09IHZhbHVlLml0ZW0ucGF0aCkpIHtcbiAgICAgICAgICAgIGVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3RlZFwiKVxuICAgICAgICAgICAgY29uc3QgaWNvbkNvbnRhaW5lciA9IGVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LWNvbW1hbmQtc3VnZ2VzdC1pY29uXCIgfSlcbiAgICAgICAgICAgIHNldEljb24oaWNvbkNvbnRhaW5lciwgXCJjaGVjay1jaXJjbGVcIilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlucHV0RWwuZm9jdXMoKVxuICAgIH1cblxuICAgIHJlbmRlclNlbGVjdGVkKCkge1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgY2hvb3NlciA9IHRoaXMuY2hvb3NlclxuICAgICAgICBjb25zdCBzdWdnZXN0aW9uczogSFRNTERpdkVsZW1lbnRbXSA9IGNob29zZXIuc3VnZ2VzdGlvbnNcbiAgICAgICAgY29uc3QgdmFsdWVzOiBGdXp6eU1hdGNoPFRGaWxlPltdID0gY2hvb3Nlci52YWx1ZXNcblxuICAgICAgICBzdWdnZXN0aW9ucy5mb3JFYWNoKChzLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEZpbGVzLnNvbWUoZmlsZSA9PiBmaWxlLnBhdGggPT09IHZhbHVlc1tpXS5pdGVtLnBhdGgpKSB7XG4gICAgICAgICAgICAgICAgcy5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtdmFsdWUtc2VsZWN0ZWRcIilcbiAgICAgICAgICAgICAgICBpZiAocy5xdWVyeVNlbGVjdG9yQWxsKFwiLm1ldGFkYXRhLW1lbnUtY29tbWFuZC1zdWdnZXN0LWljb25cIikubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWNvbkNvbnRhaW5lciA9IHMuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtY29tbWFuZC1zdWdnZXN0LWljb25cIiB9KVxuICAgICAgICAgICAgICAgICAgICBzZXRJY29uKGljb25Db250YWluZXIsIFwiY2hlY2stY2lyY2xlXCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzLnJlbW92ZUNsYXNzKFwibWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3RlZFwiKVxuICAgICAgICAgICAgICAgIHMucXVlcnlTZWxlY3RvckFsbChcIi5tZXRhZGF0YS1tZW51LWNvbW1hbmQtc3VnZ2VzdC1pY29uXCIpLmZvckVhY2goaWNvbiA9PiBpY29uLnJlbW92ZSgpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgfVxuXG4gICAgc2VsZWN0U3VnZ2VzdGlvbih2YWx1ZTogRnV6enlNYXRjaDxURmlsZT4sIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRGaWxlcy5pbmNsdWRlcyh2YWx1ZS5pdGVtKSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpbGVzLnJlbW92ZSh2YWx1ZS5pdGVtKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpbGVzLnB1c2godmFsdWUuaXRlbSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlclNlbGVjdGVkKClcbiAgICB9XG5cbiAgICBhc3luYyBvbkNob29zZUl0ZW0oaXRlbTogVEZpbGUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLypcbiAgICAgICAgaWYgKHRoaXMubGluZU51bWJlciA9PSAtMSkge1xuICAgICAgICAgICAgYXdhaXQgcmVwbGFjZVZhbHVlcyhcbiAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGUsXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZC5uYW1lLFxuICAgICAgICAgICAgICAgIEZpbGVGaWVsZC5idWlsZE1hcmtEb3duTGluayh0aGlzLmFwcCwgdGhpcy5maWxlLCBpdGVtLmJhc2VuYW1lKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IGluc2VydFZhbHVlcyhcbiAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGUsXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZC5uYW1lLFxuICAgICAgICAgICAgICAgIEZpbGVGaWVsZC5idWlsZE1hcmtEb3duTGluayh0aGlzLmFwcCwgdGhpcy5maWxlLCBpdGVtLmJhc2VuYW1lKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgdGhpcy5pbkZyb250bWF0dGVyLFxuICAgICAgICAgICAgICAgIHRoaXMuYWZ0ZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICAgICovXG4gICAgfVxuXG59IiwgImltcG9ydCBJbnB1dCBmcm9tICcuL0lucHV0RmllbGQnXG5pbXBvcnQgQm9vbGVhbiBmcm9tICcuL0Jvb2xlYW5GaWVsZCdcbmltcG9ydCBOdW1iZXIgZnJvbSAnLi9OdW1iZXJGaWVsZCdcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi9TZWxlY3RGaWVsZCdcbmltcG9ydCBDeWNsZSBmcm9tICcuL0N5Y2xlRmllbGQnXG5pbXBvcnQgTXVsdGkgZnJvbSAnLi9NdWx0aUZpZWxkJ1xuaW1wb3J0IEZpbGUgZnJvbSAnLi9GaWxlRmllbGQnXG5pbXBvcnQgRGF0ZSBmcm9tICcuL0RhdGVGaWVsZCdcbmltcG9ydCBNdWx0aUZpbGUgZnJvbSAnLi9NdWx0aUZpbGVGaWVsZCdcblxuY29uc3QgTWFuYWdlcnMgPSB7XG4gICAgSW5wdXQsXG4gICAgQm9vbGVhbixcbiAgICBOdW1iZXIsXG4gICAgU2VsZWN0LFxuICAgIEN5Y2xlLFxuICAgIE11bHRpLFxuICAgIEZpbGUsXG4gICAgRGF0ZSxcbiAgICBNdWx0aUZpbGVcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFuYWdlcnMiLCAiaW1wb3J0IE1hbmFnZXJzIGZyb20gXCJzcmMvZmllbGRzL2ZpZWxkTWFuYWdlcnMvTWFuYWdlcnNcIjtcblxuZXhwb3J0IGNvbnN0IGVudW0gRmllbGRUeXBlIHtcbiAgICAnSW5wdXQnID0gXCJJbnB1dFwiLFxuICAgICdTZWxlY3QnID0gXCJTZWxlY3RcIixcbiAgICAnTXVsdGknID0gXCJNdWx0aVwiLFxuICAgICdDeWNsZScgPSBcIkN5Y2xlXCIsXG4gICAgJ0Jvb2xlYW4nID0gXCJCb29sZWFuXCIsXG4gICAgXCJOdW1iZXJcIiA9IFwiTnVtYmVyXCIsXG4gICAgXCJGaWxlXCIgPSBcIkZpbGVcIixcbiAgICBcIk11bHRpRmlsZVwiID0gXCJNdWx0aUZpbGVcIixcbiAgICBcIkRhdGVcIiA9IFwiRGF0ZVwiXG59XG5cbmV4cG9ydCBjb25zdCBGaWVsZFR5cGVMYWJlbE1hcHBpbmc6IFJlY29yZDxrZXlvZiB0eXBlb2YgRmllbGRUeXBlLCBGaWVsZFR5cGU+ID0ge1xuICAgIFwiSW5wdXRcIjogRmllbGRUeXBlLklucHV0LFxuICAgIFwiU2VsZWN0XCI6IEZpZWxkVHlwZS5TZWxlY3QsXG4gICAgXCJNdWx0aVwiOiBGaWVsZFR5cGUuTXVsdGksXG4gICAgXCJDeWNsZVwiOiBGaWVsZFR5cGUuQ3ljbGUsXG4gICAgXCJCb29sZWFuXCI6IEZpZWxkVHlwZS5Cb29sZWFuLFxuICAgIFwiTnVtYmVyXCI6IEZpZWxkVHlwZS5OdW1iZXIsXG4gICAgXCJGaWxlXCI6IEZpZWxkVHlwZS5GaWxlLFxuICAgIFwiTXVsdGlGaWxlXCI6IEZpZWxkVHlwZS5NdWx0aUZpbGUsXG4gICAgXCJEYXRlXCI6IEZpZWxkVHlwZS5EYXRlXG59O1xuXG5leHBvcnQgY29uc3QgRmllbGRUeXBlVGFnQ2xhc3M6IFJlY29yZDxrZXlvZiB0eXBlb2YgRmllbGRUeXBlLCBzdHJpbmc+ID0ge1xuICAgIFwiSW5wdXRcIjogXCJzaW5nbGVcIixcbiAgICBcIlNlbGVjdFwiOiBcInNlbGVjdFwiLFxuICAgIFwiTXVsdGlcIjogXCJtdWx0aVwiLFxuICAgIFwiQ3ljbGVcIjogXCJjeWNsZVwiLFxuICAgIFwiQm9vbGVhblwiOiBcImJvb2xlYW5cIixcbiAgICBcIk51bWJlclwiOiBcIm51bWJlclwiLFxuICAgIFwiRmlsZVwiOiBcImZpbGVcIixcbiAgICBcIk11bHRpRmlsZVwiOiBcImZpbGVcIixcbiAgICBcIkRhdGVcIjogXCJkYXRlXCJcbn1cblxuZXhwb3J0IGNvbnN0IEZpZWxkVHlwZVRvb2x0aXA6IFJlY29yZDxrZXlvZiB0eXBlb2YgRmllbGRUeXBlLCBzdHJpbmc+ID0ge1xuICAgIFwiSW5wdXRcIjogXCJBY2NlcHQgYW55IHZhbHVlXCIsXG4gICAgXCJTZWxlY3RcIjogXCJBY2NlcHQgYSBzaW5nbGUgdmFsdWUgZnJvbSBhIGxpc3RcIixcbiAgICBcIk11bHRpXCI6IFwiQWNjZXB0IG11bHRpcGxlIHZhbHVlcyBmcm9tIGEgbGlzdFwiLFxuICAgIFwiQ3ljbGVcIjogXCJDeWNsZSB0aHJvdWdoIHZhbHVlcyBmcm9tIGEgbGlzdFwiLFxuICAgIFwiQm9vbGVhblwiOiBcIkFjY2VwdCB0cnVlIG9mIGZhbHNlXCIsXG4gICAgXCJOdW1iZXJcIjogXCJBY2NlcHQgYSBudW1iZXJcIixcbiAgICBcIkZpbGVcIjogXCJBY2NlcHQgYSBsaW5rXCIsXG4gICAgXCJNdWx0aUZpbGVcIjogXCJBY2NlcHQgbXVsdGlwbGUgbGlua3NcIixcbiAgICBcIkRhdGVcIjogXCJBY2NlcHQgYSBkYXRlXCJcbn1cblxuZXhwb3J0IGNvbnN0IEZpZWxkTWFuYWdlcjogUmVjb3JkPGtleW9mIHR5cGVvZiBGaWVsZFR5cGUsIGFueT4gPSB7XG4gICAgXCJJbnB1dFwiOiBNYW5hZ2Vycy5JbnB1dCxcbiAgICBcIlNlbGVjdFwiOiBNYW5hZ2Vycy5TZWxlY3QsXG4gICAgXCJNdWx0aVwiOiBNYW5hZ2Vycy5NdWx0aSxcbiAgICBcIkN5Y2xlXCI6IE1hbmFnZXJzLkN5Y2xlLFxuICAgIFwiQm9vbGVhblwiOiBNYW5hZ2Vycy5Cb29sZWFuLFxuICAgIFwiTnVtYmVyXCI6IE1hbmFnZXJzLk51bWJlcixcbiAgICBcIkZpbGVcIjogTWFuYWdlcnMuRmlsZSxcbiAgICBcIk11bHRpRmlsZVwiOiBNYW5hZ2Vycy5NdWx0aUZpbGUsXG4gICAgXCJEYXRlXCI6IE1hbmFnZXJzLkRhdGVcbn1cblxuZXhwb3J0IGNvbnN0IEZpZWxkSWNvbjogUmVjb3JkPGtleW9mIHR5cGVvZiBGaWVsZFR5cGUsIHN0cmluZz4gPSB7XG4gICAgXCJJbnB1dFwiOiBcInBlbmNpbFwiLFxuICAgIFwiU2VsZWN0XCI6IFwicmlnaHQtdHJpYW5nbGVcIixcbiAgICBcIk11bHRpXCI6IFwiYnVsbGV0LWxpc3RcIixcbiAgICBcIkN5Y2xlXCI6IFwic3dpdGNoXCIsXG4gICAgXCJCb29sZWFuXCI6IFwiY2hlY2ttYXJrXCIsXG4gICAgXCJOdW1iZXJcIjogXCJwbHVzLW1pbnVzLWdseXBoXCIsXG4gICAgXCJGaWxlXCI6IFwibGlua1wiLFxuICAgIFwiTXVsdGlGaWxlXCI6IFwibGlua1wiLFxuICAgIFwiRGF0ZVwiOiBcImNhbGVuZGFyLXdpdGgtY2hlY2ttYXJrXCJcbn0iLCAiaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSBcIi4uL3R5cGVzL2ZpZWxkVHlwZXNcIlxuXG5pbnRlcmZhY2UgRmllbGQge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gICAgdmFsdWVzTGlzdE5vdGVQYXRoOiBzdHJpbmc7XG4gICAgdHlwZTogRmllbGRUeXBlXG59XG5cbmNsYXNzIEZpZWxkIHtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZyA9IFwiXCIsXG4gICAgICAgIG9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fSxcbiAgICAgICAgaWQ6IHN0cmluZyA9IFwiXCIsXG4gICAgICAgIHZhbHVlc0xpc3ROb3RlUGF0aDogc3RyaW5nID0gXCJcIixcbiAgICAgICAgdHlwZTogRmllbGRUeXBlID0gRmllbGRUeXBlLklucHV0XG4gICAgKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy52YWx1ZXNMaXN0Tm90ZVBhdGggPSB2YWx1ZXNMaXN0Tm90ZVBhdGg7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGVcbiAgICAgICAgdGhpcy5pbnNlcnROZXdWYWx1ZS5iaW5kKHRoaXMpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5zZXJ0TmV3VmFsdWUodmFsdWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGxldCBuZXdLZXkgPSAxO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJzZUludChrZXkpICYmIHBhcnNlSW50KGtleSkgPj0gbmV3S2V5KSB7XG4gICAgICAgICAgICAgICAgbmV3S2V5ID0gcGFyc2VJbnQoa2V5KSArIDE7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zW25ld0tleS50b1N0cmluZygpXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gbmV3S2V5LnRvU3RyaW5nKCk7XG4gICAgfTtcblxuICAgIHN0YXRpYyBjb3B5UHJvcGVydHkodGFyZ2V0OiBGaWVsZCwgc291cmNlOiBGaWVsZCkge1xuICAgICAgICB0YXJnZXQuaWQgPSBzb3VyY2UuaWQ7XG4gICAgICAgIHRhcmdldC5uYW1lID0gc291cmNlLm5hbWU7XG4gICAgICAgIHRhcmdldC52YWx1ZXNMaXN0Tm90ZVBhdGggPSBzb3VyY2UudmFsdWVzTGlzdE5vdGVQYXRoO1xuICAgICAgICB0YXJnZXQudHlwZSA9IHNvdXJjZS50eXBlXG4gICAgICAgIE9iamVjdC5rZXlzKHNvdXJjZS5vcHRpb25zKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgICAgICAgdGFyZ2V0Lm9wdGlvbnNba10gPSBzb3VyY2Uub3B0aW9uc1trXTtcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5rZXlzKHRhcmdldC5vcHRpb25zKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhzb3VyY2Uub3B0aW9ucykuaW5jbHVkZXMoaykpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0Lm9wdGlvbnNba107XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVEZWZhdWx0KG5hbWU6IHN0cmluZyk6IEZpZWxkIHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBuZXcgRmllbGQoKTtcbiAgICAgICAgZmllbGQudHlwZSA9IEZpZWxkVHlwZS5JbnB1dDtcbiAgICAgICAgZmllbGQubmFtZSA9IG5hbWU7XG4gICAgICAgIHJldHVybiBmaWVsZDtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGaWVsZDsiLCAiaW1wb3J0IEZpZWxkIGZyb20gXCJzcmMvZmllbGRzL0ZpZWxkXCI7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcblxuaW50ZXJmYWNlIEZpbGVDbGFzc0F0dHJpYnV0ZSB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHR5cGU6IEZpZWxkVHlwZTtcbiAgICBvcHRpb25zOiBzdHJpbmdbXSB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gICAgb3JpZ2luOiBzdHJpbmc7XG59XG5cbmNsYXNzIEZpbGVDbGFzc0F0dHJpYnV0ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihvcmlnaW46IHN0cmluZywgbmFtZTogc3RyaW5nLCB0eXBlOiBGaWVsZFR5cGUgPSBGaWVsZFR5cGUuSW5wdXQsIG9wdGlvbnM6IHN0cmluZ1tdIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IFtdKSB7XG4gICAgICAgIHRoaXMub3JpZ2luID0gb3JpZ2luXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZVxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgfVxuXG4gICAgcHVibGljIGdldEZpZWxkKCkge1xuICAgICAgICBsZXQgb3B0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMpKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnM/LmZvckVhY2goKG9wdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBvcHRpb25zW2luZGV4XSA9IG9wdGlvbjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZCh0aGlzLm5hbWUsIG9wdGlvbnMsIHRoaXMubmFtZSwgdW5kZWZpbmVkLCB0aGlzLnR5cGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRmlsZUNsYXNzQXR0cmlidXRlIH07IiwgImltcG9ydCB7IEZpbGVDbGFzc0F0dHJpYnV0ZSB9IGZyb20gXCIuL2ZpbGVDbGFzc0F0dHJpYnV0ZVwiO1xuaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IHsgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IEZpZWxkVHlwZSwgRmllbGRUeXBlTGFiZWxNYXBwaW5nIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSBcInNyYy91dGlscy90ZXh0VXRpbHNcIjtcbmltcG9ydCB7IGdlbnVpbmVLZXlzIH0gZnJvbSBcInNyYy91dGlscy9kYXRhdmlld1V0aWxzXCI7XG5cbmludGVyZmFjZSBGaWxlQ2xhc3Mge1xuICAgIHBsdWdpbjogTWV0YWRhdGFNZW51O1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBhdHRyaWJ1dGVzOiBBcnJheTxGaWxlQ2xhc3NBdHRyaWJ1dGU+O1xuICAgIG9iamVjdHM6IEZpbGVDbGFzc01hbmFnZXI7XG4gICAgZXJyb3JzOiBzdHJpbmdbXTtcbiAgICBwYXJlbnQ/OiBGaWxlQ2xhc3M7XG4gICAgZXhjbHVkZXM/OiBBcnJheTxGaWxlQ2xhc3NBdHRyaWJ1dGU+O1xufVxuXG5jbGFzcyBGaWxlQ2xhc3NNYW5hZ2VyIHtcbiAgICBwdWJsaWMgaW5zdGFuY2U6IEZpbGVDbGFzcztcblxuICAgIGNvbnN0cnVjdG9yKGluc3RhbmNlOiBGaWxlQ2xhc3MpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBhbGwoKSB7XG4gICAgICAgIGNvbnN0IGZpbGVzV2l0aEZpbGVDbGFzc05hbWUgPSB0aGlzLmluc3RhbmNlLnBsdWdpbi5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbHRlcihmaWxlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5pbnN0YW5jZS5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgICAgICAgY29uc3QgZmlsZUNsYXNzQWxpYXMgPSB0aGlzLmluc3RhbmNlLnBsdWdpbi5zZXR0aW5ncy5maWxlQ2xhc3NBbGlhcztcbiAgICAgICAgICAgIHJldHVybiBjYWNoZT8uZnJvbnRtYXR0ZXJcbiAgICAgICAgICAgICAgICAmJiBPYmplY3Qua2V5cyhjYWNoZS5mcm9udG1hdHRlcikuaW5jbHVkZXMoZmlsZUNsYXNzQWxpYXMpXG4gICAgICAgICAgICAgICAgJiYgY2FjaGUuZnJvbnRtYXR0ZXJbZmlsZUNsYXNzQWxpYXNdID09IHRoaXMuaW5zdGFuY2UubmFtZTtcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGZpbGVzV2l0aEZpbGVDbGFzc05hbWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldChuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZmlsZXNXaXRoTmFtZSA9IHRoaXMuYWxsKCkuZmlsdGVyKGZpbGUgPT4gZmlsZS5iYXNlbmFtZSA9PSBuYW1lKTtcbiAgICAgICAgaWYgKGZpbGVzV2l0aE5hbWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJNb3JlIHRoYW4gb25lIHZhbHVlIGZvdW5kXCIpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGVzV2l0aE5hbWUubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiTm8gZmlsZSB2YWx1ZSBmb3VuZFwiKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlc1dpdGhOYW1lWzBdO1xuXG4gICAgfVxuXG4gICAgcHVibGljIGdldFBhdGgocGF0aDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGZpbGVzV2l0aE5hbWUgPSB0aGlzLmFsbCgpLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aCA9PSBwYXRoKTtcbiAgICAgICAgaWYgKGZpbGVzV2l0aE5hbWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJNb3JlIHRoYW4gb25lIHZhbHVlIGZvdW5kXCIpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGVzV2l0aE5hbWUubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiTm8gZmlsZSB2YWx1ZSBmb3VuZFwiKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlc1dpdGhOYW1lWzBdO1xuXG4gICAgfVxufVxuXG5jbGFzcyBGaWxlQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogTWV0YWRhdGFNZW51LCBuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMub2JqZWN0cyA9IG5ldyBGaWxlQ2xhc3NNYW5hZ2VyKHRoaXMpO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q2xhc3NGaWxlKCk6IFRGaWxlIHtcbiAgICAgICAgY29uc3QgZmlsZXNDbGFzc1BhdGggPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jbGFzc0ZpbGVzUGF0aDtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoYCR7ZmlsZXNDbGFzc1BhdGh9JHt0aGlzLm5hbWV9Lm1kYCk7XG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGBubyBmaWxlIG5hbWVkIDwke3RoaXMubmFtZX0ubWQ+IGluIDwke2ZpbGVzQ2xhc3NQYXRofT4gZm9sZGVyIHRvIG1hdGNoIDwke3RoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVDbGFzc0FsaWFzfTogJHt0aGlzLm5hbWV9PiBpbiBvbmUgb2YgdGhlc2Ugbm90ZXNgXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UGFyZW50Q2xhc3MoKTogRmlsZUNsYXNzIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgcHVibGljIGdldEF0dHJpYnV0ZXMoZXhjbHVkZVBhcmVudHM6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0Q2xhc3NGaWxlKCk7XG4gICAgICAgICAgICBsZXQgcGFyZW50QXR0cmlidXRlczogQXJyYXk8RmlsZUNsYXNzQXR0cmlidXRlPiA9IFtdO1xuICAgICAgICAgICAgbGV0IGVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIC8vY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmNhY2hlZFJlYWQoZmlsZSlcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMucGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI/LmV4dGVuZHNcbiAgICAgICAgICAgIGNvbnN0IGV4Y2x1ZGVkRmllbGRzID0gdGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcj8uZXhjbHVkZXNcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgIWV4Y2x1ZGVQYXJlbnRzKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50RmlsZUNsYXNzID0gRmlsZUNsYXNzLmNyZWF0ZUZpbGVDbGFzcyh0aGlzLnBsdWdpbiwgcGFyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50RmlsZUNsYXNzLmdldEF0dHJpYnV0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50QXR0cmlidXRlcyA9IEFycmF5LmlzQXJyYXkoZXhjbHVkZWRGaWVsZHMpID8gWy4uLnBhcmVudEZpbGVDbGFzcy5hdHRyaWJ1dGVzLmZpbHRlcihhdHRyID0+ICFleGNsdWRlZEZpZWxkcy5pbmNsdWRlcyhhdHRyLm5hbWUpKV0gOiBbLi4ucGFyZW50RmlsZUNsYXNzLmF0dHJpYnV0ZXNdXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXM6IEFycmF5PEZpbGVDbGFzc0F0dHJpYnV0ZT4gPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGF2aWV3ID0gYXBwLnBsdWdpbnMucGx1Z2luc1tcImRhdGF2aWV3XCJdXG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGlmIChkYXRhdmlldykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGR2RmlsZSA9IGRhdGF2aWV3LmFwaS5wYWdlKGZpbGUucGF0aClcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBnZW51aW5lS2V5cyhkdkZpbGUpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgIT09IFwiZmlsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHR5cGVvZiBkdkZpbGVba2V5XSAhPT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IEpTT04uc3RyaW5naWZ5KGR2RmlsZVtrZXldKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGR2RmlsZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdHlwZSwgb3B0aW9ucyB9ID0gSlNPTi5wYXJzZShpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRUeXBlID0gRmllbGRUeXBlTGFiZWxNYXBwaW5nW2NhcGl0YWxpemUodHlwZSkgYXMga2V5b2YgdHlwZW9mIEZpZWxkVHlwZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHIgPSBuZXcgRmlsZUNsYXNzQXR0cmlidXRlKHRoaXMubmFtZSwga2V5LCBmaWVsZFR5cGUsIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVkdXBsaWNhdGUgZmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IChlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gcGFyZW50QXR0cmlidXRlc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoYXR0ciA9PiAhYXR0cmlidXRlc1xuICAgICAgICAgICAgICAgICAgICAubWFwKF9hdHRyID0+IF9hdHRyLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgIC5pbmNsdWRlcyhhdHRyLm5hbWUpXG4gICAgICAgICAgICAgICAgKS5jb25jYXQoYXR0cmlidXRlcy5maWx0ZXIocCA9PiAhT2JqZWN0LmtleXModGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlciB8fCB7fSkuaW5jbHVkZXMocC5uYW1lKSkpO1xuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyAoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZUF0dHJpYnV0ZShuZXdUeXBlOiBrZXlvZiB0eXBlb2YgRmllbGRUeXBlLCBuZXdOYW1lOiBzdHJpbmcsIG5ld09wdGlvbnM/OiBzdHJpbmdbXSB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sIGF0dHI/OiBGaWxlQ2xhc3NBdHRyaWJ1dGUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0Q2xhc3NGaWxlKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQucmVhZChmaWxlKVxuICAgICAgICBpZiAoYXR0cikge1xuICAgICAgICAgICAgbGV0IG5ld0NvbnRlbnQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICByZXN1bHQuc3BsaXQoJ1xcbicpLmZvckVhY2gobGluZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aChhdHRyLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZXR0aW5nczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nc1tcInR5cGVcIl0gPSBuZXdUeXBlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3T3B0aW9ucykgc2V0dGluZ3NbXCJvcHRpb25zXCJdID0gbmV3T3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKGAke25ld05hbWV9OjogJHtKU09OLnN0cmluZ2lmeShzZXR0aW5ncyl9YCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudC5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0NvbnRlbnQuam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHNldHRpbmdzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gICAgICAgICAgICBzZXR0aW5nc1tcInR5cGVcIl0gPSBuZXdUeXBlO1xuICAgICAgICAgICAgaWYgKG5ld09wdGlvbnMpIHNldHRpbmdzW1wib3B0aW9uc1wiXSA9IG5ld09wdGlvbnM7XG4gICAgICAgICAgICByZXN1bHQgKz0gKGBcXG4ke25ld05hbWV9OjogJHtKU09OLnN0cmluZ2lmeShzZXR0aW5ncyl9YCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVtb3ZlQXR0cmlidXRlKGF0dHI6IEZpbGVDbGFzc0F0dHJpYnV0ZSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5nZXRDbGFzc0ZpbGUoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LnJlYWQoZmlsZSlcbiAgICAgICAgbGV0IG5ld0NvbnRlbnQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgIHJlc3VsdC5zcGxpdCgnXFxuJykuZm9yRWFjaChsaW5lID0+IHtcbiAgICAgICAgICAgIGlmICghbGluZS5zdGFydHNXaXRoKGF0dHIubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBuZXdDb250ZW50LnB1c2gobGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5tb2RpZnkoZmlsZSwgbmV3Q29udGVudC5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZUZpbGVDbGFzcyhwbHVnaW46IE1ldGFkYXRhTWVudSwgbmFtZTogc3RyaW5nLCBleGNsdWRlUGFyZW50OiBib29sZWFuID0gZmFsc2UpOiBGaWxlQ2xhc3Mge1xuICAgICAgICBjb25zdCBmaWxlQ2xhc3MgPSBuZXcgRmlsZUNsYXNzKHBsdWdpbiwgbmFtZSk7XG4gICAgICAgIGZpbGVDbGFzcy5nZXRBdHRyaWJ1dGVzKGV4Y2x1ZGVQYXJlbnQpXG4gICAgICAgIHJldHVybiBmaWxlQ2xhc3NcbiAgICB9XG59XG5cblxuZXhwb3J0IHsgRmlsZUNsYXNzIH07IiwgImV4cG9ydCBjb25zdCBjYXBpdGFsaXplID0gKHM6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBzICYmIHNbMF0udG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSk7XG59IiwgImV4cG9ydCBmdW5jdGlvbiBnZW51aW5lS2V5cyhkdkZpbGU6IGFueSk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBnZW51aW5lS2V5czogc3RyaW5nW10gPSBbXVxuICAgIE9iamVjdC5rZXlzKGR2RmlsZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoIWdlbnVpbmVLZXlzLm1hcChrID0+IGsudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgXCItXCIpKS5pbmNsdWRlcyhrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgXCItXCIpKSkge1xuICAgICAgICAgICAgZ2VudWluZUtleXMucHVzaChrZXkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgXCItXCIpKSB7XG4gICAgICAgICAgICAgICAgZ2VudWluZUtleXNbZ2VudWluZUtleXMuaW5kZXhPZihrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgXCItXCIpKV0gPSBrZXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGdlbnVpbmVLZXlzXG59IiwgImltcG9ydCB7IERyb3Bkb3duQ29tcG9uZW50LCBNb2RhbCwgVGV4dENvbXBvbmVudCwgQnV0dG9uQ29tcG9uZW50LCBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBGaWxlQ2xhc3NBdHRyaWJ1dGUgfSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9maWxlQ2xhc3NBdHRyaWJ1dGVcIjtcbmltcG9ydCB7IEZpZWxkVHlwZVRvb2x0aXAsIEZpZWxkVHlwZSwgRmllbGRUeXBlTGFiZWxNYXBwaW5nLCBGaWVsZE1hbmFnZXIgfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcbmltcG9ydCB7IEZpbGVDbGFzcyB9IGZyb20gXCJzcmMvZmlsZUNsYXNzL2ZpbGVDbGFzc1wiO1xuaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IEZpZWxkIGZyb20gXCJzcmMvZmllbGRzL0ZpZWxkXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIgYXMgRiwgU2V0dGluZ0xvY2F0aW9uIH0gZnJvbSBcInNyYy9maWVsZHMvRmllbGRNYW5hZ2VyXCI7XG5cbmNsYXNzIEZpbGVDbGFzc0F0dHJpYnV0ZU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXG4gICAgcHJpdmF0ZSBhdHRyPzogRmlsZUNsYXNzQXR0cmlidXRlO1xuICAgIHByaXZhdGUgZmlsZUNsYXNzOiBGaWxlQ2xhc3M7XG4gICAgcHJpdmF0ZSBwbHVnaW46IE1ldGFkYXRhTWVudVxuICAgIHByaXZhdGUgbmFtZUlucHV0Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcbiAgICBwcml2YXRlIG5hbWVJbnB1dDogVGV4dENvbXBvbmVudDtcbiAgICBwcml2YXRlIGF0dHJOYW1lOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIHR5cGVTZWxlY3RDb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xuICAgIHByaXZhdGUgaW5pdGlhbEZpZWxkOiBGaWVsZDtcbiAgICBwcml2YXRlIGZpZWxkOiBGaWVsZDtcbiAgICBwcml2YXRlIGZpZWxkTWFuYWdlcjogRjtcbiAgICBwcml2YXRlIGZpZWxkT3B0aW9uc0NvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG5cblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogTWV0YWRhdGFNZW51LCBmaWxlQ2xhc3M6IEZpbGVDbGFzcywgYXR0cj86IEZpbGVDbGFzc0F0dHJpYnV0ZSkge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW5cbiAgICAgICAgdGhpcy5hdHRyID0gYXR0cjtcbiAgICAgICAgdGhpcy5maWxlQ2xhc3MgPSBmaWxlQ2xhc3M7XG4gICAgICAgIHRoaXMuaW5pdGlhbEZpZWxkID0gbmV3IEZpZWxkKCk7XG4gICAgICAgIGlmICh0aGlzLmF0dHIpIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGQgPSBhdHRyIS5nZXRGaWVsZCgpXG4gICAgICAgICAgICBGaWVsZC5jb3B5UHJvcGVydHkodGhpcy5pbml0aWFsRmllbGQsIHRoaXMuZmllbGQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkID0gbmV3IEZpZWxkKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maWVsZE1hbmFnZXIgPSBuZXcgRmllbGRNYW5hZ2VyW3RoaXMuZmllbGQudHlwZV0odGhpcy5maWVsZCk7XG4gICAgICAgIHRoaXMubmFtZUlucHV0Q29udGFpbmVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMudHlwZVNlbGVjdENvbnRhaW5lciA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7IGNsczogJ21ldGFkYXRhLW1lbnUtdmFsdWUtc2VsZWN0b3ItY29udGFpbmVyJyB9KTtcbiAgICAgICAgdGhpcy5maWVsZE9wdGlvbnNDb250YWluZXIgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKVxuICAgIH1cblxuICAgIGJ1aWxkTmFtZUlucHV0Q29udGFpbmVyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLm5hbWVJbnB1dENvbnRhaW5lci5zZXRUZXh0KFwiTmFtZTogXCIpO1xuICAgICAgICB0aGlzLm5hbWVJbnB1dCA9IG5ldyBUZXh0Q29tcG9uZW50KHRoaXMubmFtZUlucHV0Q29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5hdHRyID8gdGhpcy5uYW1lSW5wdXQuc2V0VmFsdWUodGhpcy5maWVsZC5uYW1lKSA6IHRoaXMubmFtZUlucHV0LnNldFBsYWNlaG9sZGVyKFwiVHlwZSBhIG5hbWUgZm9yIHRoaXMgYXR0cmlidXRlXCIpO1xuICAgICAgICB0aGlzLm5hbWVJbnB1dC5pbnB1dEVsLmZvY3VzKCk7XG4gICAgICAgIHRoaXMubmFtZUlucHV0Lm9uQ2hhbmdlKHZhbHVlID0+IHsgdGhpcy5maWVsZC5uYW1lID0gdmFsdWU7IHRoaXMuYXR0ck5hbWUuc2V0VGV4dChgPCR7dmFsdWV9PmApIH0pO1xuICAgICAgICB0aGlzLnR5cGVTZWxlY3RDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbWV0YWRhdGEtbWVudS1zZXBhcmF0b3InIH0pLmNyZWF0ZUVsKFwiaHJcIik7XG4gICAgfVxuXG4gICAgYnVpbGRUeXBlU2VsZWN0Q29udGFpbmVyKCk6IHZvaWQge1xuXG4gICAgICAgIC8vaGVhZGVyIGZvciBzZWxlY3RcbiAgICAgICAgY29uc3QgdHlwZVNlbGVjdEhlYWRlciA9IHRoaXMudHlwZVNlbGVjdENvbnRhaW5lci5jcmVhdGVEaXYoKTtcbiAgICAgICAgY29uc3QgYXR0ckxpbmUgPSB0eXBlU2VsZWN0SGVhZGVyLmNyZWF0ZUVsKFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmF0dHJOYW1lID0gYXR0ckxpbmUuY3JlYXRlRWwoXCJzdHJvbmdcIik7XG4gICAgICAgIHRoaXMuYXR0ck5hbWUuc2V0VGV4dChgPCR7dGhpcy5maWVsZC5uYW1lfT5gKTtcbiAgICAgICAgYXR0ckxpbmUuYXBwZW5kKFwiIGZpZWxkcyBpbiBmaWxlcyB3aXRoOlwiKTtcbiAgICAgICAgU3RyaW5nKGAtLS1cXG4ke3RoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVDbGFzc0FsaWFzfTogJHt0aGlzLmZpbGVDbGFzcy5uYW1lfVxcbi4uLlxcbi0tLWApLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgICAgICAgdHlwZVNlbGVjdEhlYWRlci5jcmVhdGVFbChcImRpdlwiLCBcInlhbWwtbWV0YWRhdGEtbWVudS1yZWRcIikuc2V0VGV4dChsaW5lKTtcbiAgICAgICAgfSlcbiAgICAgICAgLy9kcm9wZG93blxuICAgICAgICBjb25zdCB0eXBlU2VsZWN0TGFiZWwgPSB0aGlzLnR5cGVTZWxlY3RDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbWV0YWRhdGEtbWVudS12YWx1ZS1zZWxlY3Rvci1pbmxpbmUtbGFiZWwnIH0pO1xuICAgICAgICB0eXBlU2VsZWN0TGFiZWwuc2V0VGV4dChcIndpbGw6IFwiKTtcbiAgICAgICAgY29uc3QgdHlwZVNlbGVjdERyb3BEb3duID0gdGhpcy50eXBlU2VsZWN0Q29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ21ldGFkYXRhLW1lbnUtdmFsdWUtc2VsZWN0b3ItdG9nZ2xlcicgfSk7XG5cbiAgICAgICAgY29uc3QgdHlwZVNlbGVjdCA9IG5ldyBEcm9wZG93bkNvbXBvbmVudCh0eXBlU2VsZWN0RHJvcERvd24pO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKEZpZWxkVHlwZVRvb2x0aXApLmZvckVhY2goKGtleToga2V5b2YgdHlwZW9mIEZpZWxkVHlwZSkgPT4gdHlwZVNlbGVjdC5hZGRPcHRpb24oa2V5LCBGaWVsZFR5cGVUb29sdGlwW2tleV0pKVxuICAgICAgICB0eXBlU2VsZWN0LnNldFZhbHVlKHRoaXMuZmllbGQudHlwZSlcbiAgICAgICAgdHlwZVNlbGVjdC5vbkNoYW5nZSgodHlwZUxhYmVsOiBrZXlvZiB0eXBlb2YgRmllbGRUeXBlKSA9PiB7XG5cbiAgICAgICAgICAgIHRoaXMuZmllbGQgPSBuZXcgRmllbGQoKTtcbiAgICAgICAgICAgIEZpZWxkLmNvcHlQcm9wZXJ0eSh0aGlzLmZpZWxkLCB0aGlzLmluaXRpYWxGaWVsZCk7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLm5hbWUgPSB0aGlzLm5hbWVJbnB1dC5nZXRWYWx1ZSgpXG4gICAgICAgICAgICB0aGlzLmZpZWxkLnR5cGUgPSBGaWVsZFR5cGVMYWJlbE1hcHBpbmdbdHlwZUxhYmVsXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkLnR5cGUgIT09IHRoaXMuaW5pdGlhbEZpZWxkLnR5cGUgJiZcbiAgICAgICAgICAgICAgICAhW3RoaXMuZmllbGQudHlwZSwgdGhpcy5pbml0aWFsRmllbGQudHlwZV0uZXZlcnkoZmllbGRUeXBlID0+XG4gICAgICAgICAgICAgICAgICAgIFtGaWVsZFR5cGUuTXVsdGksIEZpZWxkVHlwZS5TZWxlY3QsIEZpZWxkVHlwZS5DeWNsZV0uaW5jbHVkZXMoZmllbGRUeXBlKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQub3B0aW9ucyA9IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5maWVsZE9wdGlvbnNDb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmllbGRPcHRpb25zQ29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuZmllbGRPcHRpb25zQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5maWVsZE1hbmFnZXIgPSBuZXcgRmllbGRNYW5hZ2VyW3RoaXMuZmllbGQudHlwZV0odGhpcy5maWVsZClcbiAgICAgICAgICAgIHRoaXMuZmllbGRNYW5hZ2VyLmNyZWF0ZVNldHRpbmdDb250YWluZXIodGhpcy5maWVsZE9wdGlvbnNDb250YWluZXIsIHRoaXMucGx1Z2luLCBTZXR0aW5nTG9jYXRpb24uRmlsZUNsYXNzQXR0cmlidXRlU2V0dGluZ3MpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZUZpZWxkcygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRNYW5hZ2VyLnZhbGlkYXRlTmFtZShcbiAgICAgICAgICAgIHRoaXMubmFtZUlucHV0LFxuICAgICAgICAgICAgdGhpcy5uYW1lSW5wdXQuaW5wdXRFbFxuICAgICAgICApICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkTWFuYWdlci52YWxpZGF0ZU9wdGlvbnMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVNhdmVCdG4oY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBzYXZlQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChjb250YWluZXIpO1xuICAgICAgICBzYXZlQnV0dG9uLnNldEljb24oXCJjaGVja21hcmtcIik7XG4gICAgICAgIHNhdmVCdXR0b24ub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXJyb3IgPSAhdGhpcy52YWxpZGF0ZUZpZWxkcygpO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkZpeCBlcnJvcnMgYmVmb3JlIHNhdmluZy5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZmlsZUNsYXNzLnVwZGF0ZUF0dHJpYnV0ZSh0aGlzLmZpZWxkLnR5cGUsIHRoaXMuZmllbGQubmFtZSwgdGhpcy5maWVsZC5vcHRpb25zLCB0aGlzLmF0dHIpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUmVtb3ZlbEJ0bihjb250YWluZXI6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQoY29udGFpbmVyKTtcbiAgICAgICAgcmVtb3ZlQnV0dG9uLnNldEljb24oXCJ0cmFzaFwiKTtcbiAgICAgICAgcmVtb3ZlQnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29uZmlybU1vZGFsID0gbmV3IE1vZGFsKHRoaXMucGx1Z2luLmFwcCk7XG4gICAgICAgICAgICBjb25maXJtTW9kYWwudGl0bGVFbC5zZXRUZXh0KFwiUGxlYXNlIGNvbmZpcm1cIik7XG4gICAgICAgICAgICBjb25maXJtTW9kYWwuY29udGVudEVsLmNyZWF0ZURpdigpLnNldFRleHQoYERvIHlvdSByZWFsbHkgd2FudCB0byByZW1vdmUgJHt0aGlzLmF0dHI/Lm5hbWV9IGF0dHJpYnV0ZSBmcm9tICR7dGhpcy5maWxlQ2xhc3MubmFtZX0/YCk7XG4gICAgICAgICAgICBjb25zdCBjb25maXJtRm9vdGVyID0gY29uZmlybU1vZGFsLmNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS12YWx1ZS1ncmlkLWZvb3RlclwiIH0pO1xuICAgICAgICAgICAgY29uc3QgY29uZmlybUJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQoY29uZmlybUZvb3Rlcik7XG4gICAgICAgICAgICBjb25maXJtQnV0dG9uLnNldEljb24oXCJjaGVja21hcmtcIik7XG4gICAgICAgICAgICBjb25maXJtQnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0dHIpIHRoaXMuZmlsZUNsYXNzLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmF0dHIpO1xuICAgICAgICAgICAgICAgIGNvbmZpcm1Nb2RhbC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBjb25zdCBkaXNtaXNzQnV0dG9uID0gbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KGNvbmZpcm1Gb290ZXIpO1xuICAgICAgICAgICAgZGlzbWlzc0J1dHRvbi5zZXRJY29uKFwiY3Jvc3NcIik7XG4gICAgICAgICAgICBkaXNtaXNzQnV0dG9uLm9uQ2xpY2soKCkgPT4gdGhpcy5jbG9zZSgpKTtcbiAgICAgICAgICAgIGNvbmZpcm1Nb2RhbC5vcGVuKCk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVDYW5jZWxCdG4oY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQoY29udGFpbmVyKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLnNldEljb24oXCJjcm9zc1wiKTtcbiAgICAgICAgY2FuY2VsQnV0dG9uLm9uQ2xpY2soKCkgPT4gdGhpcy5jbG9zZSgpKTtcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIC8vdGl0bGVcbiAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQodGhpcy5hdHRyID8gYE1hbmFnZSAke3RoaXMuYXR0ci5uYW1lfWAgOiBgQ3JlYXRlIGEgbmV3IGF0dHJpYnV0ZSBmb3IgJHt0aGlzLmZpbGVDbGFzcy5uYW1lfWApO1xuXG4gICAgICAgIHRoaXMuYnVpbGROYW1lSW5wdXRDb250YWluZXIoKVxuICAgICAgICB0aGlzLmJ1aWxkVHlwZVNlbGVjdENvbnRhaW5lcigpXG4gICAgICAgIHRoaXMuZmllbGRNYW5hZ2VyLmNyZWF0ZVNldHRpbmdDb250YWluZXIodGhpcy5maWVsZE9wdGlvbnNDb250YWluZXIsIHRoaXMucGx1Z2luLCBTZXR0aW5nTG9jYXRpb24uRmlsZUNsYXNzQXR0cmlidXRlU2V0dGluZ3MpXG5cbiAgICAgICAgLy8gZm9vdGVyIGJ1dHRvbnNcbiAgICAgICAgY29uc3QgZm9vdGVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtdmFsdWUtZ3JpZC1mb290ZXJcIiB9KTtcbiAgICAgICAgdGhpcy5jcmVhdGVTYXZlQnRuKGZvb3Rlcik7XG4gICAgICAgIGlmICh0aGlzLmF0dHIpIHRoaXMuY3JlYXRlUmVtb3ZlbEJ0bihmb290ZXIpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNhbmNlbEJ0bihmb290ZXIpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRmlsZUNsYXNzQXR0cmlidXRlTW9kYWwgfSIsICJpbXBvcnQgeyBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5pbnRlcmZhY2UgRmlsZUNsYXNzUXVlcnkge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHF1ZXJ5OiBzdHJpbmc7XG4gICAgZmlsZUNsYXNzTmFtZTogc3RyaW5nO1xufVxuXG5jbGFzcyBGaWxlQ2xhc3NRdWVyeSB7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcgPSBcIlwiLFxuICAgICAgICBpZDogc3RyaW5nID0gXCJcIixcbiAgICAgICAgcXVlcnk6IHN0cmluZyA9IFwiXCIsXG4gICAgICAgIGZpbGVDbGFzc05hbWU6IHN0cmluZyA9IFwiXCJcbiAgICApIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuZmlsZUNsYXNzTmFtZSA9IGZpbGVDbGFzc05hbWU7XG4gICAgfTtcblxuICAgIHB1YmxpYyBtYXRjaEZpbGUoZmlsZTogVEZpbGUpOiBib29sZWFuIHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGdldFJlc3VsdHMgPSAoYXBpOiBEYXRhdmlld1BsdWdpbltcImFwaVwiXSkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG5ldyBGdW5jdGlvbihcImR2XCIsIGByZXR1cm4gJHt0aGlzLnF1ZXJ5fWApKShhcGkpXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBXcm9uZyBxdWVyeSBmb3IgZmllbGQgPCR7dGhpcy5uYW1lfT4uIENoZWNrIHlvdXIgc2V0dGluZ3NgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkYXRhdmlldyA9IGFwcC5wbHVnaW5zLnBsdWdpbnNbXCJkYXRhdmlld1wiXVxuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRoaXMucXVlcnkgJiYgZGF0YXZpZXc/LnNldHRpbmdzLmVuYWJsZURhdGF2aWV3SnMgJiYgZGF0YXZpZXc/LnNldHRpbmdzLmVuYWJsZUlubGluZURhdGF2aWV3SnMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZXNQYXRoID0gZ2V0UmVzdWx0cyhkYXRhdmlldy5hcGkpLnZhbHVlcy5tYXAoKHY6IGFueSkgPT4gdi5maWxlLnBhdGgpIGFzIHN0cmluZ1tdXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVzUGF0aC5pbmNsdWRlcyhmaWxlLnBhdGgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgY29weVByb3BlcnR5KHRhcmdldDogRmlsZUNsYXNzUXVlcnksIHNvdXJjZTogRmlsZUNsYXNzUXVlcnkpIHtcbiAgICAgICAgdGFyZ2V0LmlkID0gc291cmNlLmlkO1xuICAgICAgICB0YXJnZXQubmFtZSA9IHNvdXJjZS5uYW1lO1xuICAgICAgICB0YXJnZXQucXVlcnkgPSBzb3VyY2UucXVlcnk7XG4gICAgICAgIHRhcmdldC5maWxlQ2xhc3NOYW1lID0gc291cmNlLmZpbGVDbGFzc05hbWVcbiAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRmlsZUNsYXNzUXVlcnk7IiwgImltcG9ydCB7IEFwcCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIlxuaW1wb3J0IHsgaW5saW5lRmllbGRSZWdleCwgZW5jb2RlTGluaywgZGVjb2RlTGluayB9IGZyb20gXCJzcmMvdXRpbHMvcGFyc2VyXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRWYWx1ZXMoYXBwOiBBcHAsIGZpbGVPcmZpbGVQYXRoOiBURmlsZSB8IHN0cmluZywgYXR0cmlidXRlOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgbGV0IGZpbGU6IFRGaWxlO1xuICAgIGlmIChmaWxlT3JmaWxlUGF0aCBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgIGZpbGUgPSBmaWxlT3JmaWxlUGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBfZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZU9yZmlsZVBhdGgpXG4gICAgICAgIGlmIChfZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIF9maWxlLmV4dGVuc2lvbiA9PSBcIm1kXCIpIHtcbiAgICAgICAgICAgIGZpbGUgPSBfZmlsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwicGF0aCBkb2Vzbid0IGNvcnJlc3BvbmQgdG8gYSBwcm9wZXIgZmlsZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjb250ZW50ID0gKGF3YWl0IGFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpKS5zcGxpdCgnXFxuJyk7XG4gICAgY29uc3QgZnJvbnRtYXR0ZXIgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgY29uc3QgeyBwb3NpdGlvbjogeyBzdGFydCwgZW5kIH0gfSA9IGZyb250bWF0dGVyID8gZnJvbnRtYXR0ZXIgOiB7IHBvc2l0aW9uOiB7IHN0YXJ0OiB1bmRlZmluZWQsIGVuZDogdW5kZWZpbmVkIH0gfTtcbiAgICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG4gICAgY29udGVudC5tYXAoKGxpbmUsIGkpID0+IHtcbiAgICAgICAgaWYgKGZyb250bWF0dGVyICYmIGkgPj0gc3RhcnQubGluZSAmJiBpIDw9IGVuZC5saW5lKSB7XG4gICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYCR7YXR0cmlidXRlfTooLiopYCwgJ3UnKTtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBsaW5lLm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgICAgIGlmIChyICYmIHIubGVuZ3RoID4gMCkgcmVzdWx0LnB1c2goclsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmdWxsTGluZVJlZ2V4ID0gbmV3IFJlZ0V4cChgXiR7aW5saW5lRmllbGRSZWdleChhdHRyaWJ1dGUpfWAsIFwidVwiKTtcbiAgICAgICAgICAgIGNvbnN0IGZSID0gZW5jb2RlTGluayhsaW5lKS5tYXRjaChmdWxsTGluZVJlZ2V4KTtcbiAgICAgICAgICAgIGlmIChmUj8uZ3JvdXBzKSB7IHJlc3VsdC5wdXNoKGRlY29kZUxpbmsoZlIuZ3JvdXBzLnZhbHVlcykpIH07XG4gICAgICAgICAgICBjb25zdCBpblNlbnRlbmNlUmVnZXhCcmFja2V0cyA9IG5ldyBSZWdFeHAoYFxcXFxbJHtpbmxpbmVGaWVsZFJlZ2V4KGF0dHJpYnV0ZSl9XFxcXF1gLCBcImd1XCIpO1xuICAgICAgICAgICAgY29uc3Qgc1JCID0gZW5jb2RlTGluayhsaW5lKS5tYXRjaEFsbChpblNlbnRlbmNlUmVnZXhCcmFja2V0cyk7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IHNSQi5uZXh0KCk7XG4gICAgICAgICAgICB3aGlsZSAoIW5leHQuZG9uZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0LnZhbHVlLmdyb3VwcykgeyByZXN1bHQucHVzaChkZWNvZGVMaW5rKG5leHQudmFsdWUuZ3JvdXBzLnZhbHVlcykpIH1cbiAgICAgICAgICAgICAgICBuZXh0ID0gc1JCLm5leHQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaW5TZW50ZW5jZVJlZ2V4UGFyID0gbmV3IFJlZ0V4cChgXFxcXCgke2lubGluZUZpZWxkUmVnZXgoYXR0cmlidXRlKX1cXFxcKWAsIFwiZ3VcIik7XG4gICAgICAgICAgICBjb25zdCBzUlAgPSBlbmNvZGVMaW5rKGxpbmUpLm1hdGNoQWxsKGluU2VudGVuY2VSZWdleFBhcik7XG4gICAgICAgICAgICBuZXh0ID0gc1JQLm5leHQoKTtcbiAgICAgICAgICAgIHdoaWxlICghbmV4dC5kb25lKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQudmFsdWUuZ3JvdXBzKSB7IHJlc3VsdC5wdXNoKGRlY29kZUxpbmsobmV4dC52YWx1ZS5ncm91cHMudmFsdWVzKSkgfVxuICAgICAgICAgICAgICAgIG5leHQgPSBzUlAubmV4dCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiByZXN1bHQ7XG59IiwgImltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZFwiO1xuaW1wb3J0IHsgRmlsZUNsYXNzIH0gZnJvbSBcInNyYy9maWxlQ2xhc3MvZmlsZUNsYXNzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWVsZChwbHVnaW46IE1ldGFkYXRhTWVudSwgcHJvcGVydHlOYW1lOiBzdHJpbmcsIGZpbGVDbGFzcz86IEZpbGVDbGFzcyk6IEZpZWxkIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBtYXRjaGluZ1NldHRpbmdzID0gcGx1Z2luLnNldHRpbmdzLnByZXNldEZpZWxkcy5maWx0ZXIocCA9PiBwLm5hbWUgPT0gcHJvcGVydHlOYW1lKTtcbiAgICBpZiAoZmlsZUNsYXNzKSB7XG4gICAgICAgIGNvbnN0IGZpbGVDbGFzc0F0dHJpYnV0ZXNXaXRoTmFtZSA9IGZpbGVDbGFzcy5hdHRyaWJ1dGVzLmZpbHRlcihhdHRyID0+IGF0dHIubmFtZSA9PSBwcm9wZXJ0eU5hbWUpO1xuICAgICAgICBpZiAoZmlsZUNsYXNzQXR0cmlidXRlc1dpdGhOYW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc0F0dHJpYnV0ZSA9IGZpbGVDbGFzc0F0dHJpYnV0ZXNXaXRoTmFtZVswXTtcbiAgICAgICAgICAgIGlmIChmaWxlQ2xhc3NBdHRyaWJ1dGUudHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlQ2xhc3NBdHRyaWJ1dGUuZ2V0RmllbGQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hpbmdTZXR0aW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoaW5nU2V0dGluZ3NbMF07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChtYXRjaGluZ1NldHRpbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoaW5nU2V0dGluZ3NbMF07XG4gICAgfTtcbn07IiwgImltcG9ydCB7IE1vZGFsLCBEcm9wZG93bkNvbXBvbmVudCwgVEZpbGUsIFRvZ2dsZUNvbXBvbmVudCwgQnV0dG9uQ29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBGaWxlQ2xhc3MgfSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9maWxlQ2xhc3NcIjtcbmltcG9ydCB7IEZpZWxkTWFuYWdlciBhcyBGIH0gZnJvbSBcInNyYy9maWVsZHMvRmllbGRNYW5hZ2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGNob29zZVNlY3Rpb25Nb2RhbCBleHRlbmRzIE1vZGFsIHtcblxuICAgIHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG4gICAgcHJpdmF0ZSBmaWxlOiBURmlsZTtcbiAgICBwcml2YXRlIGZpbGVDbGFzcz86IEZpbGVDbGFzc1xuICAgIHByaXZhdGUgZmllbGROYW1lPzogc3RyaW5nXG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IE1ldGFkYXRhTWVudSwgZmlsZTogVEZpbGUsIGZpbGVDbGFzcz86IEZpbGVDbGFzcywgZmllbGROYW1lPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHApO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5maWxlQ2xhc3MgPSBmaWxlQ2xhc3NcbiAgICAgICAgdGhpcy5maWVsZE5hbWUgPSBmaWVsZE5hbWVcbiAgICB9O1xuXG4gICAgYXN5bmMgb25PcGVuKCkge1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQodGhpcy5maWxlKVxuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChgQWRkIGEgJHt0aGlzLmZpZWxkTmFtZSA/IFwiPFwiICsgdGhpcy5maWVsZE5hbWUgKyBcIj4gXCIgOiBcIlwiXG4gICAgICAgICAgICB9ZmllbGQgaW4gXCIke3RoaXMuZmlsZS5iYXNlbmFtZS5zbGljZSgwLCAzMClcbiAgICAgICAgICAgIH0ke3RoaXMuZmlsZS5iYXNlbmFtZS5sZW5ndGggPCAzMCA/IFwiLi4uXCIgOiBcIlwiXG4gICAgICAgICAgICB9XCIgYWZ0ZXI6YCk7XG4gICAgICAgIGNvbnN0IHNlbGVjdEVsID0gbmV3IERyb3Bkb3duQ29tcG9uZW50KHRoaXMuY29udGVudEVsKTtcbiAgICAgICAgc2VsZWN0RWwuc2VsZWN0RWwuYWRkQ2xhc3MoXCJtZXRhZGF0YS1tZW51LWZpZWxkLWFkZC1zZWN0aW9uLXNlbGVjdFwiKTtcbiAgICAgICAgc2VsZWN0RWwuYWRkT3B0aW9uKFwiXCIsIFwiU2VsZWN0IGxpbmVcIik7XG4gICAgICAgIHNlbGVjdEVsLmFkZE9wdGlvbihcInRvcF8wXCIsIFwidG9wXCIpO1xuICAgICAgICBsZXQgZm9yZUhlYWRUZXh0ID0gZmFsc2U7XG4gICAgICAgIGxldCBmcm9udG1hdHRlclN0YXJ0ID0gZmFsc2U7XG4gICAgICAgIGxldCBmcm9udG1hdHRlckVuZCA9IGZhbHNlO1xuICAgICAgICBsZXQgaW5Gcm9udG1hdHRlciA9IGZhbHNlO1xuICAgICAgICByZXN1bHQuc3BsaXQoXCJcXG5cIikuZm9yRWFjaCgobGluZSwgbGluZU51bWJlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGxpbmUgIT0gXCItLS1cIiAmJiAhZm9yZUhlYWRUZXh0ICYmICFmcm9udG1hdHRlclN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgZm9yZUhlYWRUZXh0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAobGluZSA9PSBcIi0tLVwiICYmICFmb3JlSGVhZFRleHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZyb250bWF0dGVyU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXJTdGFydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGluRnJvbnRtYXR0ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZyb250bWF0dGVyRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb250bWF0dGVyRW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5Gcm9udG1hdHRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5Gcm9udG1hdHRlcikge1xuICAgICAgICAgICAgICAgIHNlbGVjdEVsLmFkZE9wdGlvbihgZnJvbnRtYXR0ZXJfJHtsaW5lTnVtYmVyfWAsIGAke2xpbmUuc3Vic3RyaW5nKDAsIDMwKX0ke2xpbmUubGVuZ3RoID4gMzAgPyBcIi4uLlwiIDogXCJcIn1gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0RWwuYWRkT3B0aW9uKGBib2R5XyR7bGluZU51bWJlcn1gLCBgJHtsaW5lLnN1YnN0cmluZygwLCAzMCl9JHtsaW5lLmxlbmd0aCA+IDMwID8gXCIuLi5cIiA6IFwiXCJ9YCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgc2VsZWN0RWwuc2VsZWN0RWwuZm9jdXMoKTtcbiAgICAgICAgc2VsZWN0RWwub25DaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVBcnJheSA9IHNlbGVjdEVsLmdldFZhbHVlKCkubWF0Y2goLyhcXHcrKV8oXFxkKykvKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdmFsdWVBcnJheSAmJiB2YWx1ZUFycmF5Lmxlbmd0aCA+IDAgPyB2YWx1ZUFycmF5WzFdIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBOdW1iZXIodmFsdWVBcnJheSAmJiB2YWx1ZUFycmF5Lmxlbmd0aCA+IDEgPyB2YWx1ZUFycmF5WzJdIDogMCk7XG4gICAgICAgICAgICBjb25zdCBpbkZyb250bWF0dGVyID0gcG9zaXRpb24gPT0gXCJmcm9udG1hdHRlclwiID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgYWZ0ZXIgPSBwb3NpdGlvbiA9PSBcInRvcFwiID8gZmFsc2UgOiB0cnVlO1xuICAgICAgICAgICAgRi5vcGVuRmllbGRNb2RhbChcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbixcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGUsXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZE5hbWUsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIGluRnJvbnRtYXR0ZXIsXG4gICAgICAgICAgICAgICAgYWZ0ZXIsXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlQ2xhc3MpXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgaWYgKGFwcC5tZXRhZGF0YUNhY2hlLmdldENhY2hlKHRoaXMuZmlsZS5wYXRoKT8uZnJvbnRtYXR0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGFkZFRvRnJvbnRNYXR0ZXJCdG4gPSBuZXcgQnV0dG9uQ29tcG9uZW50KHRoaXMuY29udGVudEVsKVxuICAgICAgICAgICAgYWRkVG9Gcm9udE1hdHRlckJ0bi5zZXRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtZmllbGQtYWRkLWZyb250bWF0dGVyLWJ0blwiKVxuICAgICAgICAgICAgYWRkVG9Gcm9udE1hdHRlckJ0bi5zZXRCdXR0b25UZXh0KFwiQWRkIHRvIGZyb250bWF0dGVyXCIpXG4gICAgICAgICAgICBhZGRUb0Zyb250TWF0dGVyQnRuLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRDYWNoZSh0aGlzLmZpbGUucGF0aCkhLmZyb250bWF0dGVyIS5wb3NpdGlvbi5lbmQubGluZSAtIDFcbiAgICAgICAgICAgICAgICBGLm9wZW5GaWVsZE1vZGFsKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbixcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZUNsYXNzKVxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9O1xufTsiLCAiaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IHsgZ2V0RmllbGQgfSBmcm9tIFwic3JjL2NvbW1hbmRzL2dldEZpZWxkXCI7XG5pbXBvcnQgeyBGaWxlQ2xhc3MgfSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9maWxlQ2xhc3NcIjtcbmltcG9ydCB7IEZpZWxkTWFuYWdlciB9IGZyb20gXCJzcmMvdHlwZXMvZmllbGRUeXBlc1wiO1xuaW1wb3J0IHsgRmllbGRNYW5hZ2VyIGFzIEYgfSBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZE1hbmFnZXJcIjtcbmltcG9ydCBjaG9vc2VTZWN0aW9uTW9kYWwgZnJvbSBcInNyYy9vcHRpb25Nb2RhbHMvY2hvb3NlU2VjdGlvbk1vZGFsXCI7XG5pbXBvcnQgeyBzZXRJY29uLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmllbGRNb2RpZmllcihwbHVnaW46IE1ldGFkYXRhTWVudSwgZHY6IGFueSwgcDogYW55LCBmaWVsZE5hbWU6IHN0cmluZywgYXR0cnM/OiB7IGNscz86IHN0cmluZywgYXR0cj86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sIG9wdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH0pOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG5cbiAgICAvKiBmaWVsZENvbnRhaW5lciovXG4gICAgY29uc3QgZmllbGRDb250YWluZXI6IEhUTUxFbGVtZW50ID0gZHYuZWwoXCJkaXZcIiwgXCJcIilcbiAgICBmaWVsZENvbnRhaW5lci5zZXRBdHRyKFwiY2xhc3NcIiwgXCJtZXRhZGF0YS1tZW51LWR2LWZpZWxkLWNvbnRhaW5lclwiKVxuXG4gICAgLyogY3JlYXRlIGZpZWxkTW9kaWZpZXIgZGVwZW5kaW5nIG9uIGZpbGVDbGFzcyB0eXBlIG9yIHByZXNldCB2YWx1ZSovXG5cbiAgICBpZiAocFtmaWVsZE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCFhdHRycz8ub3B0aW9ucz8uc2hvd0FkZEZpZWxkKSB7XG4gICAgICAgICAgICBjb25zdCBlbXB0eUZpZWxkID0gZHYuZWwoXCJzcGFuXCIsIG51bGwsIGF0dHJzKTtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyLmFwcGVuZENoaWxkKGVtcHR5RmllbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYWRkRmllbGRCdG4gPSBkdi5lbChcImJ1dHRvblwiLCBhdHRycyk7XG4gICAgICAgICAgICBzZXRJY29uKGFkZEZpZWxkQnRuLCBcInBsdXMtd2l0aC1jaXJjbGVcIilcbiAgICAgICAgICAgIGFkZEZpZWxkQnRuLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1kdi1maWVsZC1idXR0b25cIik7XG4gICAgICAgICAgICBhZGRGaWVsZEJ0bi5hZGRDbGFzcyhcImlzb2xhdGVkXCIpO1xuICAgICAgICAgICAgYWRkRmllbGRCdG4ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwLmZpbGUucGF0aClcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGZpbGUuZXh0ZW5zaW9uID09IFwibWRcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ2xhc3NBbGlhcyA9IHBsdWdpbi5zZXR0aW5ncy5maWxlQ2xhc3NBbGlhcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBbZmlsZUNsYXNzQWxpYXNdIHx8IHBsdWdpbi5zZXR0aW5ncy5nbG9iYWxGaWxlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc05hbWUgPSBwW2ZpbGVDbGFzc0FsaWFzXSB8fCBwbHVnaW4uc2V0dGluZ3MuZ2xvYmFsRmlsZUNsYXNzIC8vIGlubmVyIGZpbGVDbGFzcyBoYXMgdGhlIHByaW9yaXR5IG92ZXIgZ2xvYmFsIGZpbGVDbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZUNsYXNzID0gRmlsZUNsYXNzLmNyZWF0ZUZpbGVDbGFzcyhwbHVnaW4sIGZpbGVDbGFzc05hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzPy5vcHRpb25zPy5pbkZyb250bWF0dGVyICYmIHBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRDYWNoZShmaWxlLnBhdGgpPy5mcm9udG1hdHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBwbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Q2FjaGUoZmlsZS5wYXRoKSEuZnJvbnRtYXR0ZXIhLnBvc2l0aW9uLmVuZC5saW5lIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEYub3BlbkZpZWxkTW9kYWwocGx1Z2luLCBmaWxlLCBmaWVsZE5hbWUsIFwiXCIsIGxpbmVOdW1iZXIsIHRydWUsIGZhbHNlLCBmaWxlQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBjaG9vc2VTZWN0aW9uTW9kYWwocGx1Z2luLCBmaWxlLCBmaWxlQ2xhc3MsIGZpZWxkTmFtZSkub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBsdWdpbi5zZXR0aW5ncy5wcmVzZXRGaWVsZHMuZmlsdGVyKGF0dHIgPT4gYXR0ci5uYW1lID09IGZpZWxkTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0RmllbGQocGx1Z2luLCBmaWVsZE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkPy50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzPy5vcHRpb25zPy5pbkZyb250bWF0dGVyICYmIHBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRDYWNoZShmaWxlLnBhdGgpPy5mcm9udG1hdHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lTnVtYmVyID0gcGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLmdldENhY2hlKGZpbGUucGF0aCkhLmZyb250bWF0dGVyIS5wb3NpdGlvbi5lbmQubGluZSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRi5vcGVuRmllbGRNb2RhbChwbHVnaW4sIGZpbGUsIGZpZWxkTmFtZSwgXCJcIiwgbGluZU51bWJlciwgdHJ1ZSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IGNob29zZVNlY3Rpb25Nb2RhbChwbHVnaW4sIGZpbGUsIHVuZGVmaW5lZCwgZmllbGROYW1lKS5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgY2hvb3NlU2VjdGlvbk1vZGFsKHBsdWdpbiwgZmlsZSwgdW5kZWZpbmVkKS5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgY2hvb3NlU2VjdGlvbk1vZGFsKHBsdWdpbiwgZmlsZSwgdW5kZWZpbmVkKS5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcInBhdGggZG9lc24ndCBjb3JyZXNwb25kIHRvIGEgcHJvcGVyIGZpbGVcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lci5hcHBlbmRDaGlsZChhZGRGaWVsZEJ0bik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBmaWxlQ2xhc3NBbGlhcyA9IHBsdWdpbi5zZXR0aW5ncy5maWxlQ2xhc3NBbGlhcztcbiAgICAgICAgaWYgKHBbZmlsZUNsYXNzQWxpYXNdIHx8IHBsdWdpbi5zZXR0aW5ncy5nbG9iYWxGaWxlQ2xhc3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc05hbWUgPSBwW2ZpbGVDbGFzc0FsaWFzXSB8fCBwbHVnaW4uc2V0dGluZ3MuZ2xvYmFsRmlsZUNsYXNzIC8vIGlubmVyIGZpbGVDbGFzcyBoYXMgdGhlIHByaW9yaXR5IG92ZXIgZ2xvYmFsIGZpbGVDbGFzc1xuICAgICAgICAgICAgY29uc3QgZmlsZUNsYXNzID0gRmlsZUNsYXNzLmNyZWF0ZUZpbGVDbGFzcyhwbHVnaW4sIGZpbGVDbGFzc05hbWUpO1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXRGaWVsZChwbHVnaW4sIGZpZWxkTmFtZSwgZmlsZUNsYXNzKTtcbiAgICAgICAgICAgIGlmIChmaWVsZD8udHlwZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTWFuYWdlciA9IG5ldyBGaWVsZE1hbmFnZXJbZmllbGQudHlwZV0oZmllbGQpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGZpZWxkTWFuYWdlci5jcmVhdGVEdkZpZWxkKHBsdWdpbiwgZHYsIHAsIGZpZWxkQ29udGFpbmVyLCBhdHRycyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTWFuYWdlciA9IEYuY3JlYXRlRGVmYXVsdChmaWVsZE5hbWUpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGZpZWxkTWFuYWdlci5jcmVhdGVEdkZpZWxkKHBsdWdpbiwgZHYsIHAsIGZpZWxkQ29udGFpbmVyLCBhdHRycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGx1Z2luLnNldHRpbmdzLnByZXNldEZpZWxkcy5maWx0ZXIoYXR0ciA9PiBhdHRyLm5hbWUgPT0gZmllbGROYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXRGaWVsZChwbHVnaW4sIGZpZWxkTmFtZSlcbiAgICAgICAgICAgIGlmIChmaWVsZD8udHlwZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTWFuYWdlciA9IG5ldyBGaWVsZE1hbmFnZXJbZmllbGQudHlwZV0oZmllbGQpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGZpZWxkTWFuYWdlci5jcmVhdGVEdkZpZWxkKHBsdWdpbiwgZHYsIHAsIGZpZWxkQ29udGFpbmVyLCBhdHRycyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTWFuYWdlciA9IEYuY3JlYXRlRGVmYXVsdChmaWVsZE5hbWUpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGZpZWxkTWFuYWdlci5jcmVhdGVEdkZpZWxkKHBsdWdpbiwgZHYsIHAsIGZpZWxkQ29udGFpbmVyLCBhdHRycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZE1hbmFnZXIgPSBGLmNyZWF0ZURlZmF1bHQoZmllbGROYW1lKTtcbiAgICAgICAgICAgIGF3YWl0IGZpZWxkTWFuYWdlci5jcmVhdGVEdkZpZWxkKHBsdWdpbiwgZHYsIHAsIGZpZWxkQ29udGFpbmVyLCBhdHRycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpZWxkQ29udGFpbmVyXG59OyAiLCAiaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IHsgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIlxuaW1wb3J0IHsgRmlsZUNsYXNzIH0gZnJvbSBcInNyYy9maWxlQ2xhc3MvZmlsZUNsYXNzXCI7XG5pbXBvcnQgRmlsZUNsYXNzUXVlcnkgZnJvbSBcInNyYy9maWxlQ2xhc3MvRmlsZUNsYXNzUXVlcnlcIjtcbmltcG9ydCB7IEZpZWxkTWFuYWdlciwgRmllbGRUeXBlIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgeyBnZW51aW5lS2V5cyB9IGZyb20gXCJzcmMvdXRpbHMvZGF0YXZpZXdVdGlsc1wiO1xuaW1wb3J0IHsgZ2V0RmllbGQgfSBmcm9tIFwiLi9nZXRGaWVsZFwiO1xuXG5leHBvcnQgY2xhc3MgRmllbGRJbmZvIHtcbiAgICB0eXBlPzogRmllbGRUeXBlID0gdW5kZWZpbmVkO1xuICAgIHNvdXJjZVR5cGU/OiBcImZpbGVDbGFzc1wiIHwgXCJzZXR0aW5nc1wiID0gdW5kZWZpbmVkO1xuICAgIGZpbGVDbGFzcz86IHN0cmluZyA9IHVuZGVmaW5lZDtcbiAgICBmaWxlQ2xhc3NRdWVyeT86IHN0cmluZyA9IHVuZGVmaW5lZDtcbiAgICBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHN0cmluZ1tdID0gdW5kZWZpbmVkO1xuICAgIGlzVmFsaWQ/OiBib29sZWFuID0gdW5kZWZpbmVkO1xuICAgIGlnbm9yZUluTWVudTogYm9vbGVhblxuICAgIHZhbHVlOiBzdHJpbmcgPSBcIlwiO1xuICAgIHZhbHVlc0xpc3ROb3RlUGF0aD86IHN0cmluZyA9IHVuZGVmaW5lZDtcbiAgICB1bmlxdWU6IGJvb2xlYW4gPSB0cnVlXG5cbiAgICBhc3luYyBzZXRJbmZvcyhwbHVnaW46IE1ldGFkYXRhTWVudSwgZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGZpbGVDbGFzcz86IEZpbGVDbGFzcywgbWF0Y2hpbmdGaWxlQ2xhc3NRdWVyeT86IHN0cmluZyB8IHVuZGVmaW5lZCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaWdub3JlSW5NZW51ID0gcGx1Z2luLnNldHRpbmdzLmdsb2JhbGx5SWdub3JlZEZpZWxkcy5pbmNsdWRlcyhmaWVsZE5hbWUpO1xuICAgICAgICBpZiAoZmlsZUNsYXNzKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlQ2xhc3NGaWVsZHMgPSBmaWxlQ2xhc3MuYXR0cmlidXRlcy5tYXAoYXR0ciA9PiBhdHRyLm5hbWUpO1xuICAgICAgICAgICAgaWYgKGZpbGVDbGFzc0ZpZWxkcy5pbmNsdWRlcyhmaWVsZE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXRGaWVsZChwbHVnaW4sIGZpZWxkTmFtZSwgZmlsZUNsYXNzKTtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRNYW5hZ2VyID0gbmV3IEZpZWxkTWFuYWdlcltmaWVsZC50eXBlXShmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNWYWxpZCA9IGF3YWl0IGZpZWxkTWFuYWdlci52YWxpZGF0ZVZhbHVlKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBmaWxlQ2xhc3MuYXR0cmlidXRlcy5maWx0ZXIoYSA9PiBhLm5hbWUgPT09IGZpZWxkTmFtZSlbMF07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZUNsYXNzID0gYXR0cmlidXRlLm9yaWdpbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlQ2xhc3NRdWVyeSA9IG1hdGNoaW5nRmlsZUNsYXNzUXVlcnk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IGF0dHJpYnV0ZS50eXBlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBhdHRyaWJ1dGUub3B0aW9ucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGx1Z2luLnNldHRpbmdzLnByZXNldEZpZWxkcy5tYXAoZiA9PiBmLm5hbWUpLmluY2x1ZGVzKGZpZWxkTmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0RmllbGQocGx1Z2luLCBmaWVsZE5hbWUpO1xuICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRNYW5hZ2VyID0gbmV3IEZpZWxkTWFuYWdlcltmaWVsZC50eXBlXShmaWVsZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1ZhbGlkID0gYXdhaXQgZmllbGRNYW5hZ2VyLnZhbGlkYXRlVmFsdWUodmFsdWUpXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gZmllbGQudHlwZTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBmaWVsZC5vcHRpb25zO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzTGlzdE5vdGVQYXRoID0gZmllbGQudmFsdWVzTGlzdE5vdGVQYXRoO1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlVHlwZSA9IFwic2V0dGluZ3NcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbGVGaWVsZHMocGx1Z2luOiBNZXRhZGF0YU1lbnUsIGZpbGVPcmZpbGVQYXRoOiBURmlsZSB8IHN0cmluZyk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgRmllbGRJbmZvPj4ge1xuICAgIC8qXG4gICAgcmV0dXJucyBhbGwgZmllbGRzIHdpdGggc291cmNlLCB0eXBlLCBvcHRpb25zLCBpc1ZhbGlkLCBpZ25vcmVkXG4gICAgKi9cbiAgICBsZXQgZmlsZTogVEZpbGU7XG4gICAgaWYgKGZpbGVPcmZpbGVQYXRoIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgZmlsZSA9IGZpbGVPcmZpbGVQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IF9maWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlT3JmaWxlUGF0aClcbiAgICAgICAgaWYgKF9maWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgX2ZpbGUuZXh0ZW5zaW9uID09IFwibWRcIikge1xuICAgICAgICAgICAgZmlsZSA9IF9maWxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJwYXRoIGRvZXNuJ3QgY29ycmVzcG9uZCB0byBhIHByb3BlciBmaWxlXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZyb250bWF0dGVyID0gcGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLmdldENhY2hlKGZpbGUucGF0aCk/LmZyb250bWF0dGVyO1xuICAgIGNvbnN0IGZpZWxkczogUmVjb3JkPHN0cmluZywgRmllbGRJbmZvPiA9IHt9XG4gICAgbGV0IGZpbGVDbGFzczogRmlsZUNsYXNzIHwgdW5kZWZpbmVkO1xuICAgIGlmIChwbHVnaW4uc2V0dGluZ3MuZ2xvYmFsRmlsZUNsYXNzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaWxlQ2xhc3MgPSBGaWxlQ2xhc3MuY3JlYXRlRmlsZUNsYXNzKHBsdWdpbiwgcGx1Z2luLnNldHRpbmdzLmdsb2JhbEZpbGVDbGFzcylcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGZpbGVDbGFzcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBmaWxlQ2xhc3NRdWVyaWVzID0gcGx1Z2luLnNldHRpbmdzLmZpbGVDbGFzc1F1ZXJpZXM7XG4gICAgbGV0IG1hdGNoaW5nRmlsZUNsYXNzUXVlcnk6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoZmlsZUNsYXNzUXVlcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHdoaWxlICghbWF0Y2hpbmdGaWxlQ2xhc3NRdWVyeSAmJiBmaWxlQ2xhc3NRdWVyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc1F1ZXJ5ID0gbmV3IEZpbGVDbGFzc1F1ZXJ5KCk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGZpbGVDbGFzc1F1ZXJ5LCBmaWxlQ2xhc3NRdWVyaWVzLnBvcCgpIGFzIEZpbGVDbGFzc1F1ZXJ5KVxuICAgICAgICAgICAgaWYgKGZpbGVDbGFzc1F1ZXJ5Lm1hdGNoRmlsZShmaWxlKSkge1xuICAgICAgICAgICAgICAgIGZpbGVDbGFzcyA9IEZpbGVDbGFzcy5jcmVhdGVGaWxlQ2xhc3MocGx1Z2luLCBmaWxlQ2xhc3NRdWVyeS5maWxlQ2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICBtYXRjaGluZ0ZpbGVDbGFzc1F1ZXJ5ID0gZmlsZUNsYXNzUXVlcnkubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJvbnRtYXR0ZXIpIHtcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiwgLi4uYXR0cmlidXRlcyB9ID0gZnJvbnRtYXR0ZXI7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlJ3MgYSBmaWxlQ2xhc3NcbiAgICAgICAgY29uc3QgZmlsZUNsYXNzQWxpYXMgPSBwbHVnaW4uc2V0dGluZ3MuZmlsZUNsYXNzQWxpYXM7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5pbmNsdWRlcyhmaWxlQ2xhc3NBbGlhcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc05hbWUgPSBhdHRyaWJ1dGVzW2ZpbGVDbGFzc0FsaWFzXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZmlsZUNsYXNzID0gRmlsZUNsYXNzLmNyZWF0ZUZpbGVDbGFzcyhwbHVnaW4sIGZpbGVDbGFzc05hbWUpO1xuICAgICAgICAgICAgICAgIG1hdGNoaW5nRmlsZUNsYXNzUXVlcnkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGZpbGVDbGFzcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0aGVuIGV4cGxvcmUgZnJvbnRtYXR0ZXIgZmllbGRzIGFrYSBhdHRyaWJ1dGVzXG4gICAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goYXN5bmMga2V5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkSW5mbyA9IG5ldyBGaWVsZEluZm87XG4gICAgICAgICAgICBmaWVsZEluZm8udW5pcXVlID0gIU9iamVjdC5rZXlzKGZpZWxkcykuaW5jbHVkZXMoa2V5KTtcbiAgICAgICAgICAgIGZpZWxkc1trZXldID0gZmllbGRJbmZvO1xuICAgICAgICAgICAgYXdhaXQgZmllbGRJbmZvLnNldEluZm9zKHBsdWdpbiwga2V5LCBhdHRyaWJ1dGVzW2tleV0sIGZpbGVDbGFzcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBsZXQncyBleHBsb3JlIHRoZSByZXN0IG9mIHRoZSBmaWxlOiBnZXQgaW5saW5lIGZpZWxkc1xuXG4gICAgY29uc3QgZGF0YXZpZXcgPSBhcHAucGx1Z2lucy5wbHVnaW5zW1wiZGF0YXZpZXdcIl1cbiAgICAvL0B0cy1pZ25vcmVcbiAgICBpZiAoZGF0YXZpZXcpIHtcbiAgICAgICAgY29uc3QgZHZGaWxlID0gZGF0YXZpZXcuYXBpLnBhZ2UoZmlsZS5wYXRoKVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZ2VudWluZUtleXMoZHZGaWxlKS5mb3JFYWNoKGFzeW5jIGtleSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gXCJmaWxlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRJbmZvID0gbmV3IEZpZWxkSW5mbztcbiAgICAgICAgICAgICAgICAgICAgZmllbGRJbmZvLnVuaXF1ZSA9ICFPYmplY3Qua2V5cyhmaWVsZHMpLmluY2x1ZGVzKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkc1trZXldID0gZmllbGRJbmZvO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBmaWVsZEluZm8uc2V0SW5mb3MocGx1Z2luLCBrZXksIGR2RmlsZVtrZXldLCBmaWxlQ2xhc3MsIG1hdGNoaW5nRmlsZUNsYXNzUXVlcnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyAoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpZWxkcztcbn0iLCAiaW1wb3J0IHsgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIlxuaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiXG5pbXBvcnQgeyBnZXRWYWx1ZXMgfSBmcm9tIFwiLi9jb21tYW5kcy9nZXRWYWx1ZXNcIjtcbmltcG9ydCB7IHJlcGxhY2VWYWx1ZXMgfSBmcm9tIFwiLi9jb21tYW5kcy9yZXBsYWNlVmFsdWVzXCI7XG5pbXBvcnQgeyBpbnNlcnRWYWx1ZXMgfSBmcm9tIFwiLi9jb21tYW5kcy9pbnNlcnRWYWx1ZXNcIjtcbmltcG9ydCB7IGZpZWxkTW9kaWZpZXIgfSBmcm9tIFwiLi9jb21tYW5kcy9maWVsZE1vZGlmaWVyXCI7XG5pbXBvcnQgeyBmaWxlRmllbGRzLCBGaWVsZEluZm8gfSBmcm9tIFwiLi9jb21tYW5kcy9maWxlRmllbGRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1ldGFkYXRhTWVudUFwaSB7XG4gICAgZ2V0VmFsdWVzOiAoZmlsZU9yRmlsZVBhdGg6IFRGaWxlIHwgc3RyaW5nLCBhdHRyaWJ1dGU6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmdbXT47XG4gICAgcmVwbGFjZVZhbHVlczogKGZpbGVPckZpbGVQYXRoOiBURmlsZSB8IHN0cmluZywgYXR0cmlidXRlOiBzdHJpbmcsIGlucHV0OiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG4gICAgaW5zZXJ0VmFsdWVzOiAoZmlsZU9yRmlsZVBhdGg6IFRGaWxlIHwgc3RyaW5nLCBmaWVsZE5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgbGluZU51bWJlcj86IG51bWJlciwgaW5Gcm9udG1hdHRlcj86IGJvb2xlYW4sIGFmdGVyPzogYm9vbGVhbikgPT4gUHJvbWlzZTx2b2lkPlxuICAgIGZpbGVGaWVsZHM6IChmaWxlT3JGaWxlUGF0aDogVEZpbGUgfCBzdHJpbmcpID0+IFByb21pc2U8UmVjb3JkPHN0cmluZywgRmllbGRJbmZvPj47XG4gICAgZmllbGRNb2RpZmllcjogKGR2OiBhbnksIHA6IGFueSwgZmllbGROYW1lOiBzdHJpbmcsIGF0dHJzPzogeyBjbHM/OiBzdHJpbmcsIGF0dHI/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LCBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB9KSA9PiBQcm9taXNlPEhUTUxFbGVtZW50Pjtcbn1cblxuZXhwb3J0IGNsYXNzIE1ldGFkYXRhTWVudUFwaSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogTWV0YWRhdGFNZW51KSB7XG4gICAgfVxuXG4gICAgcHVibGljIG1ha2UoKTogSU1ldGFkYXRhTWVudUFwaSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRWYWx1ZXM6IHRoaXMuZ2V0VmFsdWVzKCksXG4gICAgICAgICAgICByZXBsYWNlVmFsdWVzOiB0aGlzLnJlcGxhY2VWYWx1ZXMoKSxcbiAgICAgICAgICAgIGluc2VydFZhbHVlczogdGhpcy5pbnNlcnRWYWx1ZXMoKSxcbiAgICAgICAgICAgIGZpZWxkTW9kaWZpZXI6IHRoaXMuZmllbGRNb2RpZmllcigpLFxuICAgICAgICAgICAgZmlsZUZpZWxkczogdGhpcy5maWxlRmllbGRzKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFZhbHVlcygpOiAoZmlsZU9yRmlsZVBhdGg6IFRGaWxlIHwgc3RyaW5nLCBhdHRyaWJ1dGU6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICByZXR1cm4gYXN5bmMgKGZpbGVPckZpbGVQYXRoOiBURmlsZSB8IHN0cmluZywgYXR0cmlidXRlOiBzdHJpbmcpID0+IGdldFZhbHVlcyh0aGlzLnBsdWdpbi5hcHAsIGZpbGVPckZpbGVQYXRoLCBhdHRyaWJ1dGUpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXBsYWNlVmFsdWVzKCk6IChmaWxlT3JGaWxlUGF0aDogVEZpbGUgfCBzdHJpbmcsIGF0dHJpYnV0ZTogc3RyaW5nLCBpbnB1dDogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIGFzeW5jIChmaWxlT3JGaWxlUGF0aDogVEZpbGUgfCBzdHJpbmcsIGF0dHJpYnV0ZTogc3RyaW5nLCBpbnB1dDogc3RyaW5nKSA9PiByZXBsYWNlVmFsdWVzKHRoaXMucGx1Z2luLmFwcCwgZmlsZU9yRmlsZVBhdGgsIGF0dHJpYnV0ZSwgaW5wdXQpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnNlcnRWYWx1ZXMoKTogKGZpbGVPckZpbGVQYXRoOiBURmlsZSB8IHN0cmluZywgZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGxpbmVOdW1iZXI/OiBudW1iZXIsIGluRnJvbnRtYXR0ZXI/OiBib29sZWFuLCBhZnRlcj86IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gYXN5bmMgKGZpbGVPckZpbGVQYXRoOiBURmlsZSB8IHN0cmluZywgZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGxpbmVOdW1iZXI/OiBudW1iZXIsIGluRnJvbnRtYXR0ZXI/OiBib29sZWFuLCBhZnRlcj86IGJvb2xlYW4pID0+IGluc2VydFZhbHVlcyh0aGlzLnBsdWdpbi5hcHAsIGZpbGVPckZpbGVQYXRoLCBmaWVsZE5hbWUsIHZhbHVlLCBsaW5lTnVtYmVyLCBpbkZyb250bWF0dGVyLCBhZnRlcilcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpZWxkTW9kaWZpZXIoKTogKGR2OiBhbnksIHA6IGFueSwgZmllbGROYW1lOiBzdHJpbmcsIGF0dHJzPzogeyBjbHM/OiBzdHJpbmcsIGF0dHI/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LCBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB9KSA9PiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gICAgICAgIHJldHVybiAoZHY6IGFueSwgcDogYW55LCBmaWVsZE5hbWU6IHN0cmluZywgYXR0cnM/OiB7IGNscz86IHN0cmluZywgYXR0cj86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sIG9wdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH0pID0+IGZpZWxkTW9kaWZpZXIodGhpcy5wbHVnaW4sIGR2LCBwLCBmaWVsZE5hbWUsIGF0dHJzKVxuICAgIH1cblxuICAgIHByaXZhdGUgZmlsZUZpZWxkcygpOiAoZmlsZU9yRmlsZVBhdGg6IFRGaWxlIHwgc3RyaW5nKSA9PiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIEZpZWxkSW5mbz4+IHtcbiAgICAgICAgcmV0dXJuIGFzeW5jIChmaWxlT3JGaWxlUGF0aDogVEZpbGUgfCBzdHJpbmcpID0+IGZpbGVGaWVsZHModGhpcy5wbHVnaW4sIGZpbGVPckZpbGVQYXRoKVxuICAgIH1cbn0iLCAiaW1wb3J0IHsgQXBwLCBGdXp6eU1hdGNoLCBGdXp6eVN1Z2dlc3RNb2RhbCwgc2V0SWNvbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5pbnRlcmZhY2UgT3B0aW9uIHtcbiAgICBpZDogc3RyaW5nLFxuICAgIGFjdGlvbkxhYmVsOiBzdHJpbmcsXG4gICAgYWN0aW9uOiBhbnksXG4gICAgaWNvbj86IHN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxPcHRpb24+IHtcbiAgICBwdWJsaWMgYXBwOiBBcHA7XG4gICAgcHVibGljIG9wdGlvbnM6IE9wdGlvbltdID0gW11cblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgIH07XG5cbiAgICBnZXRJdGVtcygpOiBPcHRpb25bXSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNcbiAgICB9XG5cbiAgICBnZXRJdGVtVGV4dChpdGVtOiBPcHRpb24pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gaXRlbS5hY3Rpb25MYWJlbFxuICAgIH1cblxuICAgIG9uQ2hvb3NlSXRlbShpdGVtOiBPcHRpb24sIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaXRlbS5hY3Rpb24oKTtcbiAgICB9XG5cbiAgICByZW5kZXJTdWdnZXN0aW9uKGl0ZW06IEZ1enp5TWF0Y2g8T3B0aW9uPiwgZWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1jb21tYW5kLXN1Z2dlc3QtaXRlbVwiKVxuICAgICAgICBjb25zdCBpY29uQ29udGFpbmVyID0gZWwuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtY29tbWFuZC1zdWdnZXN0LWljb25cIiB9KVxuICAgICAgICBpdGVtLml0ZW0uaWNvbiA/IHNldEljb24oaWNvbkNvbnRhaW5lciwgaXRlbS5pdGVtLmljb24pIDogc2V0SWNvbihpY29uQ29udGFpbmVyLCBcInBlbmNpbFwiKVxuICAgICAgICBjb25zdCBhY3Rpb25MYWJlbCA9IGVsLmNyZWF0ZURpdih7IGNsczogXCJtZXRhZGF0YS1tZW51LWNvbW1hbmQtc3VnZ2VzdC1hY3Rpb24tbGFiZWxcIiB9KVxuICAgICAgICBhY3Rpb25MYWJlbC5pbm5lckhUTUwgPSBpdGVtLml0ZW0uYWN0aW9uTGFiZWxcbiAgICB9XG59OyIsICJpbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBBcHAsIE1lbnUsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBGaWxlQ2xhc3MgfSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9maWxlQ2xhc3NcIjtcbmltcG9ydCB7IEZpbGVDbGFzc0F0dHJpYnV0ZSB9IGZyb20gXCJzcmMvZmlsZUNsYXNzL2ZpbGVDbGFzc0F0dHJpYnV0ZVwiO1xuaW1wb3J0IHsgRmlsZUNsYXNzQXR0cmlidXRlTW9kYWwgfSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9GaWxlQ2xhc3NBdHRyaWJ1dGVNb2RhbFwiO1xuaW1wb3J0IHsgRmllbGRJY29uIH0gZnJvbSBcInNyYy90eXBlcy9maWVsZFR5cGVzXCI7XG5pbXBvcnQgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsIGZyb20gXCIuL0ZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbFwiO1xuXG5mdW5jdGlvbiBpc01lbnUobG9jYXRpb246IE1lbnUgfCBcIkluc2VydEZpZWxkQ29tbWFuZFwiIHwgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKTogbG9jYXRpb24gaXMgTWVudSB7XG4gICAgcmV0dXJuIChsb2NhdGlvbiBhcyBNZW51KS5hZGRJdGVtICE9PSB1bmRlZmluZWQ7XG59O1xuXG5mdW5jdGlvbiBpc0luc2VydEZpZWxkQ29tbWFuZChsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwpOiBsb2NhdGlvbiBpcyBcIkluc2VydEZpZWxkQ29tbWFuZFwiIHtcbiAgICByZXR1cm4gKGxvY2F0aW9uIGFzIHN0cmluZykgPT09IFwiSW5zZXJ0RmllbGRDb21tYW5kXCI7XG59XG5cbmZ1bmN0aW9uIGlzU3VnZ2VzdChsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwpOiBsb2NhdGlvbiBpcyBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwge1xuICAgIHJldHVybiAobG9jYXRpb24gYXMgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKS5nZXRJdGVtcyAhPT0gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZUNsYXNzT3B0aW9uc0xpc3Qge1xuXG4gICAgLy8gYWRkcyBvcHRpb25zIHRvIGNvbnRleHQgbWVudSBvciB0byBhIGRyb3Bkb3duIG1vZGFsIHRyaWdnZXIgd2l0aCBcIkZpZWxkOiBPcHRpb25zXCIgY29tbWFuZCBpbiBjb21tYW5kIHBhbGxldHRlXG5cbiAgICBhcHA6IEFwcDtcbiAgICBmaWxlOiBURmlsZTtcbiAgICBwbHVnaW46IE1ldGFkYXRhTWVudTtcbiAgICBwYXRoOiBzdHJpbmc7XG4gICAgbG9jYXRpb246IE1lbnUgfCBcIkluc2VydEZpZWxkQ29tbWFuZFwiIHwgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsO1xuICAgIGZpbGVDbGFzczogRmlsZUNsYXNzO1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBNZXRhZGF0YU1lbnUsIGZpbGU6IFRGaWxlLCBsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwpIHtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgdGhpcy5maWxlQ2xhc3MgPSBGaWxlQ2xhc3MuY3JlYXRlRmlsZUNsYXNzKHRoaXMucGx1Z2luLCBmaWxlLmJhc2VuYW1lKVxuICAgIH07XG5cbiAgICBwdWJsaWMgY3JlYXRlRXh0cmFPcHRpb25MaXN0KG9wZW5BZnRlckNyZWF0ZTogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICAgICAgaWYgKGlzTWVudSh0aGlzLmxvY2F0aW9uKSkgeyB0aGlzLmxvY2F0aW9uLmFkZFNlcGFyYXRvcigpOyB9O1xuICAgICAgICBpZiAoaXNJbnNlcnRGaWVsZENvbW1hbmQodGhpcy5sb2NhdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEZpbGVDbGFzc0F0dHJpYnV0ZU1vZGFsKHRoaXMucGx1Z2luLCB0aGlzLmZpbGVDbGFzcyk7XG4gICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNTdWdnZXN0KHRoaXMubG9jYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRmllbGRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChvcGVuQWZ0ZXJDcmVhdGUpIHRoaXMubG9jYXRpb24ub3BlbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWlsZEZpZWxkT3B0aW9ucygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidWlsZEZpZWxkT3B0aW9ucygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5maWxlQ2xhc3MuYXR0cmlidXRlcy5mb3JFYWNoKChhdHRyOiBGaWxlQ2xhc3NBdHRyaWJ1dGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEZpbGVDbGFzc0F0dHJpYnV0ZU1vZGFsKHRoaXMucGx1Z2luLCB0aGlzLmZpbGVDbGFzcywgYXR0cilcbiAgICAgICAgICAgIGlmIChpc01lbnUodGhpcy5sb2NhdGlvbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2F0aW9uLmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShgJHthdHRyLm5hbWV9YClcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKFwid3JlbmNoXCIpXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRTZWN0aW9uKFwibWV0YWRhdGEtbWVudS1maWxlY2xhc3MuZmlsZWNsYXNzLWZpZWxkc1wiKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3VnZ2VzdCh0aGlzLmxvY2F0aW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9jYXRpb24ub3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGB1cGRhdGVfJHthdHRyLm5hbWV9YCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uTGFiZWw6IGA8c3Bhbj4ke2F0dHIubmFtZX08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiBtb2RhbC5vcGVuKCksXG4gICAgICAgICAgICAgICAgICAgIGljb246IFwiZ2VhclwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaXNNZW51KHRoaXMubG9jYXRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uLmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiQWRkIG5ldyBmaWxlQ2xhc3MgYXR0cmlidXRlXCIpXG4gICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKFwicGx1cy1jaXJjbGVcIilcbiAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBGaWxlQ2xhc3NBdHRyaWJ1dGVNb2RhbCh0aGlzLnBsdWdpbiwgdGhpcy5maWxlQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpdGVtLnNldFNlY3Rpb24oXCJtZXRhZGF0YS1tZW51LWZpbGVjbGFzc1wiKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmIChpc1N1Z2dlc3QodGhpcy5sb2NhdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEZpbGVDbGFzc0F0dHJpYnV0ZU1vZGFsKHRoaXMucGx1Z2luLCB0aGlzLmZpbGVDbGFzcyk7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uLm9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IFwiYWRkX2ZpbGVDbGFzc19hdHRyaWJ1dGVcIixcbiAgICAgICAgICAgICAgICBhY3Rpb25MYWJlbDogYDxzcGFuPkluc2VydCBhbiBhdHRyaWJ1dGUgZm9yIDxiPiR7dGhpcy5maWxlQ2xhc3MubmFtZX08L2I+IGZpbGVDbGFzczwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4geyBtb2RhbC5vcGVuKCkgfSxcbiAgICAgICAgICAgICAgICBpY29uOiBcInBsdXMtY2lyY2xlXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbn07XG4iLCAiaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IHsgTWVudSwgUGxhdGZvcm0sIHJlcXVpcmVBcGlWZXJzaW9uLCBUQWJzdHJhY3RGaWxlLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IE9wdGlvbnNMaXN0IGZyb20gXCJzcmMvb3B0aW9ucy9PcHRpb25zTGlzdFwiO1xuaW1wb3J0IEZpbGVDbGFzc09wdGlvbnNMaXN0IGZyb20gXCIuL0ZpbGVDbGFzc09wdGlvbnNMaXN0XCI7XG5pbXBvcnQgeyBmcm9udE1hdHRlckxpbmVGaWVsZCwgZ2V0TGluZUZpZWxkcyB9IGZyb20gXCJzcmMvdXRpbHMvcGFyc2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGxpbmtDb250ZXh0TWVudSB7XG5cdHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG5cblx0Y29uc3RydWN0b3IocGx1Z2luOiBNZXRhZGF0YU1lbnUpIHtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0XHR0aGlzLmNyZWF0ZUNvbnRleHRNZW51KCk7XG5cdH07XG5cblx0cHJpdmF0ZSBidWlsZE9wdGlvbnMoZmlsZTogVEZpbGUgfCBUQWJzdHJhY3RGaWxlIHwgbnVsbCwgbWVudTogTWVudSwgaW5jbHVkZWRGaWVsZHM/OiBzdHJpbmdbXSk6IHZvaWQge1xuXHRcdGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcblx0XHRcdGlmICghUGxhdGZvcm0uaXNNb2JpbGUgJiYgcmVxdWlyZUFwaVZlcnNpb24oXCIwLjE2LjBcIikpIHsvL0B0cy1pZ25vcmVcblx0XHRcdFx0bWVudS5zZXRTZWN0aW9uU3VibWVudShcIm1ldGFkYXRhLW1lbnUuY3VycmVudF9maWVsZFwiLCB7IHRpdGxlOiBcIkN1cnJlbnQgRmllbGRcIiwgaWNvbjogXCJwZW5jaWxcIiB9KVxuXHRcdFx0XHQvL0B0cy1pZ25vcmVcblx0XHRcdFx0bWVudS5zZXRTZWN0aW9uU3VibWVudShcIm1ldGFkYXRhLW1lbnUuZmllbGRzXCIsIHsgdGl0bGU6IFwiTWFuYWdlIEZpZWxkc1wiLCBpY29uOiBcInBlbmNpbFwiIH0pXG5cdFx0XHRcdC8vQHRzLWlnbm9yZVxuXHRcdFx0XHRtZW51LnNldFNlY3Rpb25TdWJtZW51KFwibWV0YWRhdGEtbWVudS1maWxlY2xhc3MuZmlsZWNsYXNzLWZpZWxkc1wiLCB7IHRpdGxlOiBcIk1hbmFnZSBGaWxlY2xhc3MgRmllbGRzXCIsIGljb246IFwid3JlbmNoXCIgfSlcblx0XHRcdH1cblx0XHRcdC8vSWYgZmlsZUNsYXNzXG5cdFx0XHRpZiAoZmlsZS5wYXJlbnQucGF0aCArIFwiL1wiID09IHRoaXMucGx1Z2luLnNldHRpbmdzLmNsYXNzRmlsZXNQYXRoKSB7XG5cdFx0XHRcdGNvbnN0IGZpbGVDbGFzc09wdGlvbnNMaXN0ID0gbmV3IEZpbGVDbGFzc09wdGlvbnNMaXN0KHRoaXMucGx1Z2luLCBmaWxlLCBtZW51KVxuXHRcdFx0XHRmaWxlQ2xhc3NPcHRpb25zTGlzdC5jcmVhdGVFeHRyYU9wdGlvbkxpc3QoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IG9wdGlvbnNMaXN0ID0gbmV3IE9wdGlvbnNMaXN0KHRoaXMucGx1Z2luLCBmaWxlLCBtZW51LCBpbmNsdWRlZEZpZWxkcyk7XG5cdFx0XHRcdG9wdGlvbnNMaXN0LmNyZWF0ZUV4dHJhT3B0aW9uTGlzdCgpO1xuXHRcdFx0fTtcblxuXHRcdH07XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUNvbnRleHRNZW51KCk6IHZvaWQge1xuXHRcdHRoaXMucGx1Z2luLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLm9uKCdmaWxlLW1lbnUnLCAobWVudSwgYWJzdHJhY3RGaWxlLCBzb3VyY2UpID0+IHtcblx0XHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoYWJzdHJhY3RGaWxlLnBhdGgpO1xuXHRcdFx0XHR0aGlzLmJ1aWxkT3B0aW9ucyhmaWxlLCBtZW51KTtcblx0XHRcdH0pXG5cdFx0KTtcblxuXHRcdHRoaXMucGx1Z2luLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLm9uKCdlZGl0b3ItbWVudScsIChtZW51LCBlZGl0b3IsIHZpZXcpID0+IHtcblx0XHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXHRcdFx0XHRjb25zdCBpbmNsdWRlZEZpZWxkczogc3RyaW5nW10gPSBbXTtcblx0XHRcdFx0Y29uc3QgZnJvbnRtYXR0ZXIgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodmlldy5maWxlKT8uZnJvbnRtYXR0ZXI7XG5cdFx0XHRcdGlmIChmcm9udG1hdHRlclxuXHRcdFx0XHRcdCYmIGVkaXRvci5nZXRDdXJzb3IoKS5saW5lID4gZnJvbnRtYXR0ZXIucG9zaXRpb24uc3RhcnQubGluZVxuXHRcdFx0XHRcdCYmIGVkaXRvci5nZXRDdXJzb3IoKS5saW5lIDwgZnJvbnRtYXR0ZXIucG9zaXRpb24uZW5kLmxpbmVcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gZnJvbnRNYXR0ZXJMaW5lRmllbGQoZWRpdG9yLmdldExpbmUoZWRpdG9yLmdldEN1cnNvcigpLmxpbmUpKVxuXHRcdFx0XHRcdGlmIChhdHRyaWJ1dGUpIGluY2x1ZGVkRmllbGRzLnB1c2goYXR0cmlidXRlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRnZXRMaW5lRmllbGRzKGVkaXRvci5nZXRMaW5lKGVkaXRvci5nZXRDdXJzb3IoKS5saW5lKSkuZm9yRWFjaChmaWVsZCA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoZWRpdG9yLmdldEN1cnNvcigpLmNoIDw9IGZpZWxkLmluZGV4ICsgZmllbGQubGVuZ3RoICYmIGVkaXRvci5nZXRDdXJzb3IoKS5jaCA+PSBmaWVsZC5pbmRleCkge1xuXHRcdFx0XHRcdFx0XHRpbmNsdWRlZEZpZWxkcy5wdXNoKGZpZWxkLmF0dHJpYnV0ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaW5jbHVkZWRGaWVsZHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dGhpcy5idWlsZE9wdGlvbnMoZmlsZSwgbWVudSwgaW5jbHVkZWRGaWVsZHMpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuYnVpbGRPcHRpb25zKGZpbGUsIG1lbnUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0pXG5cdFx0KVxuXHR9O1xufTsiLCAiaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IHsgQXBwLCBNYXJrZG93blZpZXcsIE1lbnUsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBnZXRGaWVsZCB9IGZyb20gXCJzcmMvY29tbWFuZHMvZ2V0RmllbGRcIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZFwiO1xuaW1wb3J0IHsgRmllbGRNYW5hZ2VyIGFzIEYgfSBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZE1hbmFnZXJcIjtcbmltcG9ydCBNYW5hZ2VycyBmcm9tIFwic3JjL2ZpZWxkcy9maWVsZE1hbmFnZXJzL01hbmFnZXJzXCI7XG5pbXBvcnQgeyBGaWxlQ2xhc3MgfSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9maWxlQ2xhc3NcIjtcbmltcG9ydCBGaWxlQ2xhc3NRdWVyeSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9GaWxlQ2xhc3NRdWVyeVwiO1xuaW1wb3J0IElucHV0TW9kYWwgZnJvbSBcInNyYy9vcHRpb25Nb2RhbHMvZmllbGRzL0lucHV0TW9kYWxcIjtcbmltcG9ydCB7IEZpZWxkSWNvbiwgRmllbGRNYW5hZ2VyLCBGaWVsZFR5cGUgfSBmcm9tIFwic3JjL3R5cGVzL2ZpZWxkVHlwZXNcIjtcbmltcG9ydCB7IGdlbnVpbmVLZXlzIH0gZnJvbSBcInNyYy91dGlscy9kYXRhdmlld1V0aWxzXCI7XG5pbXBvcnQgY2hvb3NlU2VjdGlvbk1vZGFsIGZyb20gXCIuLi9vcHRpb25Nb2RhbHMvY2hvb3NlU2VjdGlvbk1vZGFsXCI7XG5pbXBvcnQgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsIGZyb20gXCIuL0ZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbFwiO1xuaW1wb3J0IEZpbGVDbGFzc09wdGlvbnNMaXN0IGZyb20gXCIuL0ZpbGVDbGFzc09wdGlvbnNMaXN0XCI7XG5cbmZ1bmN0aW9uIGlzTWVudShsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwgfCBcIk1hbmFnZUF0Q3Vyc29yQ29tbWFuZFwiKTogbG9jYXRpb24gaXMgTWVudSB7XG5cdHJldHVybiAobG9jYXRpb24gYXMgTWVudSkuYWRkSXRlbSAhPT0gdW5kZWZpbmVkO1xufTtcblxuZnVuY3Rpb24gaXNJbnNlcnRGaWVsZENvbW1hbmQobG9jYXRpb246IE1lbnUgfCBcIkluc2VydEZpZWxkQ29tbWFuZFwiIHwgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsIHwgXCJNYW5hZ2VBdEN1cnNvckNvbW1hbmRcIik6IGxvY2F0aW9uIGlzIFwiSW5zZXJ0RmllbGRDb21tYW5kXCIge1xuXHRyZXR1cm4gKGxvY2F0aW9uIGFzIHN0cmluZykgPT09IFwiSW5zZXJ0RmllbGRDb21tYW5kXCI7XG59XG5cbmZ1bmN0aW9uIGlzU3VnZ2VzdChsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwgfCBcIk1hbmFnZUF0Q3Vyc29yQ29tbWFuZFwiKTogbG9jYXRpb24gaXMgRmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsIHtcblx0cmV0dXJuIChsb2NhdGlvbiBhcyBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwpLmdldEl0ZW1zICE9PSB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcHRpb25zTGlzdCB7XG5cblx0Ly8gYWRkcyBvcHRpb25zIHRvIGNvbnRleHQgbWVudSBvciB0byBhIGRyb3Bkb3duIG1vZGFsIHRyaWdnZXIgd2l0aCBcIkZpZWxkOiBPcHRpb25zXCIgY29tbWFuZCBpbiBjb21tYW5kIHBhbGxldHRlXG5cblx0YXBwOiBBcHA7XG5cdGZpbGU6IFRGaWxlO1xuXHRwbHVnaW46IE1ldGFkYXRhTWVudTtcblx0cGF0aDogc3RyaW5nO1xuXHRsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwgfCBcIk1hbmFnZUF0Q3Vyc29yQ29tbWFuZFwiO1xuXHRmaWxlQ2xhc3M6IEZpbGVDbGFzcztcblx0YXR0cmlidXRlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblx0ZmlsZUNsYXNzRm9yRmllbGRzOiBib29sZWFuO1xuXHRmaWxlQ2xhc3NGaWVsZHM6IHN0cmluZ1tdO1xuXHRpbmNsdWRlZEZpZWxkczogc3RyaW5nW107XG5cblx0Y29uc3RydWN0b3IocGx1Z2luOiBNZXRhZGF0YU1lbnUsIGZpbGU6IFRGaWxlLCBsb2NhdGlvbjogTWVudSB8IFwiSW5zZXJ0RmllbGRDb21tYW5kXCIgfCBGaWVsZENvbW1hbmRTdWdnZXN0TW9kYWwgfCBcIk1hbmFnZUF0Q3Vyc29yQ29tbWFuZFwiLCBpbmNsdWRlZEZpZWxkcz86IHN0cmluZ1tdKSB7XG5cdFx0dGhpcy5maWxlID0gZmlsZTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0XHR0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5maWxlQ2xhc3NGaWVsZHMgPSBbXTtcblx0XHR0aGlzLmZpbGVDbGFzc0ZvckZpZWxkcyA9IGZhbHNlO1xuXHRcdHRoaXMuaW5jbHVkZWRGaWVsZHMgPSBpbmNsdWRlZEZpZWxkcyA/IFt0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlQ2xhc3NBbGlhcywgLi4uaW5jbHVkZWRGaWVsZHNdIDogW3RoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVDbGFzc0FsaWFzXTtcblx0fTtcblxuXHRwcml2YXRlIGFkZEF0dHJpYnV0ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuXHRcdGNvbnN0IGluY2x1ZGVkRmllbGRzID0gdGhpcy5pbmNsdWRlZEZpZWxkcy5maWx0ZXIoZiA9PiBmICE9PSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlQ2xhc3NBbGlhcylcblx0XHRpZiAoaW5jbHVkZWRGaWVsZHMubGVuZ3RoID4gMCkge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHR0aGlzLmluY2x1ZGVkRmllbGRzLmluY2x1ZGVzKGtleSlcblx0XHRcdFx0JiZcblx0XHRcdFx0IXRoaXMucGx1Z2luLnNldHRpbmdzLmdsb2JhbGx5SWdub3JlZEZpZWxkcy5pbmNsdWRlcyhrZXkpXG5cdFx0XHQpIHtcblx0XHRcdFx0dGhpcy5hdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLmdsb2JhbGx5SWdub3JlZEZpZWxkcy5pbmNsdWRlcyhrZXkpKSB7XG5cdFx0XHR0aGlzLmF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlXG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBnZXRHbG9iYWxGaWxlQ2xhc3NGb3JGaWVsZHMoKTogdm9pZCB7XG5cdFx0Y29uc3QgZmlsZUNsYXNzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2xvYmFsRmlsZUNsYXNzIGFzIHN0cmluZztcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgX2ZpbGVDbGFzcyA9IEZpbGVDbGFzcy5jcmVhdGVGaWxlQ2xhc3ModGhpcy5wbHVnaW4sIGZpbGVDbGFzcyk7XG5cdFx0XHR0aGlzLmZpbGVDbGFzcyA9IF9maWxlQ2xhc3M7XG5cdFx0XHR0aGlzLmZpbGVDbGFzc0ZpZWxkcyA9IF9maWxlQ2xhc3MuYXR0cmlidXRlcy5tYXAoYXR0ciA9PiBhdHRyLm5hbWUpO1xuXHRcdFx0dGhpcy5maWxlQ2xhc3NGb3JGaWVsZHMgPSB0cnVlO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHQvL2RvIG5vdGhpbmdcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGdldFF1ZXJ5RmlsZUNsYXNzRm9yRmllbGRzKCk6IHZvaWQge1xuXHRcdGNvbnN0IGZpbGVDbGFzc1F1ZXJpZXMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlQ2xhc3NRdWVyaWVzLm1hcChmY3EgPT4gZmNxKVxuXHRcdHdoaWxlICghdGhpcy5maWxlQ2xhc3NGb3JGaWVsZHMgJiYgZmlsZUNsYXNzUXVlcmllcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRjb25zdCBmaWxlQ2xhc3NRdWVyeSA9IG5ldyBGaWxlQ2xhc3NRdWVyeSgpO1xuXHRcdFx0T2JqZWN0LmFzc2lnbihmaWxlQ2xhc3NRdWVyeSwgZmlsZUNsYXNzUXVlcmllcy5wb3AoKSBhcyBGaWxlQ2xhc3NRdWVyeSlcblx0XHRcdGlmIChmaWxlQ2xhc3NRdWVyeS5tYXRjaEZpbGUodGhpcy5maWxlKSkge1xuXHRcdFx0XHR0aGlzLmZpbGVDbGFzc0ZvckZpZWxkcyA9IHRydWU7XG5cdFx0XHRcdHRoaXMuZmlsZUNsYXNzID0gRmlsZUNsYXNzLmNyZWF0ZUZpbGVDbGFzcyh0aGlzLnBsdWdpbiwgZmlsZUNsYXNzUXVlcnkuZmlsZUNsYXNzTmFtZSlcblx0XHRcdFx0dGhpcy5maWxlQ2xhc3NGaWVsZHMgPSB0aGlzLmZpbGVDbGFzcy5hdHRyaWJ1dGVzLm1hcChhdHRyID0+IGF0dHIubmFtZSlcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGZldGNoRnJvbnRtYXR0ZXJGaWVsZHMoKTogdm9pZCB7XG5cdFx0Y29uc3QgZnJvbnRtYXR0ZXIgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRDYWNoZSh0aGlzLmZpbGUucGF0aCk/LmZyb250bWF0dGVyO1xuXHRcdGlmIChmcm9udG1hdHRlcikge1xuXHRcdFx0Y29uc3QgeyBwb3NpdGlvbiwgLi4uYXR0cmlidXRlcyB9ID0gZnJvbnRtYXR0ZXI7XG5cdFx0XHRPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGF0dHIgPT4gdGhpcy5hZGRBdHRyaWJ1dGUoLi4uYXR0cikpO1xuXHRcdFx0Y29uc3QgZmlsZUNsYXNzQWxpYXMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlQ2xhc3NBbGlhcztcblx0XHRcdGlmIChPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmluY2x1ZGVzKGZpbGVDbGFzc0FsaWFzKSkge1xuXHRcdFx0XHRjb25zdCBmaWxlQ2xhc3MgPSB0aGlzLmF0dHJpYnV0ZXNbZmlsZUNsYXNzQWxpYXNdO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGNvbnN0IF9maWxlQ2xhc3MgPSBGaWxlQ2xhc3MuY3JlYXRlRmlsZUNsYXNzKHRoaXMucGx1Z2luLCBmaWxlQ2xhc3MpO1xuXHRcdFx0XHRcdHRoaXMuZmlsZUNsYXNzID0gX2ZpbGVDbGFzcztcblx0XHRcdFx0XHR0aGlzLmZpbGVDbGFzc0ZpZWxkcyA9IF9maWxlQ2xhc3MuYXR0cmlidXRlcy5tYXAoYXR0ciA9PiBhdHRyLm5hbWUpO1xuXHRcdFx0XHRcdHRoaXMuZmlsZUNsYXNzRm9yRmllbGRzID0gdHJ1ZTtcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoIXRoaXMuZmlsZUNsYXNzRmllbGRzLmluY2x1ZGVzKGtleSkgJiYga2V5ICE9IGZpbGVDbGFzc0FsaWFzKSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNba2V5XTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0Ly9kbyBub3RoaW5nXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGZldGNoSW5saW5lRmllbGRzKCk6IHZvaWQge1xuXHRcdGNvbnN0IGRhdGF2aWV3ID0gYXBwLnBsdWdpbnMucGx1Z2luc1tcImRhdGF2aWV3XCJdXG5cdFx0Ly9AdHMtaWdub3JlXG5cdFx0aWYgKGRhdGF2aWV3KSB7XG5cdFx0XHRjb25zdCBkdkZpbGUgPSBkYXRhdmlldy5hcGkucGFnZSh0aGlzLmZpbGUucGF0aClcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGdlbnVpbmVLZXlzKGR2RmlsZSkuZm9yRWFjaChrZXkgPT4gdGhpcy5hZGRBdHRyaWJ1dGUoa2V5LCBkdkZpbGVba2V5XSkpXG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHR0aHJvdyAoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBjcmVhdGVBbmRPcGVuRmllbGRNb2RhbChmaWVsZE5hbWU6IHN0cmluZyk6IHZvaWQge1xuXHRcdHRoaXMuZ2V0R2xvYmFsRmlsZUNsYXNzRm9yRmllbGRzKCk7XG5cdFx0dGhpcy5nZXRRdWVyeUZpbGVDbGFzc0ZvckZpZWxkcygpO1xuXHRcdHRoaXMuZmV0Y2hGcm9udG1hdHRlckZpZWxkcygpO1xuXHRcdHRoaXMuZmV0Y2hJbmxpbmVGaWVsZHMoKTtcblx0XHRjb25zdCB2YWx1ZSA9IHRoaXMuYXR0cmlidXRlc1tmaWVsZE5hbWVdO1xuXHRcdGNvbnN0IGZpZWxkID0gZ2V0RmllbGQodGhpcy5wbHVnaW4sIGZpZWxkTmFtZSwgdGhpcy5maWxlQ2xhc3MpO1xuXHRcdGlmIChmaWVsZCkge1xuXHRcdFx0Y29uc3QgZmllbGRNYW5hZ2VyID0gbmV3IEZpZWxkTWFuYWdlcltmaWVsZC50eXBlXShmaWVsZCk7XG5cdFx0XHQoZmllbGRNYW5hZ2VyIGFzIEYpLmNyZWF0ZUFuZE9wZW5GaWVsZE1vZGFsKHRoaXMucGx1Z2luLmFwcCwgdGhpcy5maWxlLCBmaWVsZC5uYW1lLCB0aGlzLmF0dHJpYnV0ZXNbZmllbGQubmFtZV0pXG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGNyZWF0ZUV4dHJhT3B0aW9uTGlzdChvcGVuQWZ0ZXJDcmVhdGU6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG5cdFx0dGhpcy5nZXRHbG9iYWxGaWxlQ2xhc3NGb3JGaWVsZHMoKTtcblx0XHR0aGlzLmdldFF1ZXJ5RmlsZUNsYXNzRm9yRmllbGRzKCk7XG5cdFx0dGhpcy5mZXRjaEZyb250bWF0dGVyRmllbGRzKCk7XG5cdFx0dGhpcy5mZXRjaElubGluZUZpZWxkcygpO1xuXHRcdGlmIChpc01lbnUodGhpcy5sb2NhdGlvbikpIHsgdGhpcy5sb2NhdGlvbi5hZGRTZXBhcmF0b3IoKTsgfTtcblx0XHRpZiAoaXNJbnNlcnRGaWVsZENvbW1hbmQodGhpcy5sb2NhdGlvbikpIHtcblx0XHRcdHRoaXMuYWRkRmllbGRBdEN1cnJlbnRQb3NpdGlvbk9wdGlvbigpO1xuXHRcdH0gZWxzZSBpZiAoaXNTdWdnZXN0KHRoaXMubG9jYXRpb24pKSB7XG5cdFx0XHR0aGlzLmJ1aWxkRmllbGRPcHRpb25zKCk7XG5cdFx0XHR0aGlzLmFkZEZpZWxkQXRDdXJyZW50UG9zaXRpb25PcHRpb24oKTtcblx0XHRcdHRoaXMuYWRkU2VjdGlvblNlbGVjdE1vZGFsT3B0aW9uKCk7XG5cdFx0XHR0aGlzLmFkZEZpZWxkQXRUaGVFbmRPZkZyb250bWF0dGVyT3B0aW9uKCk7XG5cdFx0XHRpZiAodGhpcy5maWxlQ2xhc3MpIHtcblx0XHRcdFx0Y29uc3QgZmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsID0gbmV3IEZpZWxkQ29tbWFuZFN1Z2dlc3RNb2RhbCh0aGlzLnBsdWdpbi5hcHApXG5cdFx0XHRcdGNvbnN0IG9wdGlvbnNMaXN0ID0gbmV3IEZpbGVDbGFzc09wdGlvbnNMaXN0KHRoaXMucGx1Z2luLCB0aGlzLmZpbGVDbGFzcy5nZXRDbGFzc0ZpbGUoKSwgZmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsKTtcblx0XHRcdFx0b3B0aW9uc0xpc3QuY3JlYXRlRXh0cmFPcHRpb25MaXN0KGZhbHNlKTtcblx0XHRcdFx0dGhpcy5sb2NhdGlvbi5vcHRpb25zLnB1c2goe1xuXHRcdFx0XHRcdGlkOiBcIm1hbmFnZV9maWxlQ2xhc3NfYXR0cmlidXRlc1wiLFxuXHRcdFx0XHRcdGFjdGlvbkxhYmVsOiBgPHNwYW4+TWFuYWdlIDxiPiR7dGhpcy5maWxlQ2xhc3MubmFtZX08L2I+IGZpbGVDbGFzcyBmaWVsZHM8L3NwYW4+YCxcblx0XHRcdFx0XHRhY3Rpb246ICgpID0+IHsgZmllbGRDb21tYW5kU3VnZ2VzdE1vZGFsLm9wZW4oKSB9LFxuXHRcdFx0XHRcdGljb246IFwid3JlbmNoXCJcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHRcdGlmIChvcGVuQWZ0ZXJDcmVhdGUpIHRoaXMubG9jYXRpb24ub3BlbigpO1xuXHRcdH0gZWxzZSBpZiAoaXNNZW51KHRoaXMubG9jYXRpb24pKSB7XG5cdFx0XHR0aGlzLmJ1aWxkRmllbGRPcHRpb25zKCk7XG5cdFx0XHR0aGlzLmFkZFNlY3Rpb25TZWxlY3RNb2RhbE9wdGlvbigpO1xuXHRcdFx0dGhpcy5hZGRGaWVsZEF0Q3VycmVudFBvc2l0aW9uT3B0aW9uKCk7XG5cdFx0XHR0aGlzLmFkZEZpZWxkQXRUaGVFbmRPZkZyb250bWF0dGVyT3B0aW9uKCk7XG5cdFx0XHRpZiAodGhpcy5maWxlQ2xhc3MpIHtcblx0XHRcdFx0Y29uc3QgZmlsZUNsYXNzT3B0aW9uc0xpc3QgPSBuZXcgRmlsZUNsYXNzT3B0aW9uc0xpc3QodGhpcy5wbHVnaW4sIHRoaXMuZmlsZUNsYXNzLmdldENsYXNzRmlsZSgpLCB0aGlzLmxvY2F0aW9uKVxuXHRcdFx0XHRmaWxlQ2xhc3NPcHRpb25zTGlzdC5jcmVhdGVFeHRyYU9wdGlvbkxpc3QoZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYnVpbGRGaWxlQ2xhc3NGaWVsZE9wdGlvbnMoZmllbGQ6IEZpZWxkLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0Y29uc3QgbW9kYWwgPSBuZXcgSW5wdXRNb2RhbChhcHAsIHRoaXMuZmlsZSwgZmllbGQsIHZhbHVlKTtcblx0XHRtb2RhbC50aXRsZUVsLnNldFRleHQoYENoYW5nZSBWYWx1ZSBmb3IgPCR7ZmllbGQubmFtZX0+YCk7XG5cdFx0aWYgKGlzTWVudSh0aGlzLmxvY2F0aW9uKSkge1xuXHRcdFx0dGhpcy5sb2NhdGlvbi5hZGRJdGVtKChpdGVtKSA9PiB7XG5cdFx0XHRcdGl0ZW0uc2V0VGl0bGUoYFVwZGF0ZSAke2ZpZWxkLm5hbWV9YCk7XG5cdFx0XHRcdGl0ZW0uc2V0SWNvbihcIndyZW5jaFwiKTtcblx0XHRcdFx0aXRlbS5vbkNsaWNrKCgpID0+IG1vZGFsLm9wZW4oKSk7XG5cdFx0XHRcdGl0ZW0uc2V0U2VjdGlvbihcIm1ldGFkYXRhLW1lbnVcIik7XG5cdFx0XHR9KVxuXHRcdH0gZWxzZSBpZiAoaXNTdWdnZXN0KHRoaXMubG9jYXRpb24pKSB7XG5cdFx0XHR0aGlzLmxvY2F0aW9uLm9wdGlvbnMucHVzaCh7XG5cdFx0XHRcdGlkOiBgdXBkYXRlXyR7ZmllbGQubmFtZX1gLFxuXHRcdFx0XHRhY3Rpb25MYWJlbDogYDxzcGFuPlVwZGF0ZSA8Yj4ke2ZpZWxkLm5hbWV9PC9iPjwvc3Bhbj5gLFxuXHRcdFx0XHRhY3Rpb246ICgpID0+IG1vZGFsLm9wZW4oKSxcblx0XHRcdFx0aWNvbjogRmllbGRJY29uW0ZpZWxkVHlwZS5JbnB1dF1cblx0XHRcdH0pO1xuXHRcdH07XG5cdH1cblxuXHRwcml2YXRlIGJ1aWxkRmllbGRPcHRpb25zKCk6IHZvaWQge1xuXHRcdE9iamVjdC5rZXlzKHRoaXMuYXR0cmlidXRlcykuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcblx0XHRcdGNvbnN0IHZhbHVlID0gdGhpcy5hdHRyaWJ1dGVzW2tleV07XG5cdFx0XHRjb25zdCBmaWVsZCA9IGdldEZpZWxkKHRoaXMucGx1Z2luLCBrZXksIHRoaXMuZmlsZUNsYXNzKTtcblx0XHRcdGlmIChmaWVsZCkge1xuXHRcdFx0XHRjb25zdCBmaWVsZE1hbmFnZXIgPSBuZXcgRmllbGRNYW5hZ2VyW2ZpZWxkLnR5cGVdKGZpZWxkKTtcblx0XHRcdFx0ZmllbGRNYW5hZ2VyLmFkZEZpZWxkT3B0aW9uKGtleSwgdmFsdWUsIHRoaXMucGx1Z2luLmFwcCwgdGhpcy5maWxlLCB0aGlzLmxvY2F0aW9uKTtcblx0XHRcdH0gZWxzZSBpZiAoa2V5ICE9PSBcImZpbGVcIiAmJiAoaXNTdWdnZXN0KHRoaXMubG9jYXRpb24pIHx8IGlzTWVudSh0aGlzLmxvY2F0aW9uKSkpIHtcblx0XHRcdFx0Y29uc3QgZGVmYXVsdEZpZWxkID0gbmV3IEZpZWxkKGtleSlcblx0XHRcdFx0ZGVmYXVsdEZpZWxkLnR5cGUgPSBGaWVsZFR5cGUuSW5wdXRcblx0XHRcdFx0aWYgKGtleSA9PT0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlsZUNsYXNzQWxpYXMpIHtcblx0XHRcdFx0XHR0aGlzLmJ1aWxkRmlsZUNsYXNzRmllbGRPcHRpb25zKGRlZmF1bHRGaWVsZCwgdmFsdWUpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgZmllbGRNYW5hZ2VyID0gbmV3IE1hbmFnZXJzLklucHV0KGRlZmF1bHRGaWVsZClcblx0XHRcdFx0XHRmaWVsZE1hbmFnZXIuYWRkRmllbGRPcHRpb24oa2V5LCB2YWx1ZSwgdGhpcy5wbHVnaW4uYXBwLCB0aGlzLmZpbGUsIHRoaXMubG9jYXRpb24pXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgYWRkU2VjdGlvblNlbGVjdE1vZGFsT3B0aW9uKCk6IHZvaWQge1xuXHRcdGNvbnN0IG1vZGFsID0gbmV3IGNob29zZVNlY3Rpb25Nb2RhbCh0aGlzLnBsdWdpbiwgdGhpcy5maWxlLCB0aGlzLmZpbGVDbGFzcyk7XG5cdFx0aWYgKGlzTWVudSh0aGlzLmxvY2F0aW9uKSkge1xuXHRcdFx0dGhpcy5sb2NhdGlvbi5hZGRJdGVtKChpdGVtKSA9PiB7XG5cdFx0XHRcdGl0ZW0uc2V0SWNvbihcImVudGVyXCIpO1xuXHRcdFx0XHRpdGVtLnNldFRpdGxlKFwiQWRkIGZpZWxkIGF0IHNlY3Rpb24uLi5cIik7XG5cdFx0XHRcdGl0ZW0ub25DbGljaygoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0bW9kYWwub3BlbigpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0aXRlbS5zZXRTZWN0aW9uKFwibWV0YWRhdGEtbWVudVwiKTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoaXNTdWdnZXN0KHRoaXMubG9jYXRpb24pKSB7XG5cdFx0XHR0aGlzLmxvY2F0aW9uLm9wdGlvbnMucHVzaCh7XG5cdFx0XHRcdGlkOiBcImFkZF9maWVsZF9hdF9zZWN0aW9uXCIsXG5cdFx0XHRcdGFjdGlvbkxhYmVsOiBcIkFkZCBmaWVsZCBhdCBzZWN0aW9uLi4uXCIsXG5cdFx0XHRcdGFjdGlvbjogKCkgPT4gbW9kYWwub3BlbigpLFxuXHRcdFx0XHRpY29uOiBcImVudGVyXCJcblx0XHRcdH0pXG5cdFx0fTtcblx0fTtcblxuXHRwcml2YXRlIGFkZEZpZWxkQXRUaGVFbmRPZkZyb250bWF0dGVyT3B0aW9uKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRDYWNoZSh0aGlzLmZpbGUucGF0aCk/LmZyb250bWF0dGVyKSB7XG5cdFx0XHRjb25zdCBsaW5lTnVtYmVyID0gdGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Q2FjaGUodGhpcy5maWxlLnBhdGgpIS5mcm9udG1hdHRlciEucG9zaXRpb24uZW5kLmxpbmUgLSAxXG5cdFx0XHRpZiAoaXNNZW51KHRoaXMubG9jYXRpb24pKSB7XG5cdFx0XHRcdHRoaXMubG9jYXRpb24uYWRkSXRlbSgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdGl0ZW0uc2V0SWNvbihcInBpblwiKTtcblx0XHRcdFx0XHRpdGVtLnNldFRpdGxlKFwiQWRkIGZpZWxkIGluIGZyb250bWF0dGVyXCIpO1xuXHRcdFx0XHRcdGl0ZW0ub25DbGljayhhc3luYyAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRGLm9wZW5GaWVsZE1vZGFsKHRoaXMucGx1Z2luLCB0aGlzLmZpbGUsIHVuZGVmaW5lZCwgXCJcIiwgbGluZU51bWJlciArIDEsIHRydWUsIGZhbHNlKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGl0ZW0uc2V0U2VjdGlvbihcIm1ldGFkYXRhLW1lbnVcIik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIGlmIChpc1N1Z2dlc3QodGhpcy5sb2NhdGlvbikpIHtcblx0XHRcdFx0dGhpcy5sb2NhdGlvbi5vcHRpb25zLnB1c2goe1xuXHRcdFx0XHRcdGlkOiBcImFkZF9maWVsZF9pbl9mcm9udG1hdHRlclwiLFxuXHRcdFx0XHRcdGFjdGlvbkxhYmVsOiBcIkFkZCBhIGZpZWxkIGluIGZyb250bWF0dGVyLi4uXCIsXG5cdFx0XHRcdFx0YWN0aW9uOiAoKSA9PiBGLm9wZW5GaWVsZE1vZGFsKFxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4sIHRoaXMuZmlsZSwgdW5kZWZpbmVkLCBcIlwiLCBsaW5lTnVtYmVyICsgMSwgdHJ1ZSwgZmFsc2UsIHRoaXMuZmlsZUNsYXNzKSxcblx0XHRcdFx0XHRpY29uOiBcInBpblwiXG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBhZGRGaWVsZEF0Q3VycmVudFBvc2l0aW9uT3B0aW9uKCk6IHZvaWQge1xuXHRcdGNvbnN0IGN1cnJlbnRWaWV3ID0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldylcblx0XHRjb25zdCBsaW5lTnVtYmVyID0gY3VycmVudFZpZXc/LmVkaXRvci5nZXRDdXJzb3IoKS5saW5lO1xuXHRcdGlmIChsaW5lTnVtYmVyICE9PSB1bmRlZmluZWQgJiYgdGhpcy5maWxlLnBhdGggPT0gY3VycmVudFZpZXc/LmZpbGUucGF0aCkge1xuXHRcdFx0bGV0IGluRnJvbnRtYXR0ZXI6IGJvb2xlYW4gPSBmYWxzZTtcblx0XHRcdGNvbnN0IGZyb250bWF0dGVyID0gdGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRoaXMuZmlsZSk/LmZyb250bWF0dGVyXG5cdFx0XHRpZiAoZnJvbnRtYXR0ZXIpIHtcblx0XHRcdFx0Y29uc3QgeyBwb3NpdGlvbjogeyBzdGFydCwgZW5kIH0gfSA9IGZyb250bWF0dGVyXG5cdFx0XHRcdGlmIChsaW5lTnVtYmVyID49IHN0YXJ0LmxpbmUgJiYgbGluZU51bWJlciA8IGVuZC5saW5lKSBpbkZyb250bWF0dGVyID0gdHJ1ZVxuXHRcdFx0fVxuXHRcdFx0aWYgKGlzTWVudSh0aGlzLmxvY2F0aW9uKSkge1xuXHRcdFx0XHR0aGlzLmxvY2F0aW9uLmFkZEl0ZW0oKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRpdGVtLnNldEljb24oXCJwaW5cIik7XG5cdFx0XHRcdFx0aXRlbS5zZXRUaXRsZShcIkFkZCBmaWVsZCBhdCBjdXJzb3JcIik7XG5cdFx0XHRcdFx0aXRlbS5vbkNsaWNrKChldnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdEYub3BlbkZpZWxkTW9kYWwoXG5cdFx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLCB0aGlzLmZpbGUsIHVuZGVmaW5lZCwgXCJcIiwgbGluZU51bWJlciwgaW5Gcm9udG1hdHRlciwgZmFsc2UsIHRoaXMuZmlsZUNsYXNzKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGl0ZW0uc2V0U2VjdGlvbihcIm1ldGFkYXRhLW1lbnVcIik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIGlmIChpc0luc2VydEZpZWxkQ29tbWFuZCh0aGlzLmxvY2F0aW9uKSkge1xuXHRcdFx0XHRGLm9wZW5GaWVsZE1vZGFsKFxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLCB0aGlzLmZpbGUsIHVuZGVmaW5lZCwgXCJcIiwgbGluZU51bWJlciwgaW5Gcm9udG1hdHRlciwgZmFsc2UsIHRoaXMuZmlsZUNsYXNzKTtcblx0XHRcdH0gZWxzZSBpZiAoaXNTdWdnZXN0KHRoaXMubG9jYXRpb24pKSB7XG5cdFx0XHRcdHRoaXMubG9jYXRpb24ub3B0aW9ucy5wdXNoKHtcblx0XHRcdFx0XHRpZDogXCJhZGRfZmllbGRfYXRfY3Vyc29yXCIsXG5cdFx0XHRcdFx0YWN0aW9uTGFiZWw6IFwiQWRkIGZpZWxkIGF0IGN1cnNvci4uLlwiLFxuXHRcdFx0XHRcdGFjdGlvbjogKCkgPT4gRi5vcGVuRmllbGRNb2RhbChcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLCB0aGlzLmZpbGUsIHVuZGVmaW5lZCwgXCJcIiwgbGluZU51bWJlciwgaW5Gcm9udG1hdHRlciwgZmFsc2UsIHRoaXMuZmlsZUNsYXNzKSxcblx0XHRcdFx0XHRpY29uOiBcInBpblwiXG5cdFx0XHRcdH0pXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxufTtcbiIsICJpbXBvcnQgRmllbGQgZnJvbSBcInNyYy9maWVsZHMvRmllbGRcIjtcbmltcG9ydCBGaWxlQ2xhc3NRdWVyeSBmcm9tIFwic3JjL2ZpbGVDbGFzcy9GaWxlQ2xhc3NRdWVyeVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhTWVudVNldHRpbmdzIHtcblx0cHJlc2V0RmllbGRzOiBBcnJheTxGaWVsZD47XG5cdGZpbGVDbGFzc1F1ZXJpZXM6IEFycmF5PEZpbGVDbGFzc1F1ZXJ5Pjtcblx0ZGlzcGxheUZpZWxkc0luQ29udGV4dE1lbnU6IGJvb2xlYW47XG5cdGdsb2JhbGx5SWdub3JlZEZpZWxkczogQXJyYXk8c3RyaW5nPjtcblx0Y2xhc3NGaWxlc1BhdGg6IHN0cmluZztcblx0aXNBdXRvc3VnZ2VzdEVuYWJsZWQ6IGJvb2xlYW47XG5cdGZpbGVDbGFzc0FsaWFzOiBzdHJpbmc7XG5cdHNldHRpbmdzVmVyc2lvbj86IG51bWJlcjtcblx0Z2xvYmFsRmlsZUNsYXNzPzogc3RyaW5nO1xuXHRmaXJzdERheU9mV2VlazogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTWV0YWRhdGFNZW51U2V0dGluZ3MgPSB7XG5cdHByZXNldEZpZWxkczogW10sXG5cdGZpbGVDbGFzc1F1ZXJpZXM6IFtdLFxuXHRkaXNwbGF5RmllbGRzSW5Db250ZXh0TWVudTogdHJ1ZSxcblx0Z2xvYmFsbHlJZ25vcmVkRmllbGRzOiBbXSxcblx0Y2xhc3NGaWxlc1BhdGg6IFwiXCIsXG5cdGlzQXV0b3N1Z2dlc3RFbmFibGVkOiB0cnVlLFxuXHRmaWxlQ2xhc3NBbGlhczogXCJmaWxlQ2xhc3NcIixcblx0c2V0dGluZ3NWZXJzaW9uOiB1bmRlZmluZWQsXG5cdGdsb2JhbEZpbGVDbGFzczogdW5kZWZpbmVkLFxuXHRmaXJzdERheU9mV2VlazogMVxufTsiLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBCdXR0b25Db21wb25lbnQsIFRvZ2dsZUNvbXBvbmVudCwgTW9kYWwsIERyb3Bkb3duQ29tcG9uZW50LCBtb21lbnQsIHNldEljb24gfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCBGaWVsZFNldHRpbmdzTW9kYWwgZnJvbSBcInNyYy9zZXR0aW5ncy9GaWVsZFNldHRpbmdzTW9kYWxcIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwic3JjL2ZpZWxkcy9GaWVsZFwiO1xuaW1wb3J0IEZpZWxkU2V0dGluZyBmcm9tIFwic3JjL3NldHRpbmdzL0ZpZWxkU2V0dGluZ1wiO1xuaW1wb3J0IHsgRm9sZGVyU3VnZ2VzdCB9IGZyb20gXCJzcmMvc3VnZ2VzdGVyL0ZvbGRlclN1Z2dlc3RlclwiO1xuaW1wb3J0IHsgRmlsZVN1Z2dlc3QgfSBmcm9tIFwic3JjL3N1Z2dlc3Rlci9GaWxlU3VnZ2VzdGVyXCI7XG5pbXBvcnQgRmlsZUNsYXNzUXVlcnkgZnJvbSBcInNyYy9maWxlQ2xhc3MvRmlsZUNsYXNzUXVlcnlcIjtcbmltcG9ydCBGaWxlQ2xhc3NRdWVyeVNldHRpbmdzTW9kYWwgZnJvbSBcIi4vRmlsZUNsYXNzUXVlcnlTZXR0aW5nTW9kYWxcIjtcbmltcG9ydCBGaWxlQ2xhc3NRdWVyeVNldHRpbmcgZnJvbSBcIi4vRmlsZUNsYXNzUXVlcnlTZXR0aW5nXCI7XG5cbmNsYXNzIFNldHRpbmdzTWlncmF0aW9uQ29uZmlybU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXG5cdHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG5cdHByaXZhdGUgdGFiOiBNZXRhZGF0YU1lbnVTZXR0aW5nVGFiO1xuXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjogTWV0YWRhdGFNZW51LCB0YWI6IE1ldGFkYXRhTWVudVNldHRpbmdUYWIpIHtcblx0XHRzdXBlcihwbHVnaW4uYXBwKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0XHR0aGlzLnRhYiA9IHRhYjtcblx0fTtcblxuXHRvbk9wZW4oKTogdm9pZCB7XG5cblx0XHR0aGlzLnRpdGxlRWwuc2V0VGV4dChcIkNvbmZpcm1cIik7XG5cdFx0Y29uc3QgYm9keSA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdih7XG5cdFx0XHRjbHM6IFwibW9kYWwtdGV4dC1kYW5nZXJcIlxuXHRcdH0pO1xuXHRcdGJvZHkuc2V0VGV4dChcIlRoaXMgd2lsbCBlcmFzZSBjdXJyZW50IHNldHRpbmdzLiBBcmUgeW91IHN1cmU/XCIpO1xuXHRcdGNvbnN0IGNvbmZpcm1CdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KHRoaXMuY29udGVudEVsKTtcblx0XHRjb25maXJtQnV0dG9uLnNldEljb24oXCJjaGVja1wiKTtcblx0XHRjb25maXJtQnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xuXHRcdFx0Ly9AdHMtaWdub3JlXG5cdFx0XHRpZiAodGhpcy5hcHAucGx1Z2lucy5wbHVnaW5zLmhhc093blByb3BlcnR5KFwic3VwZXJjaGFyZ2VkLWxpbmtzLW9ic2lkaWFuXCIpKSB7XG5cdFx0XHRcdC8vQHRzLWlnbm9yZVxuXHRcdFx0XHRsZXQgc2V0dGluZ3MgPSB0aGlzLmFwcC5wbHVnaW5zLnBsdWdpbnNbXCJzdXBlcmNoYXJnZWQtbGlua3Mtb2JzaWRpYW5cIl0uc2V0dGluZ3M7XG5cdFx0XHRcdC8vZGVlcCBjb3B5aW5nIHByZXNldEZpZWxkcyBpbiBpbml0aWFsUHJvcGVydHlcblx0XHRcdFx0dGhpcy5wbHVnaW4uaW5pdGlhbFByb3BlcnRpZXMgPSBbXTtcblx0XHRcdFx0c2V0dGluZ3MucHJlc2V0RmllbGRzLmZvckVhY2goKHByb3A6IEZpZWxkKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgZmllbGQgPSBuZXcgRmllbGQoKTtcblx0XHRcdFx0XHRPYmplY3QuYXNzaWduKGZpZWxkLCBwcm9wKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5pbml0aWFsUHJvcGVydGllcy5wdXNoKGZpZWxkKTtcblx0XHRcdFx0fSlcblxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0dGhpcy5jbG9zZSgpO1xuXHRcdFx0fTtcblx0XHR9KTtcblx0fTtcblxuXHRvbkNsb3NlKCk6IHZvaWQge1xuXHRcdHRoaXMudGFiLmRpc3BsYXkoKTtcblx0fTtcbn07XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXRhZGF0YU1lbnVTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogTWV0YWRhdGFNZW51KSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9O1xuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0bGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdC8qIFxuXHRcdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0R2xvYmFsIFNldHRpbmdzIFxuXHRcdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0Ki9cblx0XHRjb25zdCBnbG9iYWxTZXR0aW5ncyA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdkaXYnKVxuXHRcdGdsb2JhbFNldHRpbmdzLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0dsb2JhbCBzZXR0aW5ncycsIGNsczogXCJtZXRhZGF0YS1tZW51LXNldHRpbmctc2VjdGlvbi1oZWFkZXJcIiB9KTtcblx0XHRnbG9iYWxTZXR0aW5ncy5jcmVhdGVFbCgnZGl2Jywge1xuXHRcdFx0Y2xzOiBcInNldHRpbmctaXRlbS1kZXNjcmlwdGlvbiBtZXRhZGF0YS1tZW51LXNldHRpbmctc2VjdGlvbi1kZXNjXCIsXG5cdFx0XHR0ZXh0OiBcIkdsb2JhbCBzZXR0aW5ncyB0byBhcHBseSB0byB5b3VyIHdob2xlIHZhdWx0XCJcblx0XHR9KVxuXG5cdFx0LyogTWFuYWdlIG1lbnUgb3B0aW9ucyBkaXNwbGF5Ki9cblx0XHRuZXcgU2V0dGluZyhnbG9iYWxTZXR0aW5ncylcblx0XHRcdC5zZXROYW1lKFwiRGlzcGxheSBmaWVsZCBvcHRpb25zIGluIGNvbnRleHQgbWVudVwiKVxuXHRcdFx0LnNldERlc2MoXCJDaG9vc2UgdG8gc2hvdyBvciBoaWRlIGZpZWxkcyBvcHRpb25zIGluIHRoZSBjb250ZXh0IG1lbnUgb2YgYSBsaW5rIG9yIGEgZmlsZVwiKVxuXHRcdFx0LmFkZFRvZ2dsZSgodG9nZ2xlOiBUb2dnbGVDb21wb25lbnQpID0+IHtcblx0XHRcdFx0dG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRpc3BsYXlGaWVsZHNJbkNvbnRleHRNZW51KVxuXHRcdFx0XHR0b2dnbGUub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmRpc3BsYXlGaWVsZHNJbkNvbnRleHRNZW51ID0gdmFsdWVcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdC8qIEV4Y2x1ZGUgRmllbGRzIGZyb20gY29udGV4dCBtZW51Ki9cblx0XHRuZXcgU2V0dGluZyhnbG9iYWxTZXR0aW5ncylcblx0XHRcdC5zZXROYW1lKCdHbG9iYWxseSBpZ25vcmVkIGZpZWxkcycpXG5cdFx0XHQuc2V0RGVzYygnRmllbGRzIHRvIGJlIGlnbm9yZWQgYnkgdGhlIHBsdWdpbiB3aGVuIGFkZGluZyBvcHRpb25zIHRvIHRoZSBjb250ZXh0IG1lbnUnKVxuXHRcdFx0LmFkZFRleHRBcmVhKCh0ZXh0KSA9PiB7XG5cdFx0XHRcdHRleHRcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIGZpZWxkcyBhcyBzdHJpbmcsIGNvbW1hIHNlcGFyYXRlZCcpXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmdsb2JhbGx5SWdub3JlZEZpZWxkcy5qb2luKCcsICcpKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmdsb2JhbGx5SWdub3JlZEZpZWxkcyA9IHZhbHVlLnNwbGl0KCcsJykubWFwKGl0ZW0gPT4gaXRlbS50cmltKCkpO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdHRleHQuaW5wdXRFbC5yb3dzID0gNjtcblx0XHRcdFx0dGV4dC5pbnB1dEVsLmNvbHMgPSAyNTtcblx0XHRcdH0pO1xuXG5cblx0XHQvKiBGaXJzdCBkYXkgb2Ygd2VlayAoZm9yIERhdGUgRmllbGRzKi9cblx0XHRuZXcgU2V0dGluZyhnbG9iYWxTZXR0aW5ncylcblx0XHRcdC5zZXROYW1lKCdGaXJzdCBkYXkgb2Ygd2VlaycpXG5cdFx0XHQuc2V0RGVzYygnRm9yIGRhdGUgZmllbGRzLCB3aGljaCBkYXkgdGhlIGRhdGUgcGlja2VyXFwncyB3ZWVrIHNob3VsZCBzdGFydCB3aXRoJylcblx0XHRcdC5hZGREcm9wZG93bigoY2I6IERyb3Bkb3duQ29tcG9uZW50KSA9PiB7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMjsgaSsrKSB7XG5cdFx0XHRcdFx0Y2IuYWRkT3B0aW9uKGkudG9TdHJpbmcoKSwgbW9tZW50KCkuZGF5KGkpLmZvcm1hdChcImRkZGRcIikpXG5cdFx0XHRcdH1cblx0XHRcdFx0Y2Iuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlyc3REYXlPZldlZWsudG9TdHJpbmcoKSB8fCBcIjFcIilcblx0XHRcdFx0Y2Iub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlyc3REYXlPZldlZWsgPSBwYXJzZUludCh2YWx1ZSk7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHQvKiBcblx0XHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdE1hbmFnaW5nIHByZWRlZmluZWQgb3B0aW9ucyBmb3IgcHJvcGVydGllcyBcblx0XHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdCovXG5cdFx0LyogQWRkIG5ldyBwcm9wZXJ0eSBmb3Igd2hpY2ggd2Ugd2FudCB0byBwcmVzZXQgb3B0aW9ucyovXG5cdFx0Y29uc3QgcHJlc2V0RmllbGRzU2V0dGluZ3MgPSBjb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiKTtcblx0XHRjb25zdCBwcmVzZXRGaWVsZHNTZXR0aW5nSGVhZGVyQ29udGFpbmVyID0gcHJlc2V0RmllbGRzU2V0dGluZ3MuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwibWV0YWRhdGEtbWVudS1zZXR0aW5nLXNlY3Rpb24taGVhZGVyLWNvbnRhaW5lclwiIH0pO1xuXHRcdGNvbnN0IHByZXNldEZpZWxkc1NldHRpbmdIZWFkZXJUZXh0Q29udGFpbmVyID0gcHJlc2V0RmllbGRzU2V0dGluZ0hlYWRlckNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJtZXRhZGF0YS1tZW51LXNldHRpbmctc2VjdGlvbi1oZWFkZXItdGV4dC1jb250YWluZXJcIiB9KTtcblx0XHRwcmVzZXRGaWVsZHNTZXR0aW5nSGVhZGVyVGV4dENvbnRhaW5lci5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdQcmVzZXQgRmllbGRzIHNldHRpbmdzJywgY2xzOiBcIm1ldGFkYXRhLW1lbnUtc2V0dGluZy1zZWN0aW9uLWhlYWRlclwiIH0pO1xuXHRcdHByZXNldEZpZWxkc1NldHRpbmdIZWFkZXJUZXh0Q29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7XG5cdFx0XHRjbHM6IFwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uIG1ldGFkYXRhLW1lbnUtc2V0dGluZy1zZWN0aW9uLWRlc2NcIixcblx0XHRcdHRleHQ6IFwiTWFuYWdlIGdsb2JhbGx5IHByZWRlZmluZWQgdHlwZSBhbmQgb3B0aW9ucyBmb3IgYSBmaWVsZCB0aHJvdWdob3V0IHlvdXIgd2hvbGUgdmF1bHRcIlxuXHRcdH0pO1xuXHRcdGNvbnN0IHByZXNldEZpZWxkc1NldHRpbmdzQ29udGFpbmVyU2hvd0J1dHRvbkNvbnRhaW5lciA9IHByZXNldEZpZWxkc1NldHRpbmdIZWFkZXJDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwic2V0dGluZy1pdGVtLWNvbnRyb2xcIiB9KTtcblx0XHRjb25zdCBwcmVzZXRGaWVsZHNTZXR0aW5nc0NvbnRhaW5lclNob3dCdXR0b24gPSBwcmVzZXRGaWVsZHNTZXR0aW5nc0NvbnRhaW5lclNob3dCdXR0b25Db250YWluZXIuY3JlYXRlRWwoXCJidXR0b25cIik7XG5cdFx0cHJlc2V0RmllbGRzU2V0dGluZ3NDb250YWluZXJTaG93QnV0dG9uLmFkZENsYXNzKFwic2V0dGluZy1pdGVtLWNvbnRyb2xcIik7XG5cblx0XHRjb25zdCBwcmVzZXRGaWVsZHNTZXR0aW5nc0NvbnRhaW5lciA9IHByZXNldEZpZWxkc1NldHRpbmdzLmNyZWF0ZUVsKFwiZGl2XCIpO1xuXHRcdG5ldyBTZXR0aW5nKHByZXNldEZpZWxkc1NldHRpbmdzQ29udGFpbmVyKVxuXHRcdFx0LnNldE5hbWUoXCJBZGQgTmV3IEZpZWxkIFNldHRpbmdcIilcblx0XHRcdC5zZXREZXNjKFwiQWRkIGEgbmV3IEZyb250bWF0dGVyIHByb3BlcnR5IGZvciB3aGljaCB5b3Ugd2FudCBwcmVzZXQgb3B0aW9ucy5cIilcblx0XHRcdC5hZGRCdXR0b24oKGJ1dHRvbjogQnV0dG9uQ29tcG9uZW50KTogQnV0dG9uQ29tcG9uZW50ID0+IHtcblx0XHRcdFx0cmV0dXJuIGJ1dHRvblxuXHRcdFx0XHRcdC5zZXRUb29sdGlwKFwiQWRkIE5ldyBQcm9wZXJ0eSBNYW5hZ2VyXCIpXG5cdFx0XHRcdFx0LnNldEJ1dHRvblRleHQoXCIrXCIpXG5cdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdFx0bGV0IG1vZGFsID0gbmV3IEZpZWxkU2V0dGluZ3NNb2RhbCh0aGlzLmFwcCwgdGhpcy5wbHVnaW4sIHByZXNldEZpZWxkc1NldHRpbmdzQ29udGFpbmVyKTtcblx0XHRcdFx0XHRcdG1vZGFsLm9wZW4oKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0LyogTWFuYWdlZCBwcm9wZXJ0aWVzIHRoYXQgY3VycmVudGx5IGhhdmUgcHJlc2V0IG9wdGlvbnMgKi9cblx0XHR0aGlzLnBsdWdpbi5pbml0aWFsUHJvcGVydGllcy5mb3JFYWNoKHByb3AgPT4ge1xuXHRcdFx0Y29uc3QgcHJvcGVydHkgPSBuZXcgRmllbGQoKTtcblx0XHRcdE9iamVjdC5hc3NpZ24ocHJvcGVydHksIHByb3ApO1xuXHRcdFx0bmV3IEZpZWxkU2V0dGluZyhwcmVzZXRGaWVsZHNTZXR0aW5nc0NvbnRhaW5lciwgcHJvcGVydHksIHRoaXMuYXBwLCB0aGlzLnBsdWdpbik7XG5cdFx0fSk7XG5cblx0XHRwcmVzZXRGaWVsZHNTZXR0aW5nc0NvbnRhaW5lci5pc1Nob3duKCkgP1xuXHRcdFx0c2V0SWNvbihwcmVzZXRGaWVsZHNTZXR0aW5nc0NvbnRhaW5lclNob3dCdXR0b24sIFwiZG91YmxlLXVwLWFycm93LWdseXBoXCIpIDpcblx0XHRcdHNldEljb24ocHJlc2V0RmllbGRzU2V0dGluZ3NDb250YWluZXJTaG93QnV0dG9uLCBcImRvdWJsZS1kb3duLWFycm93LWdseXBoXCIpO1xuXHRcdHByZXNldEZpZWxkc1NldHRpbmdzQ29udGFpbmVyU2hvd0J1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0cHJlc2V0RmllbGRzU2V0dGluZ3NDb250YWluZXIuaXNTaG93bigpID9cblx0XHRcdFx0cHJlc2V0RmllbGRzU2V0dGluZ3NDb250YWluZXIuaGlkZSgpIDpcblx0XHRcdFx0cHJlc2V0RmllbGRzU2V0dGluZ3NDb250YWluZXIuc2hvdygpO1xuXHRcdFx0cHJlc2V0RmllbGRzU2V0dGluZ3NDb250YWluZXIuaXNTaG93bigpID9cblx0XHRcdFx0c2V0SWNvbihwcmVzZXRGaWVsZHNTZXR0aW5nc0NvbnRhaW5lclNob3dCdXR0b24sIFwiZG91YmxlLXVwLWFycm93LWdseXBoXCIpIDpcblx0XHRcdFx0c2V0SWNvbihwcmVzZXRGaWVsZHNTZXR0aW5nc0NvbnRhaW5lclNob3dCdXR0b24sIFwiZG91YmxlLWRvd24tYXJyb3ctZ2x5cGhcIik7XG5cdFx0fVxuXG5cdFx0LyogXG5cdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRNYW5hZ2luZyBmaWxlQ2xhc3MgXG5cdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHQqL1xuXG5cdFx0LyogU2V0IGNsYXNzRmlsZXMgUGF0aCovXG5cdFx0Y29uc3QgY2xhc3NGaWxlc1NldHRpbmdzID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJkaXZcIilcblx0XHRjb25zdCBjbGFzc0ZpbGVzU2V0dGluZ3NIZWFkZXJDb250YWluZXIgPSBjbGFzc0ZpbGVzU2V0dGluZ3MuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwibWV0YWRhdGEtbWVudS1zZXR0aW5nLXNlY3Rpb24taGVhZGVyLWNvbnRhaW5lclwiIH0pO1xuXHRcdGNvbnN0IGNsYXNzRmlsZXNTZXR0aW5nc0hlYWRlclRleHRDb250YWluZXIgPSBjbGFzc0ZpbGVzU2V0dGluZ3NIZWFkZXJDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwibWV0YWRhdGEtbWVudS1zZXR0aW5nLXNlY3Rpb24taGVhZGVyLXRleHQtY29udGFpbmVyXCIgfSk7XG5cdFx0Y2xhc3NGaWxlc1NldHRpbmdzSGVhZGVyVGV4dENvbnRhaW5lci5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdGaWxlQ2xhc3Mgc2V0dGluZ3MnLCBjbHM6IFwibWV0YWRhdGEtbWVudS1zZXR0aW5nLXNlY3Rpb24taGVhZGVyXCIgfSk7XG5cdFx0Y2xhc3NGaWxlc1NldHRpbmdzSGVhZGVyVGV4dENvbnRhaW5lci5jcmVhdGVFbCgnZGl2Jywge1xuXHRcdFx0Y2xzOiBcInNldHRpbmctaXRlbS1kZXNjcmlwdGlvbiBtZXRhZGF0YS1tZW51LXNldHRpbmctc2VjdGlvbi1kZXNjXCIsXG5cdFx0XHR0ZXh0OiBcIk1hbmFnZSBmaWxlQ2xhc3MgZm9sZGVyIGFuZCBhbGlhcy4gXCIgK1xuXHRcdFx0XHRcIldoZW4gYSBub3RlIGhhcyBhIGZpZWxDbGFzcyBkZWZpbmVkLCBmaWxlQ2xhc3MgZmllbGQgcHJvcGVydGllcyB3aWxsIG92ZXJyaWRlIGdsb2JhbCBwcmVzZXQgZmllbGRzIHNldHRpbmdzIGZvciB0aGUgc2FtZSBmaWVsZCBuYW1lXCJcblx0XHR9KTtcblxuXHRcdGNvbnN0IGNsYXNzRmlsZXNTZXR0aW5nc0NvbnRhaW5lclNob3dCdXR0b25Db250YWluZXIgPSBjbGFzc0ZpbGVzU2V0dGluZ3NIZWFkZXJDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwic2V0dGluZy1pdGVtLWNvbnRyb2xcIiB9KTtcblx0XHRjb25zdCBjbGFzc0ZpbGVzU2V0dGluZ3NDb250YWluZXJTaG93QnV0dG9uID0gY2xhc3NGaWxlc1NldHRpbmdzQ29udGFpbmVyU2hvd0J1dHRvbkNvbnRhaW5lci5jcmVhdGVFbChcImJ1dHRvblwiKTtcblxuXHRcdGNsYXNzRmlsZXNTZXR0aW5nc0NvbnRhaW5lclNob3dCdXR0b24uYWRkQ2xhc3MoXCJzZXR0aW5nLWl0ZW0tY29udHJvbFwiKTtcblx0XHRjb25zdCBjbGFzc0ZpbGVzU2V0dGluZ3NDb250YWluZXIgPSBjbGFzc0ZpbGVzU2V0dGluZ3MuY3JlYXRlRWwoXCJkaXZcIik7XG5cblx0XHRuZXcgU2V0dGluZyhjbGFzc0ZpbGVzU2V0dGluZ3NDb250YWluZXIpXG5cdFx0XHQuc2V0TmFtZSgnY2xhc3MgRmlsZXMgcGF0aCcpXG5cdFx0XHQuc2V0RGVzYygnUGF0aCB0byB0aGUgZmlsZXMgY29udGFpbmluZyB0aGUgYXV0aG9yaXplZCBmaWVsZHMgZm9yIGEgdHlwZSBvZiBub3RlJylcblx0XHRcdC5hZGRTZWFyY2goKGNmcykgPT4ge1xuXHRcdFx0XHRuZXcgRm9sZGVyU3VnZ2VzdCh0aGlzLmFwcCwgY2ZzLmlucHV0RWwpO1xuXHRcdFx0XHRjZnMuc2V0UGxhY2Vob2xkZXIoXCJGb2xkZXJcIilcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY2xhc3NGaWxlc1BhdGgpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKChuZXdfZm9sZGVyKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCBuZXdQYXRoID0gbmV3X2ZvbGRlci5lbmRzV2l0aChcIi9cIikgPyBuZXdfZm9sZGVyIDogbmV3X2ZvbGRlciArIFwiL1wiO1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY2xhc3NGaWxlc1BhdGggPSBuZXdQYXRoO1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0Y2ZzLmNvbnRhaW5lckVsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1zZXR0aW5nLWZpbGVDbGFzcy1zZWFyY2hcIilcblx0XHRcdH0pO1xuXG5cdFx0bmV3IFNldHRpbmcoY2xhc3NGaWxlc1NldHRpbmdzQ29udGFpbmVyKVxuXHRcdFx0LnNldE5hbWUoJ2ZpbGVDbGFzcyBmaWVsZCBhbGlhcycpXG5cdFx0XHQuc2V0RGVzYygnQ2hvb3NlIGFub3RoZXIgbmFtZSBmb3IgZmlsZUNsYXNzIGZpZWxkIGluIGZyb250bWF0dGVyIChleGFtcGxlOiBDYXRlZ29yeSwgdHlwZSwgLi4uJylcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PiB7XG5cdFx0XHRcdHRleHRcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlsZUNsYXNzQWxpYXMpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlsZUNsYXNzQWxpYXMgPSB2YWx1ZSB8fCBcImZpbGVDbGFzc1wiO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdC8qIFxuXG5cdFx0LyogU2V0IGdsb2JhbCBmaWxlQ2xhc3MqL1xuXHRcdG5ldyBTZXR0aW5nKGNsYXNzRmlsZXNTZXR0aW5nc0NvbnRhaW5lcilcblx0XHRcdC5zZXROYW1lKCdnbG9iYWwgZmlsZUNsYXNzJylcblx0XHRcdC5zZXREZXNjKCdDaG9vc2Ugb25lIGZpbGVDbGFzcyB0byBiZSBhcHBsaWNhYmxlIHRvIGFsbCBmaWxlcyAoZXZlbiBpdCBpcyBub3QgcHJlc2VudCBhcyBhIGZpbGVDbGFzcyBhdHRyaWJ1dGUgaW4gdGhlaXIgZnJvbnRtYXR0ZXIpLiBUaGlzIHdpbGwgb3ZlcnJpZGUgdGhlIHByZXNldCBGaWVsZHMgZGVmaW5lZCBhYm92ZScpXG5cdFx0XHQuYWRkU2VhcmNoKChjZnMpID0+IHtcblx0XHRcdFx0bmV3IEZpbGVTdWdnZXN0KFxuXHRcdFx0XHRcdHRoaXMuYXBwLFxuXHRcdFx0XHRcdGNmcy5pbnB1dEVsLFxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLFxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNsYXNzRmlsZXNQYXRoXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGNmcy5zZXRQbGFjZWhvbGRlcihcIkdsb2JhbCBmaWxlQ2xhc3NcIilcblx0XHRcdFx0Y2ZzLnNldFZhbHVlKFxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmdsb2JhbEZpbGVDbGFzcyA/XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jbGFzc0ZpbGVzUGF0aCArIHRoaXMucGx1Z2luLnNldHRpbmdzLmdsb2JhbEZpbGVDbGFzcyArIFwiLm1kXCIgOlxuXHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHQpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKChuZXdQYXRoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5nbG9iYWxGaWxlQ2xhc3MgPSBuZXdQYXRoID9cblx0XHRcdFx0XHRcdFx0bmV3UGF0aC5zcGxpdCgnXFxcXCcpLnBvcCgpIS5zcGxpdCgnLycpLnBvcCgpPy5yZXBsYWNlKFwiLm1kXCIsIFwiXCIpIDpcblx0XHRcdFx0XHRcdFx0XCJcIjtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdGNmcy5jb250YWluZXJFbC5hZGRDbGFzcyhcIm1ldGFkYXRhLW1lbnUtc2V0dGluZy1maWxlQ2xhc3Mtc2VhcmNoXCIpXG5cdFx0XHR9KVxuXG5cdFx0LyogXG5cdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRNYW5hZ2luZyBwcmVkZWZpbmVkIGZpbGVDbGFzcyBmb3IgcXVlcnkncyBtYXRjaGluZyBmaWxlcyBcblx0XHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdCovXG5cdFx0LyogQWRkIG5ldyBxdWVyeSBmb3Igd2hpY2ggbWF0Y2hpbmcgZmlsZXMgd2lsbCBiZSBhcHBsaWVkIHRoZSBmaWxlQ2xhc3MqL1xuXHRcdGNvbnN0IHF1ZXJ5RmlsZUNsYXNzU2V0dGluZ3MgPSBjbGFzc0ZpbGVzU2V0dGluZ3NDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIilcblx0XHRxdWVyeUZpbGVDbGFzc1NldHRpbmdzLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ1F1ZXJ5IGJhc2VkIEZpbGVDbGFzcyBzZXR0aW5ncycsIGNsczogXCJtZXRhZGF0YS1tZW51LXNldHRpbmctc2VjdGlvbi1oZWFkZXJcIiB9KTtcblx0XHRxdWVyeUZpbGVDbGFzc1NldHRpbmdzLmNyZWF0ZUVsKCdkaXYnLCB7XG5cdFx0XHRjbHM6IFwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uIG1ldGFkYXRhLW1lbnUtc2V0dGluZy1zZWN0aW9uLWRlc2NcIixcblx0XHRcdHRleHQ6IFwiTWFuYWdlIGdsb2JhbGx5IHByZWRlZmluZWQgdHlwZSBhbmQgb3B0aW9ucyBmb3IgYSBmaWVsZCBtYXRjaGluZyB0aGlzIHF1ZXJ5XCJcblx0XHR9KVxuXHRcdG5ldyBTZXR0aW5nKHF1ZXJ5RmlsZUNsYXNzU2V0dGluZ3MpXG5cdFx0XHQuc2V0TmFtZShcIkFkZCBOZXcgUXVlcnkgZm9yIGZpbGVDbGFzc1wiKVxuXHRcdFx0LnNldERlc2MoXCJBZGQgYSBuZXcgcXVlcnkgYW5kIGEgRmlsZUNsYXNzIHRoYXQgd2lsbCBhcHBseSB0byBmaWxlcyBtYXRjaGluZyB0aGlzIHF1ZXJ5LlwiKVxuXHRcdFx0LmFkZEJ1dHRvbigoYnV0dG9uOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQgPT4ge1xuXHRcdFx0XHRyZXR1cm4gYnV0dG9uXG5cdFx0XHRcdFx0LnNldFRvb2x0aXAoXCJBZGQgTmV3IFByb3BlcnR5IE1hbmFnZXJcIilcblx0XHRcdFx0XHQuc2V0QnV0dG9uVGV4dChcIitcIilcblx0XHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgbW9kYWwgPSBuZXcgRmlsZUNsYXNzUXVlcnlTZXR0aW5nc01vZGFsKHRoaXMuYXBwLCB0aGlzLnBsdWdpbiwgcXVlcnlGaWxlQ2xhc3NTZXR0aW5ncyk7XG5cdFx0XHRcdFx0XHRtb2RhbC5vcGVuKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdC8qIE1hbmFnZWQgcHJvcGVydGllcyB0aGF0IGN1cnJlbnRseSBoYXZlIHByZXNldCBvcHRpb25zICovXG5cdFx0dGhpcy5wbHVnaW4uaW5pdGlhbEZpbGVDbGFzc1F1ZXJpZXNcblx0XHRcdC5mb3JFYWNoKHF1ZXJ5ID0+IHtcblx0XHRcdFx0Y29uc3QgZmlsZUNsYXNzUXVlcnkgPSBuZXcgRmlsZUNsYXNzUXVlcnkoKTtcblx0XHRcdFx0T2JqZWN0LmFzc2lnbihmaWxlQ2xhc3NRdWVyeSwgcXVlcnkpO1xuXHRcdFx0XHRuZXcgRmlsZUNsYXNzUXVlcnlTZXR0aW5nKHF1ZXJ5RmlsZUNsYXNzU2V0dGluZ3MsIGZpbGVDbGFzc1F1ZXJ5LCB0aGlzLmFwcCwgdGhpcy5wbHVnaW4pO1xuXHRcdFx0fSk7XG5cblx0XHRjbGFzc0ZpbGVzU2V0dGluZ3NDb250YWluZXIuaXNTaG93bigpID9cblx0XHRcdHNldEljb24oY2xhc3NGaWxlc1NldHRpbmdzQ29udGFpbmVyU2hvd0J1dHRvbiwgXCJkb3VibGUtdXAtYXJyb3ctZ2x5cGhcIikgOlxuXHRcdFx0c2V0SWNvbihjbGFzc0ZpbGVzU2V0dGluZ3NDb250YWluZXJTaG93QnV0dG9uLCBcImRvdWJsZS1kb3duLWFycm93LWdseXBoXCIpO1xuXHRcdGNsYXNzRmlsZXNTZXR0aW5nc0NvbnRhaW5lclNob3dCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdGNsYXNzRmlsZXNTZXR0aW5nc0NvbnRhaW5lci5pc1Nob3duKCkgP1xuXHRcdFx0XHRjbGFzc0ZpbGVzU2V0dGluZ3NDb250YWluZXIuaGlkZSgpIDpcblx0XHRcdFx0Y2xhc3NGaWxlc1NldHRpbmdzQ29udGFpbmVyLnNob3coKTtcblx0XHRcdGNsYXNzRmlsZXNTZXR0aW5nc0NvbnRhaW5lci5pc1Nob3duKCkgP1xuXHRcdFx0XHRzZXRJY29uKGNsYXNzRmlsZXNTZXR0aW5nc0NvbnRhaW5lclNob3dCdXR0b24sIFwiZG91YmxlLXVwLWFycm93LWdseXBoXCIpIDpcblx0XHRcdFx0c2V0SWNvbihjbGFzc0ZpbGVzU2V0dGluZ3NDb250YWluZXJTaG93QnV0dG9uLCBcImRvdWJsZS1kb3duLWFycm93LWdseXBoXCIpO1xuXHRcdH1cblxuXHRcdC8qIFxuXHRcdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0TWlncmF0aW9uIHNldHRpbmdzIFxuXHRcdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0Ki9cblx0XHRjb25zdCBtaWdyYXRlU2V0dGluZ3MgPSBjb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiKVxuXHRcdG1pZ3JhdGVTZXR0aW5ncy5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdNaWdyYXRlJyB9KTtcblxuXHRcdC8qIEFkZCBuZXcgcHJvcGVydHkgZm9yIHdoaWNoIHdlIHdhbnQgdG8gcHJlc2V0IG9wdGlvbnMqL1xuXHRcdG5ldyBTZXR0aW5nKG1pZ3JhdGVTZXR0aW5ncylcblx0XHRcdC5zZXROYW1lKFwiQ29weSBzZXR0aW5ncyBmcm9tIHN1cGVyY2hhcmdlZCBsaW5rcyBwbHVnaW5cIilcblx0XHRcdC5zZXREZXNjKFwiQ29weSBzZXR0aW5ncyBmcm9tIHN1cGVyY2hhcmdlZCBsaW5rcyBwbHVnaW5cIilcblx0XHRcdC5hZGRCdXR0b24oKGJ1dHRvbjogQnV0dG9uQ29tcG9uZW50KTogQnV0dG9uQ29tcG9uZW50ID0+IHtcblx0XHRcdFx0cmV0dXJuIGJ1dHRvblxuXHRcdFx0XHRcdC5zZXRUb29sdGlwKFwiR2V0IHNldHRpbmdzIGZyb20gc3VwZXJjaGFyZ2VkIGxpbmtzXCIpXG5cdFx0XHRcdFx0LnNldEJ1dHRvblRleHQoXCJDb3B5XCIpXG5cdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdFx0bGV0IG1vZGFsID0gbmV3IFNldHRpbmdzTWlncmF0aW9uQ29uZmlybU1vZGFsKHRoaXMucGx1Z2luLCB0aGlzKTtcblx0XHRcdFx0XHRcdG1vZGFsLm9wZW4oKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHR9O1xufTtcbiIsICIvLyBDcmVkaXRzIGdvIHRvIExpYW0ncyBQZXJpb2RpYyBOb3RlcyBQbHVnaW46IGh0dHBzOi8vZ2l0aHViLmNvbS9saWFtY2Fpbi9vYnNpZGlhbi1wZXJpb2RpYy1ub3Rlc1xuXG5pbXBvcnQgeyBUQWJzdHJhY3RGaWxlLCBURm9sZGVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBUZXh0SW5wdXRTdWdnZXN0IH0gZnJvbSBcIi4vc3VnZ2VzdFwiO1xuXG5leHBvcnQgY2xhc3MgRm9sZGVyU3VnZ2VzdCBleHRlbmRzIFRleHRJbnB1dFN1Z2dlc3Q8VEZvbGRlcj4ge1xuICAgIGdldFN1Z2dlc3Rpb25zKGlucHV0U3RyOiBzdHJpbmcpOiBURm9sZGVyW10ge1xuICAgICAgICBjb25zdCBhYnN0cmFjdEZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0QWxsTG9hZGVkRmlsZXMoKTtcbiAgICAgICAgY29uc3QgZm9sZGVyczogVEZvbGRlcltdID0gW107XG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZUlucHV0U3RyID0gaW5wdXRTdHIudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBhYnN0cmFjdEZpbGVzLmZvckVhY2goKGZvbGRlcjogVEFic3RyYWN0RmlsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIgJiZcbiAgICAgICAgICAgICAgICBmb2xkZXIucGF0aC50b0xvd2VyQ2FzZSgpLmNvbnRhaW5zKGxvd2VyQ2FzZUlucHV0U3RyKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZm9sZGVycy5wdXNoKGZvbGRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmb2xkZXJzO1xuICAgIH1cblxuICAgIHJlbmRlclN1Z2dlc3Rpb24oZmlsZTogVEZvbGRlciwgZWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGVsLnNldFRleHQoZmlsZS5wYXRoKTtcbiAgICB9XG5cbiAgICBzZWxlY3RTdWdnZXN0aW9uKGZpbGU6IFRGb2xkZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbnB1dEVsLnZhbHVlID0gZmlsZS5wYXRoO1xuICAgICAgICB0aGlzLmlucHV0RWwudHJpZ2dlcihcImlucHV0XCIpO1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxufVxuIiwgImltcG9ydCBNZXRhZGF0YU1lbnUgZnJvbSBcIm1haW5cIjtcbmltcG9ydCB7IEFwcCwgQnV0dG9uQ29tcG9uZW50LCBEcm9wZG93bkNvbXBvbmVudCwgRXh0cmFCdXR0b25Db21wb25lbnQsIE1vZGFsLCBTZXR0aW5nLCBUZXh0QXJlYUNvbXBvbmVudCwgVGV4dENvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEZpbGVDbGFzc1F1ZXJ5IGZyb20gXCJzcmMvZmlsZUNsYXNzL0ZpbGVDbGFzc1F1ZXJ5XCI7XG5pbXBvcnQgRmlsZUNsYXNzUXVlcnlTZXR0aW5nIGZyb20gXCIuL0ZpbGVDbGFzc1F1ZXJ5U2V0dGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWxlQ2xhc3NRdWVyeVNldHRpbmdzTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgcHJpdmF0ZSBzYXZlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgZmlsZUNsYXNzUXVlcnk6IEZpbGVDbGFzc1F1ZXJ5O1xuICAgIHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG4gICAgcHJpdmF0ZSBpbml0aWFsRmlsZUNsYXNzUXVlcnk6IEZpbGVDbGFzc1F1ZXJ5O1xuICAgIHByaXZhdGUgcGFyZW50U2V0dGluZz86IEZpbGVDbGFzc1F1ZXJ5U2V0dGluZztcbiAgICBwcml2YXRlIG5ldzogYm9vbGVhbiA9IHRydWU7XG4gICAgcHJpdmF0ZSBwYXJlbnRTZXR0aW5nQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE1ldGFkYXRhTWVudSwgcGFyZW50U2V0dGluZ0NvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHBhcmVudFNldHRpbmc/OiBGaWxlQ2xhc3NRdWVyeVNldHRpbmcsIGZpbGVDbGFzc1F1ZXJ5PzogRmlsZUNsYXNzUXVlcnkpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMucGFyZW50U2V0dGluZyA9IHBhcmVudFNldHRpbmc7XG4gICAgICAgIHRoaXMuaW5pdGlhbEZpbGVDbGFzc1F1ZXJ5ID0gbmV3IEZpbGVDbGFzc1F1ZXJ5KCk7XG4gICAgICAgIHRoaXMucGFyZW50U2V0dGluZ0NvbnRhaW5lciA9IHBhcmVudFNldHRpbmdDb250YWluZXI7XG4gICAgICAgIGlmIChmaWxlQ2xhc3NRdWVyeSkge1xuICAgICAgICAgICAgdGhpcy5uZXcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZmlsZUNsYXNzUXVlcnkgPSBmaWxlQ2xhc3NRdWVyeTtcbiAgICAgICAgICAgIEZpbGVDbGFzc1F1ZXJ5LmNvcHlQcm9wZXJ0eSh0aGlzLmluaXRpYWxGaWxlQ2xhc3NRdWVyeSwgdGhpcy5maWxlQ2xhc3NRdWVyeSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBuZXdJZCA9IDE7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5pbml0aWFsRmlsZUNsYXNzUXVlcmllcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChwcm9wLmlkKSAmJiBwYXJzZUludChwcm9wLmlkKSA+PSBuZXdJZCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdJZCA9IHBhcnNlSW50KHByb3AuaWQpICsgMTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmZpbGVDbGFzc1F1ZXJ5ID0gbmV3IEZpbGVDbGFzc1F1ZXJ5KCk7XG4gICAgICAgICAgICB0aGlzLmZpbGVDbGFzc1F1ZXJ5LmlkID0gbmV3SWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbEZpbGVDbGFzc1F1ZXJ5LmlkID0gbmV3SWQudG9TdHJpbmcoKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgYXN5bmMgb25PcGVuKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAodGhpcy5maWxlQ2xhc3NRdWVyeS5uYW1lID09IFwiXCIpIHtcbiAgICAgICAgICAgIHRoaXMudGl0bGVFbC5zZXRUZXh0KGBTZWxlY3QgYSBmaWxlQ2xhc3MgYW5kIGFkZCBhbiBhcHBsaWNhYmxlIHF1ZXJ5YCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChgTWFuYWdlICR7dGhpcy5maWxlQ2xhc3NRdWVyeS5uYW1lfSBzZXR0aW5nc2ApO1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZUZvcm0oKTtcbiAgICB9O1xuXG4gICAgb25DbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmZpbGVDbGFzc1F1ZXJ5LCB0aGlzLmluaXRpYWxGaWxlQ2xhc3NRdWVyeSk7XG4gICAgICAgIGlmICghdGhpcy5uZXcgJiYgdGhpcy5wYXJlbnRTZXR0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudFNldHRpbmcuc2V0VGV4dENvbnRlbnRXaXRobmFtZSgpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zYXZlZCkge1xuICAgICAgICAgICAgbmV3IEZpbGVDbGFzc1F1ZXJ5U2V0dGluZyh0aGlzLnBhcmVudFNldHRpbmdDb250YWluZXIsIHRoaXMuZmlsZUNsYXNzUXVlcnksIHRoaXMuYXBwLCB0aGlzLnBsdWdpbik7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHByaXZhdGUgY3JlYXRlbmFtZUlucHV0Q29udGFpbmVyKHBhcmVudE5vZGU6IEhUTUxEaXZFbGVtZW50KTogVGV4dENvbXBvbmVudCB7XG4gICAgICAgIGNvbnN0IGZpbGVDbGFzc1F1ZXJ5TmFtZUNvbnRhaW5lckxhYmVsID0gcGFyZW50Tm9kZS5jcmVhdGVEaXYoKTtcbiAgICAgICAgZmlsZUNsYXNzUXVlcnlOYW1lQ29udGFpbmVyTGFiZWwuc2V0VGV4dChgRmlsZUNsYXNzIFF1ZXJ5IE5hbWU6YCk7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gbmV3IFRleHRDb21wb25lbnQocGFyZW50Tm9kZSk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmZpbGVDbGFzc1F1ZXJ5Lm5hbWU7XG4gICAgICAgIGlucHV0LnNldFZhbHVlKG5hbWUpO1xuICAgICAgICBpbnB1dC5zZXRQbGFjZWhvbGRlcihcIk5hbWUgb2YgdGhpcyBmaWxlQ2xhc3MgcXVlcnlcIik7XG4gICAgICAgIGlucHV0Lm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmlsZUNsYXNzUXVlcnkubmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQoYE1hbmFnZSBvcHRpb25zIGZvciAke3RoaXMuZmlsZUNsYXNzUXVlcnkubmFtZX1gKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVGaWxlQ2xhc3NTZWxlY3RvckNvbnRhaW5lcihwYXJlbnROb2RlOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBGaWxlQ2xhc3NTZWxlY3RvckNvbnRhaW5lckxhYmVsID0gcGFyZW50Tm9kZS5jcmVhdGVEaXYoKTtcbiAgICAgICAgRmlsZUNsYXNzU2VsZWN0b3JDb250YWluZXJMYWJlbC5zZXRUZXh0KGBGaWxlY2xhc3M6YCk7XG4gICAgICAgIGNvbnN0IHNlbGVjdCA9IG5ldyBEcm9wZG93bkNvbXBvbmVudChwYXJlbnROb2RlKTtcbiAgICAgICAgY29uc3QgZmlsZUNsYXNzZXMgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0RmlsZXMoKS5maWx0ZXIoZiA9PiBmLnBhdGguc3RhcnRzV2l0aCh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jbGFzc0ZpbGVzUGF0aCkpXG4gICAgICAgIHNlbGVjdC5hZGRPcHRpb24oXCItLVNlbGVjdCBhIGZpbGVDbGFzcy0tXCIsIFwiLS1TZWxlY3QgYSBmaWxlQ2xhc3MtLVwiKVxuICAgICAgICBmaWxlQ2xhc3Nlcy5mb3JFYWNoKGZpbGVDbGFzcyA9PiBzZWxlY3QuYWRkT3B0aW9uKGZpbGVDbGFzcy5iYXNlbmFtZSwgZmlsZUNsYXNzLmJhc2VuYW1lKSlcbiAgICAgICAgaWYgKHRoaXMuZmlsZUNsYXNzUXVlcnkuZmlsZUNsYXNzTmFtZSkge1xuICAgICAgICAgICAgc2VsZWN0LnNldFZhbHVlKHRoaXMuZmlsZUNsYXNzUXVlcnkuZmlsZUNsYXNzTmFtZSlcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3Qub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IFwiLS1TZWxlY3QgYSBmaWxlQ2xhc3MtLVwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxlQ2xhc3NRdWVyeS5maWxlQ2xhc3NOYW1lID0gdmFsdWVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxlQ2xhc3NRdWVyeS5maWxlQ2xhc3NOYW1lID0gXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUXVlcnlJbnB1dENvbnRhaW5lcihwYXJlbnROb2RlOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBxdWVyeUNvbnRhaW5lckxhYmVsID0gcGFyZW50Tm9kZS5jcmVhdGVEaXYoKTtcbiAgICAgICAgcXVlcnlDb250YWluZXJMYWJlbC5zZXRUZXh0KFwiZGF0YXZpZXdKUyBxdWVyeTpcIilcbiAgICAgICAgY29uc3QgcXVlcnlTdHJpbmdJbnB1dCA9IG5ldyBUZXh0QXJlYUNvbXBvbmVudChwYXJlbnROb2RlKTtcbiAgICAgICAgcXVlcnlTdHJpbmdJbnB1dC5zZXRWYWx1ZSh0aGlzLmZpbGVDbGFzc1F1ZXJ5LnF1ZXJ5KTtcbiAgICAgICAgcXVlcnlTdHJpbmdJbnB1dC5vbkNoYW5nZSh2YWx1ZSA9PiB0aGlzLmZpbGVDbGFzc1F1ZXJ5LnF1ZXJ5ID0gdmFsdWUpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVGb3JtKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6IFwibWV0YWRhdGEtbWVudS1wcm9tcHQtZGl2XCIgfSk7XG4gICAgICAgIGNvbnN0IG1haW5EaXYgPSBkaXYuY3JlYXRlRGl2KHsgY2xzOiBcIm1ldGFkYXRhLW1lbnUtcHJvbXB0LWZvcm1cIiB9KTtcblxuICAgICAgICAvKiBTZWN0aW9ucyAqL1xuICAgICAgICBjb25zdCBuYW1lQ29udGFpbmVyID0gbWFpbkRpdi5jcmVhdGVEaXYoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVuYW1lSW5wdXRDb250YWluZXIobmFtZUNvbnRhaW5lcik7XG4gICAgICAgIG1haW5EaXYuY3JlYXRlRGl2KHsgY2xzOiAnbWV0YWRhdGEtbWVudS1zZXBhcmF0b3InIH0pLmNyZWF0ZUVsKFwiaHJcIik7XG5cbiAgICAgICAgY29uc3QgZmlsZUNsYXNzU2VsZWN0Q29udGFpbmVyID0gbWFpbkRpdi5jcmVhdGVEaXYoKVxuXG4gICAgICAgIC8qIGZvb3RlciBidXR0b25zKi9cbiAgICAgICAgY29uc3QgZm9vdGVyRWwgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgY29uc3QgZm9vdGVyQnV0dG9ucyA9IG5ldyBTZXR0aW5nKGZvb3RlckVsKTtcbiAgICAgICAgZm9vdGVyQnV0dG9ucy5hZGRCdXR0b24oKGIpID0+IHRoaXMuY3JlYXRlU2F2ZUJ1dHRvbihiKSk7XG4gICAgICAgIGZvb3RlckJ1dHRvbnMuYWRkRXh0cmFCdXR0b24oKGIpID0+IHRoaXMuY3JlYXRlQ2FuY2VsQnV0dG9uKGIpKTtcblxuICAgICAgICAvKiBpbml0IHN0YXRlICovXG4gICAgICAgIHRoaXMuY3JlYXRlRmlsZUNsYXNzU2VsZWN0b3JDb250YWluZXIoZmlsZUNsYXNzU2VsZWN0Q29udGFpbmVyKVxuICAgICAgICBjb25zdCBmaWxlQ2xhc3NRdWVyeUNvbnRhaW5lciA9IG1haW5EaXYuY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMuY3JlYXRlUXVlcnlJbnB1dENvbnRhaW5lcihmaWxlQ2xhc3NRdWVyeUNvbnRhaW5lcik7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY3JlYXRlU2F2ZUJ1dHRvbihiOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQge1xuICAgICAgICBiLnNldFRvb2x0aXAoXCJTYXZlXCIpO1xuICAgICAgICBiLnNldEljb24oXCJjaGVja21hcmtcIik7XG4gICAgICAgIGIub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5maWxlQ2xhc3NRdWVyeS5maWxlQ2xhc3NOYW1lICYmIHRoaXMuZmlsZUNsYXNzUXVlcnkubmFtZSAmJiB0aGlzLmZpbGVDbGFzc1F1ZXJ5LnF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEV4aXN0aW5nRmlsZUNsYXNzUXVlcnkgPSB0aGlzLnBsdWdpbi5pbml0aWFsRmlsZUNsYXNzUXVlcmllcy5maWx0ZXIocCA9PiBwLmlkID09IHRoaXMuZmlsZUNsYXNzUXVlcnkuaWQpWzBdO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RXhpc3RpbmdGaWxlQ2xhc3NRdWVyeSkge1xuICAgICAgICAgICAgICAgICAgICBGaWxlQ2xhc3NRdWVyeS5jb3B5UHJvcGVydHkoY3VycmVudEV4aXN0aW5nRmlsZUNsYXNzUXVlcnksIHRoaXMuZmlsZUNsYXNzUXVlcnkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmluaXRpYWxGaWxlQ2xhc3NRdWVyaWVzLnB1c2godGhpcy5maWxlQ2xhc3NRdWVyeSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBGaWxlQ2xhc3NRdWVyeS5jb3B5UHJvcGVydHkodGhpcy5pbml0aWFsRmlsZUNsYXNzUXVlcnksIHRoaXMuZmlsZUNsYXNzUXVlcnkpXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50U2V0dGluZykgRmlsZUNsYXNzUXVlcnkuY29weVByb3BlcnR5KHRoaXMucGFyZW50U2V0dGluZy5maWxlQ2xhc3NRdWVyeSwgdGhpcy5maWxlQ2xhc3NRdWVyeSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRTZXR0aW5nPy5zZXRUZXh0Q29udGVudFdpdGhuYW1lKClcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBjcmVhdGVDYW5jZWxCdXR0b24oYjogRXh0cmFCdXR0b25Db21wb25lbnQpOiBFeHRyYUJ1dHRvbkNvbXBvbmVudCB7XG4gICAgICAgIGIuc2V0SWNvbihcImNyb3NzXCIpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkNhbmNlbFwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvKiByZXNldCBvcHRpb25zIGZyb20gc2V0dGluZ3MgKi9cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsRmlsZUNsYXNzUXVlcnkubmFtZSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5maWxlQ2xhc3NRdWVyeSwgdGhpcy5pbml0aWFsRmlsZUNsYXNzUXVlcnkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBiO1xuICAgIH07XG59OyIsICJpbXBvcnQgeyBBcHAsIFNldHRpbmcsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgRmlsZUNsYXNzUXVlcnkgZnJvbSBcInNyYy9maWxlQ2xhc3MvRmlsZUNsYXNzUXVlcnlcIjtcbmltcG9ydCBGaWxlQ2xhc3NRdWVyeVNldHRpbmdzTW9kYWwgZnJvbSBcIi4vRmlsZUNsYXNzUXVlcnlTZXR0aW5nTW9kYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZUNsYXNzUXVlcnlTZXR0aW5nIGV4dGVuZHMgU2V0dGluZyB7XG4gICAgcHVibGljIGZpbGVDbGFzc1F1ZXJ5OiBGaWxlQ2xhc3NRdWVyeTtcbiAgICBwcml2YXRlIGFwcDogQXBwO1xuICAgIHByaXZhdGUgcGx1Z2luOiBNZXRhZGF0YU1lbnU7XG4gICAgcHJpdmF0ZSBjb250YWluZXJFbDogSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXJFbDogSFRNTEVsZW1lbnQsIHByb3BlcnR5OiBGaWxlQ2xhc3NRdWVyeSwgYXBwOiBBcHAsIHBsdWdpbjogTWV0YWRhdGFNZW51KSB7XG4gICAgICAgIHN1cGVyKGNvbnRhaW5lckVsKTtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbCA9IGNvbnRhaW5lckVsO1xuICAgICAgICB0aGlzLmZpbGVDbGFzc1F1ZXJ5ID0gcHJvcGVydHk7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5zZXRUZXh0Q29udGVudFdpdGhuYW1lKCk7XG4gICAgICAgIHRoaXMuYWRkRWRpdEJ1dHRvbigpO1xuICAgICAgICB0aGlzLmFkZERlbGV0ZUJ1dHRvbigpO1xuICAgICAgICB0aGlzLmFkZE1vdmVVcEJ1dHRvbigpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgc2V0VGV4dENvbnRlbnRXaXRobmFtZSgpOiB2b2lkIHtcblxuICAgICAgICB0aGlzLmluZm9FbC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIHRoaXMuaW5mb0VsLmFkZENsYXNzKFwibWV0YWRhdGEtbWVudS1zZXR0aW5nLWl0ZW1cIilcbiAgICAgICAgY29uc3QgZmlsZUNsYXNzUXVlcnlDb250YWluZXIgPSB0aGlzLmluZm9FbC5jcmVhdGVEaXYoKTtcblxuICAgICAgICBjb25zdCBuYW1lQ29udGFpbmVyID0gZmlsZUNsYXNzUXVlcnlDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwgXCJtZXRhZGF0YS1tZW51LXNldHRpbmctaXRlbS1uYW1lXCIpXG4gICAgICAgIG5hbWVDb250YWluZXIuaW5uZXJIVE1MID0gYDxzdHJvbmc+JHt0aGlzLmZpbGVDbGFzc1F1ZXJ5Lm5hbWV9PC9zdHJvbmc+YFxuXG4gICAgICAgIGNvbnN0IGZpbGVDbGFzc05hbWVDb250YWluZXIgPSBmaWxlQ2xhc3NRdWVyeUNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiKVxuICAgICAgICBmaWxlQ2xhc3NOYW1lQ29udGFpbmVyLmlubmVySFRNTCA9IGA8c3Bhbj5GaWxlQ2xhc3M8L3NwYW4+IDogJHt0aGlzLmZpbGVDbGFzc1F1ZXJ5LmZpbGVDbGFzc05hbWV9YFxuXG4gICAgICAgIGNvbnN0IHF1ZXJ5Q29udGFpbmVyID0gZmlsZUNsYXNzUXVlcnlDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIilcbiAgICAgICAgcXVlcnlDb250YWluZXIuaW5uZXJIVE1MID0gYDxzcGFuPlF1ZXJ5PC9zcGFuPiA6ICR7dGhpcy5maWxlQ2xhc3NRdWVyeS5xdWVyeX1gXG5cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBhZGRFZGl0QnV0dG9uKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgYi5zZXRJY29uKFwicGVuY2lsXCIpXG4gICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJFZGl0XCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbW9kYWwgPSBuZXcgRmlsZUNsYXNzUXVlcnlTZXR0aW5nc01vZGFsKHRoaXMuYXBwLCB0aGlzLnBsdWdpbiwgdGhpcy5jb250YWluZXJFbCwgdGhpcywgdGhpcy5maWxlQ2xhc3NRdWVyeSk7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgYWRkRGVsZXRlQnV0dG9uKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgYi5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkRlbGV0ZVwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEV4aXN0aW5nRmlsZUNsYXNzUXVlcnkgPSB0aGlzLnBsdWdpbi5pbml0aWFsRmlsZUNsYXNzUXVlcmllcy5maW5kKHAgPT4gcC5pZCA9PSB0aGlzLmZpbGVDbGFzc1F1ZXJ5LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRFeGlzdGluZ0ZpbGVDbGFzc1F1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5pbml0aWFsRmlsZUNsYXNzUXVlcmllcy5yZW1vdmUoY3VycmVudEV4aXN0aW5nRmlsZUNsYXNzUXVlcnkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdFbC5wYXJlbnRFbGVtZW50Py5yZW1vdmVDaGlsZCh0aGlzLnNldHRpbmdFbCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBhZGRNb3ZlVXBCdXR0b24oKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWRkQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICBiLnNldEljb24oXCJ1cC1jaGV2cm9uLWdseXBoXCIpXG4gICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJNb3ZlIHVwIChsb3dlciBwcmlvcml0eSlcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGaWxlQ2xhc3NRdWVyeUluZGV4ID0gdGhpcy5wbHVnaW4uaW5pdGlhbEZpbGVDbGFzc1F1ZXJpZXMubWFwKGZjcSA9PiBmY3EuaWQpLmluZGV4T2YodGhpcy5maWxlQ2xhc3NRdWVyeS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RmlsZUNsYXNzUXVlcnlJbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuaW5zZXJ0QmVmb3JlKHRoaXMuc2V0dGluZ0VsLCB0aGlzLnNldHRpbmdFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmluaXRpYWxGaWxlQ2xhc3NRdWVyaWVzLnNwbGljZShjdXJyZW50RmlsZUNsYXNzUXVlcnlJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5pbml0aWFsRmlsZUNsYXNzUXVlcmllcy5zcGxpY2UoY3VycmVudEZpbGVDbGFzc1F1ZXJ5SW5kZXggLSAxLCAwLCB0aGlzLmZpbGVDbGFzc1F1ZXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG59OyIsICJpbXBvcnQgTWV0YWRhdGFNZW51IGZyb20gXCJtYWluXCJcbmltcG9ydCBGaWVsZCBmcm9tIFwiLi4vZmllbGRzL0ZpZWxkXCJcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gXCJzcmMvdHlwZXMvZmllbGRUeXBlc1wiXG5cbmludGVyZmFjZSBPbGRGaWVsZCBleHRlbmRzIEZpZWxkIHtcbiAgICBpc011bHRpPzogYm9vbGVhbixcbiAgICBpc0N5Y2xlPzogYm9vbGVhbixcbiAgICBpc0Jvb2xlYW4/OiBib29sZWFuLFxuICAgIHZhbHVlcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbn1cblxuZXhwb3J0IGNvbnN0IG1pZ3JhdGVTZXR0aW5nc1YxdG9WMiA9IGFzeW5jIChwbHVnaW46IE1ldGFkYXRhTWVudSkgPT4ge1xuICAgIGNvbnN0IHByZXNldEZpZWxkcyA9IHBsdWdpbi5zZXR0aW5ncy5wcmVzZXRGaWVsZHNcbiAgICBwcmVzZXRGaWVsZHMuZm9yRWFjaCgocDogT2xkRmllbGQpID0+IHtcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhwKS5jb250YWlucyhcInR5cGVcIikpIHtcbiAgICAgICAgICAgIGlmIChwLmlzTXVsdGkpIHAudHlwZSA9IEZpZWxkVHlwZS5NdWx0aVxuICAgICAgICAgICAgZWxzZSBpZiAocC5pc0N5Y2xlKSBwLnR5cGUgPSBGaWVsZFR5cGUuQ3ljbGVcbiAgICAgICAgICAgIGVsc2UgaWYgKHAuaXNCb29sZWFuKSBwLnR5cGUgPSBGaWVsZFR5cGUuQm9vbGVhblxuICAgICAgICAgICAgZWxzZSBpZiAocC5vcHRpb25zICYmIE9iamVjdC5rZXlzKHAub3B0aW9ucykubGVuZ3RoID4gMCkgcC50eXBlID0gRmllbGRUeXBlLlNlbGVjdFxuICAgICAgICAgICAgZWxzZSBwLnR5cGUgPSBGaWVsZFR5cGUuSW5wdXRcbiAgICAgICAgfVxuICAgICAgICAvL2VyYXNlIGlzTXVsdGksIGlzQ3ljbGUsIGlzQm9vbGVhbiBpZiBleGlzdHNcbiAgICAgICAgZGVsZXRlIHAuaXNNdWx0aTtcbiAgICAgICAgZGVsZXRlIHAuaXNDeWNsZTtcbiAgICAgICAgZGVsZXRlIHAuaXNCb29sZWFuXG4gICAgICAgIC8vcmVuYW1lIFwidmFsdWVzXCIgaW4gXCJvcHRpb25cIlxuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwLCBcInZhbHVlc1wiKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJvcHRpb25zXCIsXG4gICAgICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwLCBcInZhbHVlc1wiKSEpO1xuICAgICAgICAgICAgZGVsZXRlIHBbXCJ2YWx1ZXNcIl07XG4gICAgICAgIH1cbiAgICB9KVxuICAgIHBsdWdpbi5zZXR0aW5ncy5zZXR0aW5nc1ZlcnNpb24gPSAyXG4gICAgYXdhaXQgcGx1Z2luLnNhdmVEYXRhKHBsdWdpbi5zZXR0aW5ncylcbiAgICBjb25zb2xlLmxvZyhcIk1ldGFkYXRhIG1lbnUgc2V0dGluZ3MgbWlncmF0ZWRcIilcbn0iLCAiaW1wb3J0IE1ldGFkYXRhTWVudSBmcm9tIFwibWFpblwiO1xuaW1wb3J0IHtcbiAgICBBcHAsXG4gICAgRWRpdG9yLFxuICAgIEVkaXRvclBvc2l0aW9uLFxuICAgIEVkaXRvclN1Z2dlc3QsXG4gICAgRWRpdG9yU3VnZ2VzdENvbnRleHQsXG4gICAgRWRpdG9yU3VnZ2VzdFRyaWdnZXJJbmZvLFxuICAgIE1hcmtkb3duVmlldyxcbiAgICBURmlsZSxcbiAgICBwYXJzZVlhbWwsXG4gICAgTm90aWNlXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgRmlsZUNsYXNzIH0gZnJvbSBcInNyYy9maWxlQ2xhc3MvZmlsZUNsYXNzXCI7XG5pbXBvcnQgeyBGaWVsZE1hbmFnZXIsIEZpZWxkVHlwZSB9IGZyb20gXCJzcmMvdHlwZXMvZmllbGRUeXBlc1wiO1xuaW1wb3J0IHsgZ2VuZXJpY0ZpZWxkUmVnZXgsIGdldExpbmVGaWVsZHMsIGVuY29kZUxpbmsgfSBmcm9tIFwiLi4vdXRpbHMvcGFyc2VyXCI7XG5pbXBvcnQgRmlsZUZpZWxkIGZyb20gXCJzcmMvZmllbGRzL2ZpZWxkTWFuYWdlcnMvRmlsZUZpZWxkXCI7XG5pbXBvcnQgRmlsZUNsYXNzUXVlcnkgZnJvbSBcInNyYy9maWxlQ2xhc3MvRmlsZUNsYXNzUXVlcnlcIjtcblxuaW50ZXJmYWNlIElWYWx1ZUNvbXBsZXRpb24ge1xuICAgIHZhbHVlOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYWx1ZVN1Z2dlc3QgZXh0ZW5kcyBFZGl0b3JTdWdnZXN0PElWYWx1ZUNvbXBsZXRpb24+IHtcbiAgICBwcml2YXRlIHBsdWdpbjogTWV0YWRhdGFNZW51O1xuICAgIHByaXZhdGUgYXBwOiBBcHA7XG4gICAgcHJpdmF0ZSBmaWxlQ2xhc3M6IEZpbGVDbGFzcztcbiAgICBwcml2YXRlIGZpbGVDbGFzc0ZvckZpZWxkczogYm9vbGVhbjtcbiAgICBwcml2YXRlIGluRnJvbnRtYXR0ZXI6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGluRnVsbExpbmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGluU2VudGVuY2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGRpZFNlbGVjdDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgZmlsZUNsYXNzRmllbGRzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE1ldGFkYXRhTWVudSkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMuc2V0SW5zdHJ1Y3Rpb25zKFt7IGNvbW1hbmQ6IFwiU2hpZnRcIiwgcHVycG9zZTogXCJwdXQgYSBzcGFjZSBhZnRlcjo6XCIgfV0pO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5zY29wZS5yZWdpc3RlcihbXCJTaGlmdFwiXSwgXCJFbnRlclwiLCAoZXZ0OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLnN1Z2dlc3Rpb25zLnVzZVNlbGVjdGVkSXRlbShldnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgb25UcmlnZ2VyKFxuICAgICAgICBjdXJzb3I6IEVkaXRvclBvc2l0aW9uLFxuICAgICAgICBlZGl0b3I6IEVkaXRvcixcbiAgICAgICAgZmlsZTogVEZpbGVcbiAgICApOiBFZGl0b3JTdWdnZXN0VHJpZ2dlckluZm8gfCBudWxsIHtcbiAgICAgICAgaWYgKHRoaXMuZGlkU2VsZWN0KSB7XG4gICAgICAgICAgICB0aGlzLmRpZFNlbGVjdCA9IGZhbHNlXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5wbHVnaW4uc2V0dGluZ3MuaXNBdXRvc3VnZ2VzdEVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgZnJvbnRtYXR0ZXIgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSkuZnJvbnRtYXR0ZXI7XG4gICAgICAgIGNvbnN0IGZ1bGxMaW5lID0gZWRpdG9yLmdldExpbmUoZWRpdG9yLmdldEN1cnNvcigpLmxpbmUpXG4gICAgICAgIHRoaXMuaW5Gcm9udG1hdHRlciA9IGZyb250bWF0dGVyICE9PSB1bmRlZmluZWQgJiYgZnJvbnRtYXR0ZXIucG9zaXRpb24uc3RhcnQubGluZSA8IGN1cnNvci5saW5lICYmIGN1cnNvci5saW5lIDwgZnJvbnRtYXR0ZXIucG9zaXRpb24uZW5kLmxpbmVcbiAgICAgICAgaWYgKHRoaXMuaW5Gcm9udG1hdHRlcikge1xuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBeJHtnZW5lcmljRmllbGRSZWdleH06KD88dmFsdWVzPi4qKWAsIFwidVwiKTtcbiAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChmdWxsTGluZSkpIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGdldExpbmVGaWVsZHMoZnVsbExpbmUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBjdXJzb3IsXG4gICAgICAgICAgICBlbmQ6IGN1cnNvcixcbiAgICAgICAgICAgIHF1ZXJ5OiBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSksXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHByaXZhdGUgZmlsdGVyT3B0aW9uID0gKGZpcnN0VmFsdWVzOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCwgbGFzdFZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQsIG9wdGlvbjogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiAhZmlyc3RWYWx1ZXMgfHxcbiAgICAgICAgICAgICFmaXJzdFZhbHVlcz8uY29udGFpbnMoZW5jb2RlTGluayhvcHRpb24pKSAmJiAoIWxhc3RWYWx1ZSB8fFxuICAgICAgICAgICAgICAgICEhbGFzdFZhbHVlICYmIGVuY29kZUxpbmsob3B0aW9uKS5pbmNsdWRlcyhsYXN0VmFsdWUpKVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0T3B0aW9uc0Zyb21GaWxlQ2xhc3NGaWVsZHMoXG4gICAgICAgIGZpZWxkTmFtZXM6IHN0cmluZ1tdLFxuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZyxcbiAgICAgICAgZmlyc3RWYWx1ZXM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkLFxuICAgICAgICBsYXN0VmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgY29udGV4dDogRWRpdG9yU3VnZ2VzdENvbnRleHRcbiAgICApOiBJVmFsdWVDb21wbGV0aW9uW10ge1xuICAgICAgICBpZiAoZmllbGROYW1lcy5pbmNsdWRlcyhmaWVsZE5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IHRoaXMuZmlsZUNsYXNzLmF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAuZmluZChhdHRyID0+IGF0dHIubmFtZSA9PSBmaWVsZE5hbWUpIS5nZXRGaWVsZCgpXG4gICAgICAgICAgICBpZiAoW0ZpZWxkVHlwZS5DeWNsZSwgRmllbGRUeXBlLk11bHRpLCBGaWVsZFR5cGUuU2VsZWN0XS5jb250YWlucyhmaWVsZC50eXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IEFycmF5LmlzQXJyYXkoZmllbGQub3B0aW9ucykgP1xuICAgICAgICAgICAgICAgICAgICBmaWVsZC5vcHRpb25zLmZpbHRlcihvcHRpb24gPT4gdGhpcy5maWx0ZXJPcHRpb24oZmlyc3RWYWx1ZXMsIGxhc3RWYWx1ZSwgb3B0aW9uKSkgOlxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhmaWVsZC5vcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChrID0+IGZpZWxkLm9wdGlvbnNba10pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKG9wdGlvbiA9PiB0aGlzLmZpbHRlck9wdGlvbihmaXJzdFZhbHVlcywgbGFzdFZhbHVlLCBvcHRpb24pKVxuICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZE9wdGlvbnMubWFwKG9wdGlvbiA9PiBPYmplY3QoeyB2YWx1ZTogb3B0aW9uIH0pKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW0ZpZWxkVHlwZS5GaWxlLCBGaWVsZFR5cGUuTXVsdGlGaWxlXS5pbmNsdWRlcyhmaWVsZC50eXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTWFuYWdlcjogRmlsZUZpZWxkID0gbmV3IEZpZWxkTWFuYWdlcltmaWVsZC50eXBlXShmaWVsZClcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlcyA9IGZpZWxkTWFuYWdlci5nZXRGaWxlcygpO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGYgPT4gZi5iYXNlbmFtZS5pbmNsdWRlcyhsYXN0VmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmID0+IE9iamVjdCh7IHZhbHVlOiBGaWxlRmllbGQuYnVpbGRNYXJrRG93bkxpbmsoYXBwLCBjb250ZXh0LmZpbGUsIGYuYmFzZW5hbWUpIH0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZiA9PiBPYmplY3QoeyB2YWx1ZTogRmlsZUZpZWxkLmJ1aWxkTWFya0Rvd25MaW5rKGFwcCwgY29udGV4dC5maWxlLCBmLmJhc2VuYW1lKSB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBhc3luYyBnZXRTdWdnZXN0aW9ucyhjb250ZXh0OiBFZGl0b3JTdWdnZXN0Q29udGV4dCk6IFByb21pc2U8SVZhbHVlQ29tcGxldGlvbltdPiB7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gYXdhaXQgdGhpcy5nZXRWYWx1ZVN1Z2dlc3Rpb25zKGNvbnRleHQpO1xuICAgICAgICBpZiAoc3VnZ2VzdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG5cbiAgICBhc3luYyBnZXRWYWx1ZVN1Z2dlc3Rpb25zKGNvbnRleHQ6IEVkaXRvclN1Z2dlc3RDb250ZXh0KTogUHJvbWlzZTxJVmFsdWVDb21wbGV0aW9uW10+IHtcbiAgICAgICAgY29uc3QgbGluZU51bWJlciA9IGNvbnRleHQuc3RhcnQubGluZTtcbiAgICAgICAgY29uc3QgbWF0Y2hGaWVsZDogeyBhdHRyaWJ1dGU/OiBzdHJpbmcsIHZhbHVlcz86IHN0cmluZyB9ID0geyBhdHRyaWJ1dGU6IHVuZGVmaW5lZCwgdmFsdWVzOiBcIlwiIH1cbiAgICAgICAgaWYgKCF0aGlzLmluRnJvbnRtYXR0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVGaWVsZHMgPSBnZXRMaW5lRmllbGRzKGVuY29kZUxpbmsoY29udGV4dC5lZGl0b3IuZ2V0TGluZShsaW5lTnVtYmVyKSkpO1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBjb250ZXh0LmVkaXRvci5nZXRDdXJzb3IoKS5jaFxuICAgICAgICAgICAgY29uc3QgYWN0aXZlTGluZUZpZWxkID0gbGluZUZpZWxkcy5maW5kKGxpbmVGaWVsZCA9PiBsaW5lRmllbGQuaW5kZXggPD0gcG9zaXRpb24gJiYgbGluZUZpZWxkLmluZGV4ICsgbGluZUZpZWxkLmxlbmd0aCA+PSBwb3NpdGlvbilcbiAgICAgICAgICAgIGlmIChhY3RpdmVMaW5lRmllbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluU2VudGVuY2UgPSBhY3RpdmVMaW5lRmllbGQuaW5kZXggPiAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5GdWxsTGluZSA9IGFjdGl2ZUxpbmVGaWVsZC5pbmRleCA9PT0gMDtcbiAgICAgICAgICAgICAgICBtYXRjaEZpZWxkLmF0dHJpYnV0ZSA9IGFjdGl2ZUxpbmVGaWVsZC5hdHRyaWJ1dGU7XG4gICAgICAgICAgICAgICAgbWF0Y2hGaWVsZC52YWx1ZXMgPSBhY3RpdmVMaW5lRmllbGQudmFsdWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBeJHtnZW5lcmljRmllbGRSZWdleH06KD88dmFsdWVzPi4rKT9gLCBcInVcIik7XG4gICAgICAgICAgICBjb25zdCByZWdleFJlc3VsdCA9IGNvbnRleHQuZWRpdG9yLmdldFJhbmdlKHsgbGluZTogbGluZU51bWJlciwgY2g6IDAgfSwgY29udGV4dC5lbmQpLm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgICAgIGlmIChyZWdleFJlc3VsdD8uZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hGaWVsZC5hdHRyaWJ1dGUgPSByZWdleFJlc3VsdC5ncm91cHMuYXR0cmlidXRlO1xuICAgICAgICAgICAgICAgIG1hdGNoRmllbGQudmFsdWVzID0gcmVnZXhSZXN1bHQuZ3JvdXBzLnZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hGaWVsZC5hdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IG1hdGNoRmllbGQuYXR0cmlidXRlO1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzTGlzdCA9IG1hdGNoRmllbGQudmFsdWVzPy5yZXBsYWNlKC9eXFxbfF5cXHNcXFt8XlxcKHxeXFxzXFwoLywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXSR8XFwpJC8sICcnKVxuICAgICAgICAgICAgICAgIC5zcGxpdChcIixcIikubWFwKG8gPT4gZW5jb2RlTGluayhvLnRyaW0oKSkpXG4gICAgICAgICAgICBjb25zdCBsYXN0VmFsdWUgPSB2YWx1ZXNMaXN0Py5sYXN0KClcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0VmFsdWVzID0gdmFsdWVzTGlzdD8uc2xpY2UoMCwgLTEpXG4gICAgICAgICAgICAvL3RhZ3Mgc3BlY2lmaWMgY2FzXG4gICAgICAgICAgICBpZiAoZmllbGROYW1lID09PSBcInRhZ3NcIiAmJiB0aGlzLmluRnJvbnRtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRUYWdzKCkpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIodCA9PiBsYXN0VmFsdWUgPyB0LmNvbnRhaW5zKGxhc3RWYWx1ZSkgOiB0KVxuICAgICAgICAgICAgICAgICAgICAuc29ydCgpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAodGFnID0+IE9iamVjdCh7IHZhbHVlOiB0YWcucmVwbGFjZSgvXiMvLCBcIlwiKSB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vdGVzdCBpZiBub3RlIG1hdGNoZXMgYSBmaWxlY2xhc3MgcXVlcnlcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc1F1ZXJpZXMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlQ2xhc3NRdWVyaWVzLm1hcChmY3EgPT4gZmNxKVxuICAgICAgICAgICAgd2hpbGUgKCF0aGlzLmZpbGVDbGFzc0ZvckZpZWxkcyAmJiBmaWxlQ2xhc3NRdWVyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ2xhc3NRdWVyeSA9IG5ldyBGaWxlQ2xhc3NRdWVyeSgpO1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZmlsZUNsYXNzUXVlcnksIGZpbGVDbGFzc1F1ZXJpZXMucG9wKCkgYXMgRmlsZUNsYXNzUXVlcnkpXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVDbGFzc1F1ZXJ5Lm1hdGNoRmlsZShjb250ZXh0LmZpbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZUNsYXNzRm9yRmllbGRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlQ2xhc3MgPSBGaWxlQ2xhc3MuY3JlYXRlRmlsZUNsYXNzKHRoaXMucGx1Z2luLCBmaWxlQ2xhc3NRdWVyeS5maWxlQ2xhc3NOYW1lKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGVDbGFzc0ZpZWxkcyA9IHRoaXMuZmlsZUNsYXNzLmF0dHJpYnV0ZXMubWFwKGF0dHIgPT4gYXR0ci5uYW1lKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vaWYgdGhpcyBub3RlIGhhcyBhIGZpbGVDbGFzcywgY2hlY2sgaWYgZmllbGQgb3B0aW9ucyBhcmUgZGVmaW5lZCBpbiB0aGUgRmlsZUNsYXNzXG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMucGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLmdldENhY2hlKGNvbnRleHQuZmlsZS5wYXRoKTtcbiAgICAgICAgICAgIGlmIChjYWNoZT8uZnJvbnRtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHBvc2l0aW9uLCAuLi5hdHRyaWJ1dGVzIH0gPSBjYWNoZS5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ2xhc3NBbGlhcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVDbGFzc0FsaWFzO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5jb250YWlucyhmaWxlQ2xhc3NBbGlhcykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZUNsYXNzVmFsdWUgPSBhdHRyaWJ1dGVzW2ZpbGVDbGFzc0FsaWFzXTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzcyA9IEZpbGVDbGFzcy5jcmVhdGVGaWxlQ2xhc3ModGhpcy5wbHVnaW4sIGZpbGVDbGFzc1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZUNsYXNzID0gZmlsZUNsYXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlQ2xhc3NGb3JGaWVsZHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlQ2xhc3NGaWVsZHMgPSB0aGlzLmZpbGVDbGFzcy5hdHRyaWJ1dGVzLm1hcChhID0+IGEubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVDbGFzc0ZvckZpZWxkcykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9wdGlvbnNGcm9tRmlsZUNsYXNzRmllbGRzKHRoaXMuZmlsZUNsYXNzRmllbGRzLCBmaWVsZE5hbWUsIGZpcnN0VmFsdWVzLCBsYXN0VmFsdWUsIGNvbnRleHQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vZWxzZSBjaGVjayBpZiB0aGVyZSBhcmUgZ2xvYmFsIHByZXNldCB2b3B0aW9zYWx1ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBwcmVzZXRGaWVsZCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnByZXNldEZpZWxkcy5maW5kKGZpZWxkID0+IGZpZWxkLm5hbWUgPT0gZmllbGROYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocHJlc2V0RmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFtGaWVsZFR5cGUuQ3ljbGUsIEZpZWxkVHlwZS5NdWx0aSwgRmllbGRUeXBlLlNlbGVjdF0uY29udGFpbnMocHJlc2V0RmllbGQudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmVzZXRGaWVsZC52YWx1ZXNMaXN0Tm90ZVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL292ZXJyaWRlIHByZXNldFZhbHVlcyBpZiB0aGVyZSBpcyBhIHZhbHVlc0xpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZXNGaWxlID0gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwcmVzZXRGaWVsZC52YWx1ZXNMaXN0Tm90ZVBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNGaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgdmFsdWVzRmlsZS5leHRlbnNpb24gPT0gXCJtZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlczogeyB2YWx1ZTogc3RyaW5nIH1bXSA9IChhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQucmVhZCh2YWx1ZXNGaWxlKSkuc3BsaXQoXCJcXG5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIob3B0aW9uID0+IHRoaXMuZmlsdGVyT3B0aW9uKGZpcnN0VmFsdWVzLCBsYXN0VmFsdWUsIG9wdGlvbikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKF92YWx1ZSA9PiBPYmplY3QoeyB2YWx1ZTogX3ZhbHVlIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LmVudHJpZXMocHJlc2V0RmllbGQub3B0aW9ucykubWFwKG9wdGlvbiA9PiBvcHRpb25bMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihvcHRpb24gPT4gdGhpcy5maWx0ZXJPcHRpb24oZmlyc3RWYWx1ZXMsIGxhc3RWYWx1ZSwgb3B0aW9uKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKF92YWx1ZSA9PiBPYmplY3QoeyB2YWx1ZTogX3ZhbHVlIH0pKVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoW0ZpZWxkVHlwZS5GaWxlLCBGaWVsZFR5cGUuTXVsdGlGaWxlXS5pbmNsdWRlcyhwcmVzZXRGaWVsZC50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRNYW5hZ2VyOiBGaWxlRmllbGQgPSBuZXcgRmllbGRNYW5hZ2VyW3ByZXNldEZpZWxkLnR5cGVdKHByZXNldEZpZWxkKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBmaWVsZE1hbmFnZXIuZ2V0RmlsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmID0+IGYuYmFzZW5hbWUuaW5jbHVkZXMobGFzdFZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmID0+IE9iamVjdCh7IHZhbHVlOiBGaWxlRmllbGQuYnVpbGRNYXJrRG93bkxpbmsoYXBwLCBjb250ZXh0LmZpbGUsIGYuYmFzZW5hbWUpIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZiA9PiBPYmplY3QoeyB2YWx1ZTogRmlsZUZpZWxkLmJ1aWxkTWFya0Rvd25MaW5rKGFwcCwgY29udGV4dC5maWxlLCBmLmJhc2VuYW1lKSB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gW107XG4gICAgfTtcblxuICAgIHJlbmRlclN1Z2dlc3Rpb24oc3VnZ2VzdGlvbjogSVZhbHVlQ29tcGxldGlvbiwgZWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGVsLnNldFRleHQoc3VnZ2VzdGlvbi52YWx1ZSk7XG4gICAgfTtcblxuICAgIHNlbGVjdFN1Z2dlc3Rpb24oc3VnZ2VzdGlvbjogSVZhbHVlQ29tcGxldGlvbiwgZXZlbnQ6IEtleWJvYXJkRXZlbnQgfCBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuICAgICAgICBpZiAoIWFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZWRpdG9yID0gYWN0aXZlVmlldy5lZGl0b3I7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUxpbmUgPSBlZGl0b3IuZ2V0TGluZSh0aGlzLmNvbnRleHQhLnN0YXJ0LmxpbmUpO1xuXG4gICAgICAgIGlmICh0aGlzLmluRnJvbnRtYXR0ZXIpIHtcbiAgICAgICAgICAgIC8vZm9ybWF0IGxpc3QgaWYgaW4gZnJvbnRtYXR0ZXJcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlZEZpZWxkOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBzdHJpbmdbXSB8IG51bGw+ID0gcGFyc2VZYW1sKGFjdGl2ZUxpbmUpXG4gICAgICAgICAgICAgICAgbGV0IFthdHRyLCBwYXN0VmFsdWVzXSA9IE9iamVjdC5lbnRyaWVzKHBhcnNlZEZpZWxkKVswXVxuICAgICAgICAgICAgICAgIGxldCBuZXdGaWVsZDogc3RyaW5nXG4gICAgICAgICAgICAgICAgaWYgKCFwYXN0VmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0ZpZWxkID0gYXR0ciArIFwiOiBcIiArIHN1Z2dlc3Rpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFzdFZhbHVlcyA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhc3RWYWx1ZXMuY29udGFpbnMoXCIsXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGaWVsZCA9IGF0dHIgKyBcIjogXCIgKyBzdWdnZXN0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmllbGQgPSBhdHRyICsgXCI6IFtcIiArIHBhc3RWYWx1ZXMuc3BsaXQoXCIsXCIpLm1hcChvID0+IG8udHJpbSgpKS5zbGljZSgwLCAtMSkuam9pbignLCAnKSArIFwiLCBcIiArIHN1Z2dlc3Rpb24udmFsdWUgKyBcIl1cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwYXN0VmFsdWVzKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlTGluZS5lbmRzV2l0aChcIixdXCIpIHx8IGFjdGl2ZUxpbmUuZW5kc1dpdGgoXCIsIF1cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFsdWUgY2FuIGJlIGRpcmVjdGx5IGFkZGVkIHNpbmNlIHBhcnNlWWFtbCB3b250IGNyZWF0ZSBhbiBlbXB0eSBsYXN0IGl0ZW0gaW4gcGFzdFZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmllbGQgPSBhdHRyICsgXCI6IFtcIiArIFsuLi5wYXN0VmFsdWVzLCBzdWdnZXN0aW9uLnZhbHVlXS5qb2luKFwiLCBcIikgKyBcIl1cIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vd2UgaGF2ZSB0eXBlZCBzb21ldGhpbmcgdGhhdCB3ZSBhaHZlIHRvIHJlbW92ZSB0byByZXBsYWNlIHdpdGggc2VsZWN0ZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ZpZWxkID0gYXR0ciArIFwiOiBbXCIgKyBbLi4ucGFzdFZhbHVlcy5zbGljZSgwLCAtMSksIHN1Z2dlc3Rpb24udmFsdWVdLmpvaW4oXCIsIFwiKSArIFwiXVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdGaWVsZCA9IGF0dHIgKyBcIjogW1wiICsgWy4uLnBhc3RWYWx1ZXNdLmpvaW4oXCIsIFwiKSArIFwiXVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKG5ld0ZpZWxkLCB7IGxpbmU6IHRoaXMuY29udGV4dCEuc3RhcnQubGluZSwgY2g6IDAgfSwgeyBsaW5lOiB0aGlzLmNvbnRleHQhLnN0YXJ0LmxpbmUsIGNoOiBhY3RpdmVMaW5lLmxlbmd0aCB9KTtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXN0VmFsdWVzKSB8fCB0eXBlb2YgcGFzdFZhbHVlcyA9PT0gJ3N0cmluZycgJiYgcGFzdFZhbHVlcy5jb250YWlucyhcIixcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IHRoaXMuY29udGV4dCEuc3RhcnQubGluZSwgY2g6IG5ld0ZpZWxkLmxlbmd0aCAtIDEgfSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHsgbGluZTogdGhpcy5jb250ZXh0IS5zdGFydC5saW5lLCBjaDogbmV3RmllbGQubGVuZ3RoIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRnJvbnRtYXR0ZXIgd3JvbmdseSBmb3JtYXR0ZWRcIiwgMjAwMClcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKClcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmluRnVsbExpbmUpIHtcbiAgICAgICAgICAgIGxldCBjbGVhbmVkTGluZSA9IGFjdGl2ZUxpbmVcbiAgICAgICAgICAgIHdoaWxlICghWycsJywgJzonXS5jb250YWlucyhjbGVhbmVkTGluZS5jaGFyQXQoY2xlYW5lZExpbmUubGVuZ3RoIC0gMSkpKSB7XG4gICAgICAgICAgICAgICAgY2xlYW5lZExpbmUgPSBjbGVhbmVkTGluZS5zbGljZSgwLCAtMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoYCR7Y2xlYW5lZExpbmV9JHtldmVudC5zaGlmdEtleSA/IFwiIFwiIDogXCJcIn1gICsgc3VnZ2VzdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICB7IGxpbmU6IHRoaXMuY29udGV4dCEuc3RhcnQubGluZSwgY2g6IDAgfSwgdGhpcy5jb250ZXh0IS5lbmQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW5TZW50ZW5jZSkge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmNvbnRleHQ/LmVkaXRvci5nZXRDdXJzb3IoKS5jaCB8fCAwXG4gICAgICAgICAgICBsZXQgYmVmb3JlQ3Vyc29yID0gYWN0aXZlTGluZS5zbGljZSgwLCBwb3NpdGlvbilcbiAgICAgICAgICAgIGxldCBhZnRlckN1cnNvciA9IGFjdGl2ZUxpbmUuc2xpY2UocG9zaXRpb24pXG4gICAgICAgICAgICBsZXQgc2VwYXJhdG9yUG9zID0gcG9zaXRpb247XG4gICAgICAgICAgICBsZXQgY3VycmVudFZhbHVlTGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHdoaWxlICghYmVmb3JlQ3Vyc29yLmVuZHNXaXRoKFwiOjpcIikgJiYgIWJlZm9yZUN1cnNvci5lbmRzV2l0aChcIixcIikgJiYgYmVmb3JlQ3Vyc29yLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNlcGFyYXRvclBvcyA9IHNlcGFyYXRvclBvcyAtIDE7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlTGVuZ3RoID0gY3VycmVudFZhbHVlTGVuZ3RoICsgMVxuICAgICAgICAgICAgICAgIGJlZm9yZUN1cnNvciA9IGJlZm9yZUN1cnNvci5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmV4dEJyYWNrZXRQb3MgPSBwb3NpdGlvbjtcbiAgICAgICAgICAgIHdoaWxlICghZW5jb2RlTGluayhhZnRlckN1cnNvcikubWF0Y2goXCIoXFxcXF18XFxcXCkpLipcIikgJiYgYWZ0ZXJDdXJzb3IubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbmV4dEJyYWNrZXRQb3MgPSBuZXh0QnJhY2tldFBvcyArIDE7XG4gICAgICAgICAgICAgICAgYWZ0ZXJDdXJzb3IgPSBhZnRlckN1cnNvci5zbGljZShuZXh0QnJhY2tldFBvcyAtIHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICB7IGxpbmU6IHRoaXMuY29udGV4dCEuc3RhcnQubGluZSwgY2g6IHNlcGFyYXRvclBvcyB9LFxuICAgICAgICAgICAgICAgIHsgbGluZTogdGhpcy5jb250ZXh0IS5zdGFydC5saW5lLCBjaDogbmV4dEJyYWNrZXRQb3MgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IHRoaXMuY29udGV4dCEuc3RhcnQubGluZSwgY2g6IG5leHRCcmFja2V0UG9zIC0gY3VycmVudFZhbHVlTGVuZ3RoICsgc3VnZ2VzdGlvbi52YWx1ZS5sZW5ndGggfSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpZFNlbGVjdCA9IHRydWVcbiAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgfTtcbn07Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx3QkFBNEQ7OztBQ0M1RCx1QkFBNkQ7OztBQ0Q3RCx1QkFBZ0c7OztBQ0FoRyxzQkFBeUM7QUFFekMsc0JBQ0ksTUFDQSxnQkFDQSxXQUNBLE9BQ0EsWUFDQSxlQUNBLFFBQWlCLE1BQ0o7QUFBQTtBQVZqQjtBQVlJLFFBQUk7QUFDSixRQUFJLDBCQUEwQix1QkFBTztBQUNqQyxhQUFPO0FBQUEsSUFDWCxPQUFPO0FBQ0gsWUFBTSxRQUFRLEtBQUksTUFBTSxzQkFBc0IsY0FBYztBQUM1RCxVQUFJLGlCQUFpQix5QkFBUyxNQUFNLGFBQWEsTUFBTTtBQUNuRCxlQUFPO0FBQUEsTUFDWCxPQUFPO0FBQ0gsY0FBTSxNQUFNLDBDQUEwQztBQUFBLE1BQzFEO0FBQUEsSUFDSjtBQUNBLFVBQU0sU0FBUyxNQUFNLEtBQUksTUFBTSxLQUFLLElBQUk7QUFDeEMsUUFBSSxhQUF1QixDQUFDO0FBRTVCLFdBQU8sTUFBTSxJQUFJLEVBQUUsUUFBUSxDQUFDLE1BQU0sZ0JBQWdCO0FBQzlDLFVBQUksZUFBZSxZQUFZO0FBQzNCLFlBQUk7QUFBTyxxQkFBVyxLQUFLLElBQUk7QUFDL0IsbUJBQVcsS0FBSyxHQUFHLFlBQVksZ0JBQWdCLE1BQU0sUUFBUSxPQUFPO0FBQ3BFLFlBQUksQ0FBQztBQUFPLHFCQUFXLEtBQUssSUFBSTtBQUFBLE1BQ3BDLE9BQU87QUFDSCxtQkFBVyxLQUFLLElBQUk7QUFBQSxNQUN4QjtBQUFBLElBQ0osQ0FBQztBQUVELFVBQU0sS0FBSSxNQUFNLE9BQU8s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
